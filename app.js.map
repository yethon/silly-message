{"version":3,"file":"app.js","sources":["../../node_modules/@glimmer/di/dist/modules/es2017/src/container.ts","../../node_modules/@glimmer/di/dist/modules/es2017/src/registry.ts","../../node_modules/@glimmer/di/dist/modules/es2017/src/owner.ts","../../node_modules/@glimmer/runtime/node_modules/@glimmer/util/dist/modules/es5/lib/namespaces.js","../../node_modules/@glimmer/runtime/node_modules/@glimmer/util/dist/modules/es5/lib/object-utils.js","../../node_modules/@glimmer/runtime/node_modules/@glimmer/util/dist/modules/es5/lib/guid.js","../../node_modules/@glimmer/runtime/node_modules/@glimmer/util/dist/modules/es5/lib/collections.js","../../node_modules/@glimmer/runtime/node_modules/@glimmer/util/dist/modules/es5/lib/list-utils.js","../../node_modules/@glimmer/runtime/node_modules/@glimmer/util/dist/modules/es5/lib/weakmap.js","../../node_modules/@glimmer/runtime/node_modules/@glimmer/util/dist/modules/es5/lib/array-utils.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/opcodes.js","../../node_modules/@glimmer/reference/dist/modules/es5/lib/validators.js","../../node_modules/@glimmer/reference/dist/modules/es5/lib/const.js","../../node_modules/@glimmer/reference/node_modules/@glimmer/util/dist/modules/es5/lib/namespaces.js","../../node_modules/@glimmer/reference/node_modules/@glimmer/util/dist/modules/es5/lib/collections.js","../../node_modules/@glimmer/reference/node_modules/@glimmer/util/dist/modules/es5/lib/list-utils.js","../../node_modules/@glimmer/reference/node_modules/@glimmer/util/dist/modules/es5/lib/weakmap.js","../../node_modules/@glimmer/reference/node_modules/@glimmer/util/dist/modules/es5/lib/array-utils.js","../../node_modules/@glimmer/reference/dist/modules/es5/lib/iterable.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiled/expressions/concat.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/references.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiled/opcodes/expressions.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiled/opcodes/vm.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/vm/arguments.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiled/opcodes/dom.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiled/opcodes/component.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/bounds.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/upsert.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/component/interfaces.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/builder.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiled/opcodes/content.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiled/opcodes/debugger.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiled/opcodes/partial.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiled/opcodes/lists.js","../../node_modules/@glimmer/wire-format/dist/modules/es5/lib/opcodes.js","../../node_modules/@glimmer/wire-format/dist/modules/es5/index.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiled/blocks.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiled/opcodes/builder.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compiler.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/scanner.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/syntax/functions.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/environment/constants.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/dom/sanitized-values.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/dom/props.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compat/inner-html-fix.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compat/svg-inner-html-fix.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/compat/text-node-merging-fix.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/dom/helper.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/dom/attribute-managers.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/environment.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/vm/update.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/vm/render-result.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/vm/append.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/template.js","../../node_modules/@glimmer/runtime/dist/modules/es5/lib/dom/interfaces.js","../../node_modules/@glimmer/object-reference/node_modules/@glimmer/util/dist/modules/es5/lib/namespaces.js","../../node_modules/@glimmer/object-reference/node_modules/@glimmer/util/dist/modules/es5/lib/guid.js","../../node_modules/@glimmer/object-reference/node_modules/@glimmer/util/dist/modules/es5/lib/collections.js","../../node_modules/@glimmer/object-reference/node_modules/@glimmer/util/dist/modules/es5/lib/list-utils.js","../../node_modules/@glimmer/object-reference/node_modules/@glimmer/util/dist/modules/es5/lib/weakmap.js","../../node_modules/@glimmer/object-reference/node_modules/@glimmer/util/dist/modules/es5/lib/array-utils.js","../../node_modules/@glimmer/object-reference/dist/modules/es5/lib/utils.js","../../node_modules/@glimmer/object-reference/dist/modules/es5/lib/references/path.js","../../node_modules/@glimmer/object-reference/dist/modules/es5/lib/references/root.js","../../node_modules/@glimmer/object-reference/dist/modules/es5/lib/meta.js","../../node_modules/@glimmer/object-reference/dist/modules/es5/lib/references/descriptors.js","../../node_modules/@glimmer/object-reference/dist/modules/es5/lib/object.js","../../node_modules/@glimmer/application/dist/modules/es2017/src/application-registry.ts","../../node_modules/@glimmer/util/dist/modules/es5/lib/namespaces.js","../../node_modules/@glimmer/util/dist/modules/es5/lib/assert.js","../../node_modules/@glimmer/util/dist/modules/es5/lib/logger.js","../../node_modules/@glimmer/util/dist/modules/es5/lib/object-utils.js","../../node_modules/@glimmer/util/dist/modules/es5/lib/collections.js","../../node_modules/@glimmer/util/dist/modules/es5/lib/list-utils.js","../../node_modules/@glimmer/util/dist/modules/es5/lib/weakmap.js","../../node_modules/@glimmer/util/dist/modules/es5/lib/array-utils.js","../../node_modules/@glimmer/application/dist/modules/es2017/src/dynamic-scope.ts","../../node_modules/@glimmer/application/dist/modules/es2017/src/iterable.ts","../../node_modules/@glimmer/application/dist/modules/es2017/src/helpers/action.ts","../../node_modules/@glimmer/application/dist/modules/es2017/src/helpers/user-helper.ts","../../node_modules/@glimmer/application/dist/modules/es2017/src/environment.ts","../../node_modules/@glimmer/application/dist/modules/es2017/src/templates/main.ts","../../node_modules/@glimmer/application/dist/modules/es2017/src/application.ts","../../node_modules/@glimmer/resolver/node_modules/@glimmer/di/dist/modules/es2017/src/container.ts","../../node_modules/@glimmer/resolver/node_modules/@glimmer/di/dist/modules/es2017/src/registry.ts","../../node_modules/@glimmer/resolver/node_modules/@glimmer/di/dist/modules/es2017/src/owner.ts","../../node_modules/@glimmer/resolver/node_modules/@glimmer/di/dist/modules/es2017/src/specifier.ts","../../node_modules/@glimmer/resolver/dist/modules/es2017/src/utils/debug.ts","../../node_modules/@glimmer/resolver/dist/modules/es2017/src/resolver.ts","../../node_modules/@glimmer/component/node_modules/@glimmer/util/dist/modules/es5/lib/namespaces.js","../../node_modules/@glimmer/component/node_modules/@glimmer/util/dist/modules/es5/lib/collections.js","../../node_modules/@glimmer/component/node_modules/@glimmer/util/dist/modules/es5/lib/list-utils.js","../../node_modules/@glimmer/component/node_modules/@glimmer/util/dist/modules/es5/lib/weakmap.js","../../node_modules/@glimmer/component/node_modules/@glimmer/util/dist/modules/es5/lib/array-utils.js","../../node_modules/@glimmer/component/dist/modules/es2017/src/tracked.ts","../../node_modules/@glimmer/component/dist/modules/es2017/src/references.ts","../../node_modules/@glimmer/component/dist/modules/es2017/src/component-manager.ts","src/ui/components/silly-message/component.ts","src/ui/components/silly-message/template.ts","config/module-map.js","config/resolver-configuration.js","src/main.ts","../../node_modules/@glimmer/web-component/dist/modules/es2017/src/initialize-custom-elements.ts","src/index.ts"],"sourcesContent":["import { Factory, FactoryDefinition } from './factory';\nimport { RegistryReader, Injection } from './registry';\nimport { Resolver } from './resolver';\nimport { Dict } from './dict';\n\nexport default class Container {\n  private _registry: RegistryReader;\n  private _resolver: Resolver;\n  private _lookups: Dict<any>;\n  private _factoryDefinitionLookups: Dict<FactoryDefinition<any>>;\n\n  constructor(registry: RegistryReader, resolver: Resolver = null) {\n    this._registry = registry;\n    this._resolver = resolver;\n    this._lookups = {};\n    this._factoryDefinitionLookups = {};\n  }\n\n  factoryFor(specifier: string): Factory<any> {\n    let factoryDefinition: FactoryDefinition<any> = this._factoryDefinitionLookups[specifier];\n\n    if (!factoryDefinition) {\n      if (this._resolver) {\n        factoryDefinition = this._resolver.retrieve(specifier);\n      }\n\n      if (!factoryDefinition) {\n        factoryDefinition = this._registry.registration(specifier);\n      }\n\n      if (factoryDefinition) {\n        this._factoryDefinitionLookups[specifier] = factoryDefinition;\n      }\n    }\n\n    if (!factoryDefinition) {\n      return;\n    }\n\n    return this.buildFactory(specifier, factoryDefinition);\n  }\n\n  lookup(specifier: string): any {\n    let singleton = (this._registry.registeredOption(specifier, 'singleton') !== false);\n\n    if (singleton && this._lookups[specifier]) {\n      return this._lookups[specifier];\n    }\n\n    let factory = this.factoryFor(specifier);\n    if (!factory) { return; }\n\n    if (this._registry.registeredOption(specifier, 'instantiate') === false) {\n      return factory.class;\n    }\n\n    let object = factory.create();\n\n    if (singleton && object) {\n      this._lookups[specifier] = object;\n    }\n\n    return object;\n  }\n\n  defaultInjections(specifier: string): Object {\n    return {};\n  }\n\n  private buildInjections(specifier: string): Object {\n    let hash = this.defaultInjections(specifier);\n    let injections: Injection[] = this._registry.registeredInjections(specifier);\n    let injection: Injection;\n\n    for (let i = 0; i < injections.length; i++) {\n      injection = injections[i];\n      hash[injection.property] = this.lookup(injection.source);\n    }\n\n    return hash;\n  }\n\n  private buildFactory(specifier: string, factoryDefinition: FactoryDefinition<any>): Factory<any> {\n    let injections = this.buildInjections(specifier);\n\n    return {\n      class: factoryDefinition,\n      create(options) {\n        let mergedOptions = Object.assign({}, injections, options);\n\n        return factoryDefinition.create(mergedOptions);\n      }\n    }\n  }\n}\n","import { Dict } from './dict';\nimport { Factory, FactoryDefinition } from './factory';\n\nexport interface RegistrationOptions {\n  singleton?: boolean;\n  instantiate?: boolean;\n}\n\nexport interface Injection {\n  property: string,\n  source: string\n}\n\nexport interface RegistryWriter {\n  register(specifier: string, factory: any, options?: RegistrationOptions): void;\n  unregister(specifier: string): void;\n  registerOption(specifier: string, option: string, value: any): void;\n  unregisterOption(specifier: string, option: string): void;\n  registerInjection(specifier: string, property: string, source: string): void;\n}\n\nexport interface RegistryReader {\n  registration(specifier: string): any;\n  registeredOption(specifier: string, option: string): any;\n  registeredOptions(specifier: string): any;\n  registeredInjections(specifier: string): Injection[];\n}\n\nexport interface RegistryOptions {\n  fallback?: RegistryReader;\n}\n\nexport interface RegistryAccessor extends RegistryReader, RegistryWriter {}\n\nexport default class Registry implements RegistryAccessor {\n  private _registrations: Dict<FactoryDefinition<any>>;\n  private _registeredOptions: Dict<any>;\n  private _registeredInjections: Dict<Injection[]>;\n  private _fallback: RegistryReader;\n\n  constructor(options?: RegistryOptions) {\n    this._registrations = {};\n    this._registeredOptions = {};\n    this._registeredInjections = {};\n    if (options && options.fallback) {\n      this._fallback = options.fallback;\n    }\n  }\n\n  register(specifier: string, factoryDefinition: FactoryDefinition<any>, options?: RegistrationOptions): void {\n    this._registrations[specifier] = factoryDefinition;\n    if (options) {\n      this._registeredOptions[specifier] = options;\n    }\n  }\n\n  registration(specifier: string): FactoryDefinition<any> {\n    let registration = this._registrations[specifier];\n    if (registration === undefined && this._fallback) {\n      registration = this._fallback.registration(specifier);\n    }\n    return registration;\n  }\n\n  unregister(specifier: string): void {\n    delete this._registrations[specifier];\n    delete this._registeredOptions[specifier];\n    delete this._registeredInjections[specifier];\n  }\n\n  registerOption(specifier: string, option: string, value: any): void {\n    let options = this._registeredOptions[specifier];\n\n    if (!options) {\n      options = {};\n      this._registeredOptions[specifier] = options;\n    }\n\n    options[option] = value;\n  }\n\n  registeredOption(specifier: string, option: string): any {\n    let result: Boolean;\n    let options = this.registeredOptions(specifier);\n\n    if (options) {\n      result = options[option];\n    }\n\n    if (result === undefined && this._fallback !== undefined) {\n      result = this._fallback.registeredOption(specifier, option);\n    }\n\n    return result;\n  }\n\n  registeredOptions(specifier: string): any {\n    let options = this._registeredOptions[specifier];\n    if (options === undefined) {\n      let [type] = specifier.split(':');\n      options = this._registeredOptions[type];\n    }\n    return options;\n  }\n\n  unregisterOption(specifier: string, option: string): void {\n    let options = this._registeredOptions[specifier];\n\n    if (options) {\n      delete options[option];\n    }\n  }\n\n  registerInjection(specifier: string, property: string, source: string): void {\n    let injections = this._registeredInjections[specifier];\n    if (injections === undefined) {\n      this._registeredInjections[specifier] = injections = [];\n    }\n    injections.push({\n      property,\n      source\n    });\n  }\n\n  registeredInjections(specifier: string): Injection[] {\n    let [type] = specifier.split(':');\n    let injections: Injection[] = this._fallback ? this._fallback.registeredInjections(specifier) : [];\n    Array.prototype.push.apply(injections, this._registeredInjections[type]);\n    Array.prototype.push.apply(injections, this._registeredInjections[specifier]);\n    return injections;\n  }\n}\n","import { RegistrationOptions } from './registry';\nimport { Factory } from './factory';\n\n// TODO - use symbol\nexport const OWNER = '__owner__';\n\nexport function getOwner(object: Object): Owner {\n  return object[OWNER];\n}\n\nexport function setOwner(object: Object, owner: Owner): void {\n  object[OWNER] = owner;\n}\n\nexport interface Owner {\n  identify(specifier: string, referrer?: string): string;\n\n  factoryFor(specifier: string, referrer?: string): Factory<any>;\n  \n  lookup(specifier: string, referrer?: string): any;\n}\n","// There is a small whitelist of namespaced attributes specially\n// enumerated in\n// https://www.w3.org/TR/html/syntax.html#attributes-0\n//\n// > When a foreign element has one of the namespaced attributes given by\n// > the local name and namespace of the first and second cells of a row\n// > from the following table, it must be written using the name given by\n// > the third cell from the same row.\n//\n// In all other cases, colons are interpreted as a regular character\n// with no special meaning:\n//\n// > No other namespaced attribute can be expressed in the HTML syntax.\nvar XLINK = 'http://www.w3.org/1999/xlink';\nvar XML = 'http://www.w3.org/XML/1998/namespace';\nvar XMLNS = 'http://www.w3.org/2000/xmlns/';\nvar WHITELIST = {\n    'xlink:actuate': XLINK,\n    'xlink:arcrole': XLINK,\n    'xlink:href': XLINK,\n    'xlink:role': XLINK,\n    'xlink:show': XLINK,\n    'xlink:title': XLINK,\n    'xlink:type': XLINK,\n    'xml:base': XML,\n    'xml:lang': XML,\n    'xml:space': XML,\n    'xmlns': XMLNS,\n    'xmlns:xlink': XMLNS\n};\nexport function getAttrNamespace(attrName) {\n    return WHITELIST[attrName] || null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZXNwYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5hbWVzcGFjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBZ0U7QUFDaEUsQUFBZ0I7QUFDaEIsQUFBc0Q7QUFDdEQsQUFBRTtBQUNGLEFBQXlFO0FBQ3pFLEFBQXdFO0FBQ3hFLEFBQXlFO0FBQ3pFLEFBQXNDO0FBQ3RDLEFBQUU7QUFDRixBQUFvRTtBQUNwRSxBQUEyQjtBQUMzQixBQUFFO0FBQ0YsQUFBdUU7QUFFdkUsSUFBTSxBQUFLLFFBQUcsQUFBOEIsQUFBQztBQUM3QyxJQUFNLEFBQUcsTUFBRyxBQUFzQyxBQUFDO0FBQ25ELElBQU0sQUFBSyxRQUFHLEFBQStCLEFBQUM7QUFFOUMsSUFBTSxBQUFTO0FBQ2IsQUFBZSxxQkFBRSxBQUFLO0FBQ3RCLEFBQWUscUJBQUUsQUFBSztBQUN0QixBQUFZLGtCQUFFLEFBQUs7QUFDbkIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVksa0JBQUUsQUFBSztBQUNuQixBQUFhLG1CQUFFLEFBQUs7QUFDcEIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVcsaUJBQUUsQUFBRztBQUNoQixBQUFPLGFBQUUsQUFBSztBQUNkLEFBQWEsbUJBQUUsQUFBSyxBQUNyQixBQUFDO0FBYmdCO0FBZWxCLEFBQU0saUNBQTJCLEFBQWdCO0FBQy9DLEFBQU0sV0FBQyxBQUFTLFVBQUMsQUFBUSxBQUFDLGFBQUksQUFBSSxBQUFDLEFBQ3JDO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGVyZSBpcyBhIHNtYWxsIHdoaXRlbGlzdCBvZiBuYW1lc3BhY2VkIGF0dHJpYnV0ZXMgc3BlY2lhbGx5XG4vLyBlbnVtZXJhdGVkIGluXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbC9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTBcbi8vXG4vLyA+IFdoZW4gYSBmb3JlaWduIGVsZW1lbnQgaGFzIG9uZSBvZiB0aGUgbmFtZXNwYWNlZCBhdHRyaWJ1dGVzIGdpdmVuIGJ5XG4vLyA+IHRoZSBsb2NhbCBuYW1lIGFuZCBuYW1lc3BhY2Ugb2YgdGhlIGZpcnN0IGFuZCBzZWNvbmQgY2VsbHMgb2YgYSByb3dcbi8vID4gZnJvbSB0aGUgZm9sbG93aW5nIHRhYmxlLCBpdCBtdXN0IGJlIHdyaXR0ZW4gdXNpbmcgdGhlIG5hbWUgZ2l2ZW4gYnlcbi8vID4gdGhlIHRoaXJkIGNlbGwgZnJvbSB0aGUgc2FtZSByb3cuXG4vL1xuLy8gSW4gYWxsIG90aGVyIGNhc2VzLCBjb2xvbnMgYXJlIGludGVycHJldGVkIGFzIGEgcmVndWxhciBjaGFyYWN0ZXJcbi8vIHdpdGggbm8gc3BlY2lhbCBtZWFuaW5nOlxuLy9cbi8vID4gTm8gb3RoZXIgbmFtZXNwYWNlZCBhdHRyaWJ1dGUgY2FuIGJlIGV4cHJlc3NlZCBpbiB0aGUgSFRNTCBzeW50YXguXG5cbmNvbnN0IFhMSU5LID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuY29uc3QgWE1MID0gJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSc7XG5jb25zdCBYTUxOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLyc7XG5cbmNvbnN0IFdISVRFTElTVCA9IHtcbiAgJ3hsaW5rOmFjdHVhdGUnOiBYTElOSyxcbiAgJ3hsaW5rOmFyY3JvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOmhyZWYnOiBYTElOSyxcbiAgJ3hsaW5rOnJvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOnNob3cnOiBYTElOSyxcbiAgJ3hsaW5rOnRpdGxlJzogWExJTkssXG4gICd4bGluazp0eXBlJzogWExJTkssXG4gICd4bWw6YmFzZSc6IFhNTCxcbiAgJ3htbDpsYW5nJzogWE1MLFxuICAneG1sOnNwYWNlJzogWE1MLFxuICAneG1sbnMnOiBYTUxOUyxcbiAgJ3htbG5zOnhsaW5rJzogWE1MTlNcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdHRyTmFtZXNwYWNlKGF0dHJOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIFdISVRFTElTVFthdHRyTmFtZV0gfHwgbnVsbDtcbn0iXX0=","var objKeys = Object.keys;\n\nexport function assign(obj) {\n    for (var i = 1; i < arguments.length; i++) {\n        var assignment = arguments[i];\n        if (assignment === null || typeof assignment !== 'object') continue;\n        var keys = objKeys(assignment);\n        for (var j = 0; j < keys.length; j++) {\n            var key = keys[j];\n            obj[key] = assignment[key];\n        }\n    }\n    return obj;\n}\nexport function fillNulls(count) {\n    var arr = new Array(count);\n    for (var i = 0; i < count; i++) {\n        arr[i] = null;\n    }\n    return arr;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsib2JqZWN0LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJJQUFjLEFBQU8sQUFBRSxVQUFHLEFBQU0sQUFBQyxPQUF6QixBQUFJOztBQVNaLEFBQU0sdUJBQWlCLEFBQVE7QUFDN0IsQUFBRyxBQUFDLFNBQUMsSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFTLFVBQUMsQUFBTSxRQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUM7QUFDMUMsWUFBSSxBQUFVLGFBQUcsQUFBUyxVQUFDLEFBQUMsQUFBQyxBQUFDO0FBQzlCLEFBQUUsQUFBQyxZQUFDLEFBQVUsZUFBSyxBQUFJLFFBQUksT0FBTyxBQUFVLGVBQUssQUFBUSxBQUFDLFVBQUMsQUFBUSxBQUFDO0FBQ3BFLFlBQUksQUFBSSxPQUFHLEFBQU8sUUFBQyxBQUFVLEFBQUMsQUFBQztBQUMvQixBQUFHLEFBQUMsYUFBQyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQUksS0FBQyxBQUFNLFFBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQztBQUNyQyxnQkFBSSxBQUFHLE1BQUcsQUFBSSxLQUFDLEFBQUMsQUFBQyxBQUFDO0FBQ2xCLEFBQUcsZ0JBQUMsQUFBRyxBQUFDLE9BQUcsQUFBVSxXQUFDLEFBQUcsQUFBQyxBQUFDLEFBQzdCO0FBQUMsQUFDSDtBQUFDO0FBQ0QsQUFBTSxXQUFDLEFBQUcsQUFBQyxBQUNiO0FBQUM7QUFFRCxBQUFNLDBCQUF1QixBQUFhO0FBQ3hDLFFBQUksQUFBRyxNQUFHLElBQUksQUFBSyxNQUFDLEFBQUssQUFBQyxBQUFDO0FBRTNCLEFBQUcsQUFBQyxTQUFDLElBQUksQUFBQyxJQUFDLEFBQUMsR0FBRSxBQUFDLElBQUMsQUFBSyxPQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUM7QUFDM0IsQUFBRyxZQUFDLEFBQUMsQUFBQyxLQUFHLEFBQUksQUFBQyxBQUNoQjtBQUFDO0FBRUQsQUFBTSxXQUFDLEFBQUcsQUFBQyxBQUNiO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGtleXM6IG9iaktleXMgfSA9IE9iamVjdDtcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbjxULCBVPihvYmo6IFQsIGFzc2lnbm1lbnRzOiBVKTogVCAmIFU7XG5leHBvcnQgZnVuY3Rpb24gYXNzaWduPFQsIFUsIFY+KG9iajogVCwgYTogVSwgYjogVik6IFQgJiBVICYgVjtcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ248VCwgVSwgViwgVz4ob2JqOiBULCBhOiBVLCBiOiBWLCBjOiBXKTogVCAmIFUgJiBWICYgVztcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ248VCwgVSwgViwgVywgWD4ob2JqOiBULCBhOiBVLCBiOiBWLCBjOiBXLCBkOiBYKTogVCAmIFUgJiBWICYgVyAmIFg7XG5leHBvcnQgZnVuY3Rpb24gYXNzaWduPFQsIFUsIFYsIFcsIFgsIFk+KG9iajogVCwgYTogVSwgYjogViwgYzogVywgZDogWCwgZTogWSk6IFQgJiBVICYgViAmIFcgJiBYICYgWTtcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ248VCwgVSwgViwgVywgWCwgWSwgWj4ob2JqOiBULCBhOiBVLCBiOiBWLCBjOiBXLCBkOiBYLCBlOiBZLCBmOiBaKTogVCAmIFUgJiBWICYgVyAmIFggJiBZICYgWjtcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0OiBhbnksIC4uLmFyZ3M6IGFueVtdKTogYW55O1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbihvYmo6IGFueSkge1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBhc3NpZ25tZW50ID0gYXJndW1lbnRzW2ldO1xuICAgIGlmIChhc3NpZ25tZW50ID09PSBudWxsIHx8IHR5cGVvZiBhc3NpZ25tZW50ICE9PSAnb2JqZWN0JykgY29udGludWU7XG4gICAgbGV0IGtleXMgPSBvYmpLZXlzKGFzc2lnbm1lbnQpO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwga2V5cy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IGtleSA9IGtleXNbal07XG4gICAgICBvYmpba2V5XSA9IGFzc2lnbm1lbnRba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxOdWxsczxUPihjb3VudDogbnVtYmVyKTogVFtdIHtcbiAgbGV0IGFyciA9IG5ldyBBcnJheShjb3VudCk7XG5cbiAgZm9yIChsZXQgaT0wOyBpPGNvdW50OyBpKyspIHtcbiAgICBhcnJbaV0gPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn0iXX0=","var GUID = 0;\nexport function initializeGuid(object) {\n    return object._guid = ++GUID;\n}\nexport function ensureGuid(object) {\n    return object._guid || initializeGuid(object);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImd1aWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxBQUFJLE9BQUcsQUFBQyxBQUFDO0FBTWIsQUFBTSwrQkFBeUIsQUFBZTtBQUM1QyxBQUFNLEFBQUMsV0FBQyxBQUFNLE9BQUMsQUFBSyxRQUFHLEVBQUUsQUFBSSxBQUFDLEFBQUMsQUFDakM7QUFBQztBQUVELEFBQU0sMkJBQXFCLEFBQWU7QUFDeEMsQUFBTSxXQUFDLEFBQU0sT0FBQyxBQUFLLFNBQUksQUFBYyxlQUFDLEFBQU0sQUFBQyxBQUFDLEFBQ2hEO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgR1VJRCA9IDA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFzR3VpZCB7XG4gIF9ndWlkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplR3VpZChvYmplY3Q6IEhhc0d1aWQpOiBudW1iZXIge1xuICByZXR1cm4gKG9iamVjdC5fZ3VpZCA9ICsrR1VJRCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVHdWlkKG9iamVjdDogSGFzR3VpZCk6IG51bWJlciB7XG4gIHJldHVybiBvYmplY3QuX2d1aWQgfHwgaW5pdGlhbGl6ZUd1aWQob2JqZWN0KTtcbn0iXX0=","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { ensureGuid } from './guid';\nvar proto = Object.create(null, {\n    // without this, we will always still end up with (new\n    // EmptyObject()).constructor === Object\n    constructor: {\n        value: undefined,\n        enumerable: false,\n        writable: true\n    }\n});\nfunction EmptyObject() {}\nEmptyObject.prototype = proto;\nexport function dict() {\n    // let d = Object.create(null);\n    // d.x = 1;\n    // delete d.x;\n    // return d;\n    return new EmptyObject();\n}\nexport var DictSet = function () {\n    function DictSet() {\n        _classCallCheck(this, DictSet);\n\n        this.dict = dict();\n    }\n\n    DictSet.prototype.add = function add(obj) {\n        if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;\n        return this;\n    };\n\n    DictSet.prototype.delete = function _delete(obj) {\n        if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];\n    };\n\n    DictSet.prototype.forEach = function forEach(callback) {\n        var dict = this.dict;\n\n        Object.keys(dict).forEach(function (key) {\n            return callback(dict[key]);\n        });\n    };\n\n    DictSet.prototype.toArray = function toArray() {\n        return Object.keys(this.dict);\n    };\n\n    return DictSet;\n}();\nexport var Stack = function () {\n    function Stack() {\n        _classCallCheck(this, Stack);\n\n        this.stack = [];\n        this.current = null;\n    }\n\n    Stack.prototype.toArray = function toArray() {\n        return this.stack;\n    };\n\n    Stack.prototype.push = function push(item) {\n        this.current = item;\n        this.stack.push(item);\n    };\n\n    Stack.prototype.pop = function pop() {\n        var item = this.stack.pop();\n        var len = this.stack.length;\n        this.current = len === 0 ? null : this.stack[len - 1];\n        return item === undefined ? null : item;\n    };\n\n    Stack.prototype.isEmpty = function isEmpty() {\n        return this.stack.length === 0;\n    };\n\n    return Stack;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLEFBQU8sU0FBVyxBQUFVLEFBQUUsa0JBQU0sQUFBUSxBQUFDO0FBYTdDLElBQUksQUFBSyxlQUFVLEFBQU0sT0FBQyxBQUFJO0FBQzVCLEFBQXNEO0FBQ3RELEFBQXdDO0FBQ3hDLEFBQVc7QUFDVCxBQUFLLGVBQUUsQUFBUztBQUNoQixBQUFVLG9CQUFFLEFBQUs7QUFDakIsQUFBUSxrQkFBRSxBQUFJLEFBQ2YsQUFDRixBQUFDLEFBQUM7QUFMWTtBQUhpQixDQUFwQixBQUFNO0FBVWxCLHVCQUF3QixDQUFDO0FBQ3pCLEFBQVcsWUFBQyxBQUFTLFlBQUcsQUFBSyxBQUFDO0FBRTlCLEFBQU07QUFDSixBQUErQjtBQUMvQixBQUFXO0FBQ1gsQUFBYztBQUNkLEFBQVk7QUFDWixBQUFNLFdBQUMsSUFBSyxBQUFtQixBQUFFLEFBQUMsQUFDcEM7QUFBQztBQUlELEFBQU07QUFHSjs7O0FBQ0UsQUFBSSxhQUFDLEFBQUksT0FBRyxBQUFJLEFBQUssQUFBQyxBQUN4QjtBQUFDOztzQkFFRCxBQUFHLG1CQUFDLEFBQU07QUFDUixBQUFFLEFBQUMsWUFBQyxPQUFPLEFBQUcsUUFBSyxBQUFRLEFBQUMsVUFBQyxBQUFJLEtBQUMsQUFBSSxLQUFNLEFBQUcsQUFBQyxPQUFHLEFBQUcsQUFBQyxBQUN2RCxBQUFJLFNBQUMsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFVLFdBQU0sQUFBRyxBQUFDLEFBQUMsUUFBRyxBQUFHLEFBQUM7QUFDM0MsQUFBTSxlQUFDLEFBQUksQUFBQyxBQUNkO0FBQUM7O3NCQUVELEFBQU0sMEJBQUMsQUFBTTtBQUNYLEFBQUUsQUFBQyxZQUFDLE9BQU8sQUFBRyxRQUFLLEFBQVEsQUFBQyxVQUFDLE9BQU8sQUFBSSxLQUFDLEFBQUksS0FBTSxBQUFHLEFBQUMsQUFBQyxBQUN4RCxBQUFJLFVBQUMsQUFBRSxBQUFDLElBQUUsQUFBVyxJQUFDLEFBQUssQUFBQyxPQUFDLE9BQU8sQUFBSSxLQUFDLEFBQUksS0FBRSxBQUFXLElBQUMsQUFBSyxBQUFDLEFBQUMsQUFDcEU7QUFBQzs7c0JBRUQsQUFBTywyQkFBQyxBQUEyQjtBQUNqQyxBQUFJLFlBQUUsQUFBSSxBQUFFLE9BQUcsQUFBSSxBQUFDOztBQUNwQixBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxNQUFDLEFBQU87QUFBQyxBQUFHLG1CQUFJLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBRyxBQUFDLEFBQUMsQUFBQyxBQUFDLEFBQ3hEOztBQUFDOztzQkFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ2hDO0FBQUMsQUFDRjs7OztBQUVELEFBQU07QUFBTjs7O0FBQ1UsYUFBSyxRQUFRLEFBQUUsQUFBQztBQUNqQixhQUFPLFVBQWMsQUFBSSxBQUFDLEFBc0JuQztBQUFDOztvQkFwQkMsQUFBTztBQUNMLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQ3BCO0FBQUM7O29CQUVELEFBQUkscUJBQUMsQUFBTztBQUNWLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBSSxBQUFDO0FBQ3BCLEFBQUksYUFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ3hCO0FBQUM7O29CQUVELEFBQUc7QUFDRCxZQUFJLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQUcsQUFBRSxBQUFDO0FBQzVCLFlBQUksQUFBRyxNQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxBQUFDO0FBQzVCLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBRyxRQUFLLEFBQUMsSUFBRyxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLE1BQUcsQUFBQyxBQUFDLEFBQUM7QUFFdEQsQUFBTSxlQUFDLEFBQUksU0FBSyxBQUFTLFlBQUcsQUFBSSxPQUFHLEFBQUksQUFBQyxBQUMxQztBQUFDOztvQkFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxXQUFLLEFBQUMsQUFBQyxBQUNqQztBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNHdWlkLCBlbnN1cmVHdWlkIH0gZnJvbSAnLi9ndWlkJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpY3Q8VD4ge1xuICBbaW5kZXg6IHN0cmluZ106IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0PFQ+IHtcbiAgYWRkKHZhbHVlOiBUKTogU2V0PFQ+O1xuICBkZWxldGUodmFsdWU6IFQpOiB2b2lkO1xuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmxldCBwcm90byA9IE9iamVjdC5jcmVhdGUobnVsbCwge1xuICAvLyB3aXRob3V0IHRoaXMsIHdlIHdpbGwgYWx3YXlzIHN0aWxsIGVuZCB1cCB3aXRoIChuZXdcbiAgLy8gRW1wdHlPYmplY3QoKSkuY29uc3RydWN0b3IgPT09IE9iamVjdFxuICBjb25zdHJ1Y3Rvcjoge1xuICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIEVtcHR5T2JqZWN0KCkge31cbkVtcHR5T2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuXG5leHBvcnQgZnVuY3Rpb24gZGljdDxUPigpOiBEaWN0PFQ+IHtcbiAgLy8gbGV0IGQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBkLnggPSAxO1xuICAvLyBkZWxldGUgZC54O1xuICAvLyByZXR1cm4gZDtcbiAgcmV0dXJuIG5ldyAoRW1wdHlPYmplY3QgYXMgYW55KSgpO1xufVxuXG5leHBvcnQgdHlwZSBTZXRNZW1iZXIgPSBIYXNHdWlkIHwgc3RyaW5nO1xuXG5leHBvcnQgY2xhc3MgRGljdFNldDxUIGV4dGVuZHMgU2V0TWVtYmVyPiBpbXBsZW1lbnRzIFNldDxUPiB7XG4gIHByaXZhdGUgZGljdDogRGljdDxUPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRpY3QgPSBkaWN0PFQ+KCk7XG4gIH1cblxuICBhZGQob2JqOiBUKTogU2V0PFQ+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHRoaXMuZGljdFs8YW55Pm9ial0gPSBvYmo7XG4gICAgZWxzZSB0aGlzLmRpY3RbZW5zdXJlR3VpZCg8YW55Pm9iaildID0gb2JqO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKG9iajogVCkge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgZGVsZXRlIHRoaXMuZGljdFs8YW55Pm9ial07XG4gICAgZWxzZSBpZiAoKG9iaiBhcyBhbnkpLl9ndWlkKSBkZWxldGUgdGhpcy5kaWN0WyhvYmogYXMgYW55KS5fZ3VpZF07XG4gIH1cblxuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCkge1xuICAgIGxldCB7IGRpY3QgfSA9IHRoaXM7XG4gICAgT2JqZWN0LmtleXMoZGljdCkuZm9yRWFjaChrZXkgPT4gY2FsbGJhY2soZGljdFtrZXldKSk7XG4gIH1cblxuICB0b0FycmF5KCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5kaWN0KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhY2s8VD4ge1xuICBwcml2YXRlIHN0YWNrOiBUW10gPSBbXTtcbiAgcHVibGljIGN1cnJlbnQ6IE9wdGlvbjxUPiA9IG51bGw7XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIHJldHVybiB0aGlzLnN0YWNrO1xuICB9XG5cbiAgcHVzaChpdGVtOiBUKSB7XG4gICAgdGhpcy5jdXJyZW50ID0gaXRlbTtcbiAgICB0aGlzLnN0YWNrLnB1c2goaXRlbSk7XG4gIH1cblxuICBwb3AoKTogT3B0aW9uPFQ+IHtcbiAgICBsZXQgaXRlbSA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgbGV0IGxlbiA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIHRoaXMuY3VycmVudCA9IGxlbiA9PT0gMCA/IG51bGwgOiB0aGlzLnN0YWNrW2xlbiAtIDFdO1xuXG4gICAgcmV0dXJuIGl0ZW0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBpdGVtO1xuICB9XG5cbiAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGggPT09IDA7XG4gIH1cbn1cbiJdfQ==","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nexport var ListNode = function ListNode(value) {\n    _classCallCheck(this, ListNode);\n\n    this.next = null;\n    this.prev = null;\n    this.value = value;\n};\nexport var LinkedList = function () {\n    function LinkedList() {\n        _classCallCheck(this, LinkedList);\n\n        this.clear();\n    }\n\n    LinkedList.fromSlice = function fromSlice(slice) {\n        var list = new LinkedList();\n        slice.forEachNode(function (n) {\n            return list.append(n.clone());\n        });\n        return list;\n    };\n\n    LinkedList.prototype.head = function head() {\n        return this._head;\n    };\n\n    LinkedList.prototype.tail = function tail() {\n        return this._tail;\n    };\n\n    LinkedList.prototype.clear = function clear() {\n        this._head = this._tail = null;\n    };\n\n    LinkedList.prototype.isEmpty = function isEmpty() {\n        return this._head === null;\n    };\n\n    LinkedList.prototype.toArray = function toArray() {\n        var out = [];\n        this.forEachNode(function (n) {\n            return out.push(n);\n        });\n        return out;\n    };\n\n    LinkedList.prototype.splice = function splice(start, end, reference) {\n        var before = void 0;\n        if (reference === null) {\n            before = this._tail;\n            this._tail = end;\n        } else {\n            before = reference.prev;\n            end.next = reference;\n            reference.prev = end;\n        }\n        if (before) {\n            before.next = start;\n            start.prev = before;\n        }\n    };\n\n    LinkedList.prototype.nextNode = function nextNode(node) {\n        return node.next;\n    };\n\n    LinkedList.prototype.prevNode = function prevNode(node) {\n        return node.prev;\n    };\n\n    LinkedList.prototype.forEachNode = function forEachNode(callback) {\n        var node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = node.next;\n        }\n    };\n\n    LinkedList.prototype.contains = function contains(needle) {\n        var node = this._head;\n        while (node !== null) {\n            if (node === needle) return true;\n            node = node.next;\n        }\n        return false;\n    };\n\n    LinkedList.prototype.insertBefore = function insertBefore(node) {\n        var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        if (reference === null) return this.append(node);\n        if (reference.prev) reference.prev.next = node;else this._head = node;\n        node.prev = reference.prev;\n        node.next = reference;\n        reference.prev = node;\n        return node;\n    };\n\n    LinkedList.prototype.append = function append(node) {\n        var tail = this._tail;\n        if (tail) {\n            tail.next = node;\n            node.prev = tail;\n            node.next = null;\n        } else {\n            this._head = node;\n        }\n        return this._tail = node;\n    };\n\n    LinkedList.prototype.pop = function pop() {\n        if (this._tail) return this.remove(this._tail);\n        return null;\n    };\n\n    LinkedList.prototype.prepend = function prepend(node) {\n        if (this._head) return this.insertBefore(node, this._head);\n        return this._head = this._tail = node;\n    };\n\n    LinkedList.prototype.remove = function remove(node) {\n        if (node.prev) node.prev.next = node.next;else this._head = node.next;\n        if (node.next) node.next.prev = node.prev;else this._tail = node.prev;\n        return node;\n    };\n\n    return LinkedList;\n}();\nexport var ListSlice = function () {\n    function ListSlice(head, tail) {\n        _classCallCheck(this, ListSlice);\n\n        this._head = head;\n        this._tail = tail;\n    }\n\n    ListSlice.toList = function toList(slice) {\n        var list = new LinkedList();\n        slice.forEachNode(function (n) {\n            return list.append(n.clone());\n        });\n        return list;\n    };\n\n    ListSlice.prototype.forEachNode = function forEachNode(callback) {\n        var node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = this.nextNode(node);\n        }\n    };\n\n    ListSlice.prototype.contains = function contains(needle) {\n        var node = this._head;\n        while (node !== null) {\n            if (node === needle) return true;\n            node = node.next;\n        }\n        return false;\n    };\n\n    ListSlice.prototype.head = function head() {\n        return this._head;\n    };\n\n    ListSlice.prototype.tail = function tail() {\n        return this._tail;\n    };\n\n    ListSlice.prototype.toArray = function toArray() {\n        var out = [];\n        this.forEachNode(function (n) {\n            return out.push(n);\n        });\n        return out;\n    };\n\n    ListSlice.prototype.nextNode = function nextNode(node) {\n        if (node === this._tail) return null;\n        return node.next;\n    };\n\n    ListSlice.prototype.prevNode = function prevNode(node) {\n        if (node === this._head) return null;\n        return node.prev;\n    };\n\n    ListSlice.prototype.isEmpty = function isEmpty() {\n        return false;\n    };\n\n    return ListSlice;\n}();\nexport var EMPTY_SLICE = new ListSlice(null, null);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export var HAS_NATIVE_WEAKMAP = function () {\n    // detect if `WeakMap` is even present\n    var hasWeakMap = typeof WeakMap === 'function';\n    if (!hasWeakMap) {\n        return false;\n    }\n    var instance = new WeakMap();\n    // use `Object`'s `.toString` directly to prevent us from detecting\n    // polyfills as native weakmaps\n    return Object.prototype.toString.call(instance) === '[object WeakMap]';\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha21hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYWttYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBTSxXQUFPLEFBQWtCLHFCQUFJO0FBQ2pDLEFBQXNDO0FBQ3RDLFFBQUksQUFBVSxhQUFHLE9BQU8sQUFBTyxZQUFLLEFBQVUsQUFBQztBQUMvQyxBQUFFLEFBQUMsUUFBQyxDQUFDLEFBQVUsQUFBQyxZQUFDLEFBQUM7QUFBQyxBQUFNLGVBQUMsQUFBSyxBQUFDLEFBQUM7QUFBQztBQUVsQyxRQUFJLEFBQVEsV0FBRyxJQUFJLEFBQU8sQUFBRSxBQUFDO0FBQzdCLEFBQW1FO0FBQ25FLEFBQStCO0FBQy9CLEFBQU0sV0FBQyxBQUFNLE9BQUMsQUFBUyxVQUFDLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBUSxBQUFDLGNBQUssQUFBa0IsQUFBQyxBQUN6RTtBQUFDLEFBQUMsQUFBRSxBQUFDLENBVDZCLEVBQTNCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEhBU19OQVRJVkVfV0VBS01BUCA9IChmdW5jdGlvbigpIHtcbiAgLy8gZGV0ZWN0IGlmIGBXZWFrTWFwYCBpcyBldmVuIHByZXNlbnRcbiAgbGV0IGhhc1dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJztcbiAgaWYgKCFoYXNXZWFrTWFwKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGxldCBpbnN0YW5jZSA9IG5ldyBXZWFrTWFwKCk7XG4gIC8vIHVzZSBgT2JqZWN0YCdzIGAudG9TdHJpbmdgIGRpcmVjdGx5IHRvIHByZXZlbnQgdXMgZnJvbSBkZXRlY3RpbmdcbiAgLy8gcG9seWZpbGxzIGFzIG5hdGl2ZSB3ZWFrbWFwc1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGluc3RhbmNlKSA9PT0gJ1tvYmplY3QgV2Vha01hcF0nO1xufSkoKTtcbiJdfQ==","import { HAS_NATIVE_WEAKMAP } from './weakmap';\nvar HAS_TYPED_ARRAYS = typeof Uint32Array !== 'undefined';\nvar A = void 0;\nif (HAS_TYPED_ARRAYS) {\n    A = Uint32Array;\n} else {\n    A = Array;\n}\nexport default A;\nexport var EMPTY_ARRAY = HAS_NATIVE_WEAKMAP ? Object.freeze([]) : [];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcnJheS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUFPLFNBQUUsQUFBa0IsQUFBRSwwQkFBTSxBQUFXLEFBQUM7QUFFL0MsSUFBTSxBQUFnQixtQkFBRyxPQUFPLEFBQVcsZ0JBQUssQUFBVyxBQUFDO0FBRTVELElBQUksQUFBQyxBQUFDO0FBRU4sQUFBRSxBQUFDLElBQUMsQUFBZ0IsQUFBQyxrQkFBQyxBQUFDO0FBQ3JCLEFBQUMsUUFBRyxBQUFXLEFBQUMsQUFDbEI7QUFBQyxBQUFDLEFBQUksT0FBQyxBQUFDO0FBQ04sQUFBQyxRQUFHLEFBQUssQUFBQyxBQUNaO0FBQUM7QUFFRCxlQUFlLEFBQUMsQUFBQztBQUVqQixBQUFNLE9BQUMsSUFBTSxBQUFXLEFBQVUsY0FBQyxBQUFrQixxQkFBRyxBQUFNLE9BQUMsQUFBTSxPQUFDLEFBQUUsQUFBQyxNQUFHLEFBQUUsQUFBUSxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSEFTX05BVElWRV9XRUFLTUFQIH0gZnJvbSAnLi93ZWFrbWFwJztcblxuY29uc3QgSEFTX1RZUEVEX0FSUkFZUyA9IHR5cGVvZiBVaW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCc7XG5cbmxldCBBO1xuXG5pZiAoSEFTX1RZUEVEX0FSUkFZUykge1xuICBBID0gVWludDMyQXJyYXk7XG59IGVsc2Uge1xuICBBID0gQXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEE7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWTogYW55W10gPSAoSEFTX05BVElWRV9XRUFLTUFQID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXSkgYXMgYW55OyJdfQ==","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { initializeGuid, fillNulls } from '@glimmer/util';\n/**\n * Registers\n *\n * For the most part, these follows MIPS naming conventions, however the\n * register numbers are different.\n */\nexport var Register;\n(function (Register) {\n    // $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit\n    Register[Register[\"pc\"] = 0] = \"pc\";\n    // $1 or $ra (return address): pointer into `program` for the return\n    Register[Register[\"ra\"] = 1] = \"ra\";\n    // $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack\n    Register[Register[\"fp\"] = 2] = \"fp\";\n    // $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack\n    Register[Register[\"sp\"] = 3] = \"sp\";\n    // $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers\n    Register[Register[\"s0\"] = 4] = \"s0\";\n    Register[Register[\"s1\"] = 5] = \"s1\";\n    // $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers\n    Register[Register[\"t0\"] = 6] = \"t0\";\n    Register[Register[\"t1\"] = 7] = \"t1\";\n})(Register || (Register = {}));\nexport var AppendOpcodes = function () {\n    function AppendOpcodes() {\n        _classCallCheck(this, AppendOpcodes);\n\n        this.evaluateOpcode = fillNulls(72 /* Size */).slice();\n    }\n\n    AppendOpcodes.prototype.add = function add(name, evaluate) {\n        this.evaluateOpcode[name] = evaluate;\n    };\n\n    AppendOpcodes.prototype.evaluate = function evaluate(vm, opcode, type) {\n        var func = this.evaluateOpcode[type];\n        // console.log(...debug(vm.constants, type, opcode.op1, opcode.op2, opcode.op3));\n        func(vm, opcode);\n    };\n\n    return AppendOpcodes;\n}();\nexport var APPEND_OPCODES = new AppendOpcodes();\nexport var AbstractOpcode = function AbstractOpcode() {\n    _classCallCheck(this, AbstractOpcode);\n\n    initializeGuid(this);\n};\nexport var UpdatingOpcode = function (_AbstractOpcode) {\n    _inherits(UpdatingOpcode, _AbstractOpcode);\n\n    function UpdatingOpcode() {\n        _classCallCheck(this, UpdatingOpcode);\n\n        var _this = _possibleConstructorReturn(this, _AbstractOpcode.apply(this, arguments));\n\n        _this.next = null;\n        _this.prev = null;\n        return _this;\n    }\n\n    return UpdatingOpcode;\n}(AbstractOpcode);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nexport var CONSTANT = 0;\nexport var INITIAL = 1;\nexport var VOLATILE = NaN;\nexport var RevisionTag = function () {\n    function RevisionTag() {\n        _classCallCheck(this, RevisionTag);\n    }\n\n    RevisionTag.prototype.validate = function validate(snapshot) {\n        return this.value() === snapshot;\n    };\n\n    return RevisionTag;\n}();\nRevisionTag.id = 0;\nvar VALUE = [];\nvar VALIDATE = [];\nexport var TagWrapper = function () {\n    function TagWrapper(type, inner) {\n        _classCallCheck(this, TagWrapper);\n\n        this.type = type;\n        this.inner = inner;\n    }\n\n    TagWrapper.prototype.value = function value() {\n        var func = VALUE[this.type];\n        return func(this.inner);\n    };\n\n    TagWrapper.prototype.validate = function validate(snapshot) {\n        var func = VALIDATE[this.type];\n        return func(this.inner, snapshot);\n    };\n\n    return TagWrapper;\n}();\nfunction register(Type) {\n    var type = VALUE.length;\n    VALUE.push(function (tag) {\n        return tag.value();\n    });\n    VALIDATE.push(function (tag, snapshot) {\n        return tag.validate(snapshot);\n    });\n    Type.id = type;\n}\n///\n// CONSTANT: 0\nVALUE.push(function () {\n    return CONSTANT;\n});\nVALIDATE.push(function (_tag, snapshot) {\n    return snapshot === CONSTANT;\n});\nexport var CONSTANT_TAG = new TagWrapper(0, null);\n// VOLATILE: 1\nVALUE.push(function () {\n    return VOLATILE;\n});\nVALIDATE.push(function (_tag, snapshot) {\n    return snapshot === VOLATILE;\n});\nexport var VOLATILE_TAG = new TagWrapper(1, null);\n// CURRENT: 2\nVALUE.push(function () {\n    return $REVISION;\n});\nVALIDATE.push(function (_tag, snapshot) {\n    return snapshot === $REVISION;\n});\nexport var CURRENT_TAG = new TagWrapper(2, null);\n///\nvar $REVISION = INITIAL;\nexport var DirtyableTag = function (_RevisionTag) {\n    _inherits(DirtyableTag, _RevisionTag);\n\n    DirtyableTag.create = function create() {\n        var revision = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $REVISION;\n\n        return new TagWrapper(this.id, new DirtyableTag(revision));\n    };\n\n    function DirtyableTag() {\n        var revision = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $REVISION;\n\n        _classCallCheck(this, DirtyableTag);\n\n        var _this = _possibleConstructorReturn(this, _RevisionTag.call(this));\n\n        _this.revision = revision;\n        return _this;\n    }\n\n    DirtyableTag.prototype.value = function value() {\n        return this.revision;\n    };\n\n    DirtyableTag.prototype.dirty = function dirty() {\n        this.revision = ++$REVISION;\n    };\n\n    return DirtyableTag;\n}(RevisionTag);\nregister(DirtyableTag);\nexport function combineTagged(tagged) {\n    var optimized = [];\n    for (var i = 0, l = tagged.length; i < l; i++) {\n        var tag = tagged[i].tag;\n        if (tag === VOLATILE_TAG) return VOLATILE_TAG;\n        if (tag === CONSTANT_TAG) continue;\n        optimized.push(tag);\n    }\n    return _combine(optimized);\n}\nexport function combineSlice(slice) {\n    var optimized = [];\n    var node = slice.head();\n    while (node !== null) {\n        var tag = node.tag;\n        if (tag === VOLATILE_TAG) return VOLATILE_TAG;\n        if (tag !== CONSTANT_TAG) optimized.push(tag);\n        node = slice.nextNode(node);\n    }\n    return _combine(optimized);\n}\nexport function combine(tags) {\n    var optimized = [];\n    for (var i = 0, l = tags.length; i < l; i++) {\n        var tag = tags[i];\n        if (tag === VOLATILE_TAG) return VOLATILE_TAG;\n        if (tag === CONSTANT_TAG) continue;\n        optimized.push(tag);\n    }\n    return _combine(optimized);\n}\nfunction _combine(tags) {\n    switch (tags.length) {\n        case 0:\n            return CONSTANT_TAG;\n        case 1:\n            return tags[0];\n        case 2:\n            return TagsPair.create(tags[0], tags[1]);\n        default:\n            return TagsCombinator.create(tags);\n    }\n    ;\n}\nexport var CachedTag = function (_RevisionTag2) {\n    _inherits(CachedTag, _RevisionTag2);\n\n    function CachedTag() {\n        _classCallCheck(this, CachedTag);\n\n        var _this2 = _possibleConstructorReturn(this, _RevisionTag2.apply(this, arguments));\n\n        _this2.lastChecked = null;\n        _this2.lastValue = null;\n        return _this2;\n    }\n\n    CachedTag.prototype.value = function value() {\n        var lastChecked = this.lastChecked,\n            lastValue = this.lastValue;\n\n        if (lastChecked !== $REVISION) {\n            this.lastChecked = $REVISION;\n            this.lastValue = lastValue = this.compute();\n        }\n        return this.lastValue;\n    };\n\n    CachedTag.prototype.invalidate = function invalidate() {\n        this.lastChecked = null;\n    };\n\n    return CachedTag;\n}(RevisionTag);\n\nvar TagsPair = function (_CachedTag) {\n    _inherits(TagsPair, _CachedTag);\n\n    TagsPair.create = function create(first, second) {\n        return new TagWrapper(this.id, new TagsPair(first, second));\n    };\n\n    function TagsPair(first, second) {\n        _classCallCheck(this, TagsPair);\n\n        var _this3 = _possibleConstructorReturn(this, _CachedTag.call(this));\n\n        _this3.first = first;\n        _this3.second = second;\n        return _this3;\n    }\n\n    TagsPair.prototype.compute = function compute() {\n        return Math.max(this.first.value(), this.second.value());\n    };\n\n    return TagsPair;\n}(CachedTag);\n\nregister(TagsPair);\n\nvar TagsCombinator = function (_CachedTag2) {\n    _inherits(TagsCombinator, _CachedTag2);\n\n    TagsCombinator.create = function create(tags) {\n        return new TagWrapper(this.id, new TagsCombinator(tags));\n    };\n\n    function TagsCombinator(tags) {\n        _classCallCheck(this, TagsCombinator);\n\n        var _this4 = _possibleConstructorReturn(this, _CachedTag2.call(this));\n\n        _this4.tags = tags;\n        return _this4;\n    }\n\n    TagsCombinator.prototype.compute = function compute() {\n        var tags = this.tags;\n\n        var max = -1;\n        for (var i = 0; i < tags.length; i++) {\n            var value = tags[i].value();\n            max = Math.max(value, max);\n        }\n        return max;\n    };\n\n    return TagsCombinator;\n}(CachedTag);\n\nregister(TagsCombinator);\nexport var UpdatableTag = function (_CachedTag3) {\n    _inherits(UpdatableTag, _CachedTag3);\n\n    UpdatableTag.create = function create(tag) {\n        return new TagWrapper(this.id, new UpdatableTag(tag));\n    };\n\n    function UpdatableTag(tag) {\n        _classCallCheck(this, UpdatableTag);\n\n        var _this5 = _possibleConstructorReturn(this, _CachedTag3.call(this));\n\n        _this5.tag = tag;\n        _this5.lastUpdated = INITIAL;\n        return _this5;\n    }\n\n    UpdatableTag.prototype.compute = function compute() {\n        return Math.max(this.lastUpdated, this.tag.value());\n    };\n\n    UpdatableTag.prototype.update = function update(tag) {\n        if (tag !== this.tag) {\n            this.tag = tag;\n            this.lastUpdated = $REVISION;\n            this.invalidate();\n        }\n    };\n\n    return UpdatableTag;\n}(CachedTag);\nregister(UpdatableTag);\nexport var CachedReference = function () {\n    function CachedReference() {\n        _classCallCheck(this, CachedReference);\n\n        this.lastRevision = null;\n        this.lastValue = null;\n    }\n\n    CachedReference.prototype.value = function value() {\n        var tag = this.tag,\n            lastRevision = this.lastRevision,\n            lastValue = this.lastValue;\n\n        if (!lastRevision || !tag.validate(lastRevision)) {\n            lastValue = this.lastValue = this.compute();\n            this.lastRevision = tag.value();\n        }\n        return lastValue;\n    };\n\n    CachedReference.prototype.invalidate = function invalidate() {\n        this.lastRevision = null;\n    };\n\n    return CachedReference;\n}();\n\nvar MapperReference = function (_CachedReference) {\n    _inherits(MapperReference, _CachedReference);\n\n    function MapperReference(reference, mapper) {\n        _classCallCheck(this, MapperReference);\n\n        var _this6 = _possibleConstructorReturn(this, _CachedReference.call(this));\n\n        _this6.tag = reference.tag;\n        _this6.reference = reference;\n        _this6.mapper = mapper;\n        return _this6;\n    }\n\n    MapperReference.prototype.compute = function compute() {\n        var reference = this.reference,\n            mapper = this.mapper;\n\n        return mapper(reference.value());\n    };\n\n    return MapperReference;\n}(CachedReference);\n\nexport function map(reference, mapper) {\n    return new MapperReference(reference, mapper);\n}\n//////////\nexport var ReferenceCache = function () {\n    function ReferenceCache(reference) {\n        _classCallCheck(this, ReferenceCache);\n\n        this.lastValue = null;\n        this.lastRevision = null;\n        this.initialized = false;\n        this.tag = reference.tag;\n        this.reference = reference;\n    }\n\n    ReferenceCache.prototype.peek = function peek() {\n        if (!this.initialized) {\n            return this.initialize();\n        }\n        return this.lastValue;\n    };\n\n    ReferenceCache.prototype.revalidate = function revalidate() {\n        if (!this.initialized) {\n            return this.initialize();\n        }\n        var reference = this.reference,\n            lastRevision = this.lastRevision;\n\n        var tag = reference.tag;\n        if (tag.validate(lastRevision)) return NOT_MODIFIED;\n        this.lastRevision = tag.value();\n        var lastValue = this.lastValue;\n\n        var value = reference.value();\n        if (value === lastValue) return NOT_MODIFIED;\n        this.lastValue = value;\n        return value;\n    };\n\n    ReferenceCache.prototype.initialize = function initialize() {\n        var reference = this.reference;\n\n        var value = this.lastValue = reference.value();\n        this.lastRevision = reference.tag.value();\n        this.initialized = true;\n        return value;\n    };\n\n    return ReferenceCache;\n}();\nvar NOT_MODIFIED = \"adb3b78e-3d22-4e4b-877a-6317c2c5c145\";\nexport function isModified(value) {\n    return value !== NOT_MODIFIED;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { CONSTANT_TAG } from './validators';\nexport var ConstReference = function () {\n    function ConstReference(inner) {\n        _classCallCheck(this, ConstReference);\n\n        this.inner = inner;\n        this.tag = CONSTANT_TAG;\n    }\n\n    ConstReference.prototype.value = function value() {\n        return this.inner;\n    };\n\n    return ConstReference;\n}();\nexport function isConst(reference) {\n    return reference.tag === CONSTANT_TAG;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb25zdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLEFBQU8sU0FBRSxBQUFZLEFBQTJCLG9CQUFNLEFBQWMsQUFBQztBQUVyRSxBQUFNO0FBR0osNEJBQXNCLEFBQVE7OztBQUFSLGFBQUssUUFBTCxBQUFLLEFBQUc7QUFGdkIsYUFBRyxNQUFRLEFBQVksQUFBQyxBQUVHO0FBQUM7OzZCQUVuQyxBQUFLO0FBQVEsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFBQztBQUFDLEFBQ2xDOzs7O0FBRUQsQUFBTSx3QkFBa0IsQUFBdUI7QUFDN0MsQUFBTSxXQUFDLEFBQVMsVUFBQyxBQUFHLFFBQUssQUFBWSxBQUFDLEFBQ3hDO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDT05TVEFOVF9UQUcsIFZlcnNpb25lZFJlZmVyZW5jZSwgVGFnIH0gZnJvbSAnLi92YWxpZGF0b3JzJztcblxuZXhwb3J0IGNsYXNzIENvbnN0UmVmZXJlbmNlPFQ+IGltcGxlbWVudHMgVmVyc2lvbmVkUmVmZXJlbmNlPFQ+IHtcbiAgcHVibGljIHRhZzogVGFnID0gQ09OU1RBTlRfVEFHO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbm5lcjogVCkgeyB9XG5cbiAgdmFsdWUoKTogVCB7IHJldHVybiB0aGlzLmlubmVyOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbnN0KHJlZmVyZW5jZTogeyB0YWc6IFRhZyB9KTogYm9vbGVhbiB7XG4gIHJldHVybiByZWZlcmVuY2UudGFnID09PSBDT05TVEFOVF9UQUc7XG59XG4iXX0=","// There is a small whitelist of namespaced attributes specially\n// enumerated in\n// https://www.w3.org/TR/html/syntax.html#attributes-0\n//\n// > When a foreign element has one of the namespaced attributes given by\n// > the local name and namespace of the first and second cells of a row\n// > from the following table, it must be written using the name given by\n// > the third cell from the same row.\n//\n// In all other cases, colons are interpreted as a regular character\n// with no special meaning:\n//\n// > No other namespaced attribute can be expressed in the HTML syntax.\nvar XLINK = 'http://www.w3.org/1999/xlink';\nvar XML = 'http://www.w3.org/XML/1998/namespace';\nvar XMLNS = 'http://www.w3.org/2000/xmlns/';\nvar WHITELIST = {\n    'xlink:actuate': XLINK,\n    'xlink:arcrole': XLINK,\n    'xlink:href': XLINK,\n    'xlink:role': XLINK,\n    'xlink:show': XLINK,\n    'xlink:title': XLINK,\n    'xlink:type': XLINK,\n    'xml:base': XML,\n    'xml:lang': XML,\n    'xml:space': XML,\n    'xmlns': XMLNS,\n    'xmlns:xlink': XMLNS\n};\nexport function getAttrNamespace(attrName) {\n    return WHITELIST[attrName] || null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZXNwYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5hbWVzcGFjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBZ0U7QUFDaEUsQUFBZ0I7QUFDaEIsQUFBc0Q7QUFDdEQsQUFBRTtBQUNGLEFBQXlFO0FBQ3pFLEFBQXdFO0FBQ3hFLEFBQXlFO0FBQ3pFLEFBQXNDO0FBQ3RDLEFBQUU7QUFDRixBQUFvRTtBQUNwRSxBQUEyQjtBQUMzQixBQUFFO0FBQ0YsQUFBdUU7QUFFdkUsSUFBTSxBQUFLLFFBQUcsQUFBOEIsQUFBQztBQUM3QyxJQUFNLEFBQUcsTUFBRyxBQUFzQyxBQUFDO0FBQ25ELElBQU0sQUFBSyxRQUFHLEFBQStCLEFBQUM7QUFFOUMsSUFBTSxBQUFTO0FBQ2IsQUFBZSxxQkFBRSxBQUFLO0FBQ3RCLEFBQWUscUJBQUUsQUFBSztBQUN0QixBQUFZLGtCQUFFLEFBQUs7QUFDbkIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVksa0JBQUUsQUFBSztBQUNuQixBQUFhLG1CQUFFLEFBQUs7QUFDcEIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVcsaUJBQUUsQUFBRztBQUNoQixBQUFPLGFBQUUsQUFBSztBQUNkLEFBQWEsbUJBQUUsQUFBSyxBQUNyQixBQUFDO0FBYmdCO0FBZWxCLEFBQU0saUNBQTJCLEFBQWdCO0FBQy9DLEFBQU0sV0FBQyxBQUFTLFVBQUMsQUFBUSxBQUFDLGFBQUksQUFBSSxBQUFDLEFBQ3JDO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGVyZSBpcyBhIHNtYWxsIHdoaXRlbGlzdCBvZiBuYW1lc3BhY2VkIGF0dHJpYnV0ZXMgc3BlY2lhbGx5XG4vLyBlbnVtZXJhdGVkIGluXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbC9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTBcbi8vXG4vLyA+IFdoZW4gYSBmb3JlaWduIGVsZW1lbnQgaGFzIG9uZSBvZiB0aGUgbmFtZXNwYWNlZCBhdHRyaWJ1dGVzIGdpdmVuIGJ5XG4vLyA+IHRoZSBsb2NhbCBuYW1lIGFuZCBuYW1lc3BhY2Ugb2YgdGhlIGZpcnN0IGFuZCBzZWNvbmQgY2VsbHMgb2YgYSByb3dcbi8vID4gZnJvbSB0aGUgZm9sbG93aW5nIHRhYmxlLCBpdCBtdXN0IGJlIHdyaXR0ZW4gdXNpbmcgdGhlIG5hbWUgZ2l2ZW4gYnlcbi8vID4gdGhlIHRoaXJkIGNlbGwgZnJvbSB0aGUgc2FtZSByb3cuXG4vL1xuLy8gSW4gYWxsIG90aGVyIGNhc2VzLCBjb2xvbnMgYXJlIGludGVycHJldGVkIGFzIGEgcmVndWxhciBjaGFyYWN0ZXJcbi8vIHdpdGggbm8gc3BlY2lhbCBtZWFuaW5nOlxuLy9cbi8vID4gTm8gb3RoZXIgbmFtZXNwYWNlZCBhdHRyaWJ1dGUgY2FuIGJlIGV4cHJlc3NlZCBpbiB0aGUgSFRNTCBzeW50YXguXG5cbmNvbnN0IFhMSU5LID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuY29uc3QgWE1MID0gJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSc7XG5jb25zdCBYTUxOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLyc7XG5cbmNvbnN0IFdISVRFTElTVCA9IHtcbiAgJ3hsaW5rOmFjdHVhdGUnOiBYTElOSyxcbiAgJ3hsaW5rOmFyY3JvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOmhyZWYnOiBYTElOSyxcbiAgJ3hsaW5rOnJvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOnNob3cnOiBYTElOSyxcbiAgJ3hsaW5rOnRpdGxlJzogWExJTkssXG4gICd4bGluazp0eXBlJzogWExJTkssXG4gICd4bWw6YmFzZSc6IFhNTCxcbiAgJ3htbDpsYW5nJzogWE1MLFxuICAneG1sOnNwYWNlJzogWE1MLFxuICAneG1sbnMnOiBYTUxOUyxcbiAgJ3htbG5zOnhsaW5rJzogWE1MTlNcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdHRyTmFtZXNwYWNlKGF0dHJOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIFdISVRFTElTVFthdHRyTmFtZV0gfHwgbnVsbDtcbn0iXX0=","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { ensureGuid } from './guid';\nvar proto = Object.create(null, {\n    // without this, we will always still end up with (new\n    // EmptyObject()).constructor === Object\n    constructor: {\n        value: undefined,\n        enumerable: false,\n        writable: true\n    }\n});\nfunction EmptyObject() {}\nEmptyObject.prototype = proto;\nexport function dict() {\n    // let d = Object.create(null);\n    // d.x = 1;\n    // delete d.x;\n    // return d;\n    return new EmptyObject();\n}\nexport var DictSet = function () {\n    function DictSet() {\n        _classCallCheck(this, DictSet);\n\n        this.dict = dict();\n    }\n\n    DictSet.prototype.add = function add(obj) {\n        if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;\n        return this;\n    };\n\n    DictSet.prototype.delete = function _delete(obj) {\n        if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];\n    };\n\n    DictSet.prototype.forEach = function forEach(callback) {\n        var dict = this.dict;\n\n        Object.keys(dict).forEach(function (key) {\n            return callback(dict[key]);\n        });\n    };\n\n    DictSet.prototype.toArray = function toArray() {\n        return Object.keys(this.dict);\n    };\n\n    return DictSet;\n}();\nexport var Stack = function () {\n    function Stack() {\n        _classCallCheck(this, Stack);\n\n        this.stack = [];\n        this.current = null;\n    }\n\n    Stack.prototype.toArray = function toArray() {\n        return this.stack;\n    };\n\n    Stack.prototype.push = function push(item) {\n        this.current = item;\n        this.stack.push(item);\n    };\n\n    Stack.prototype.pop = function pop() {\n        var item = this.stack.pop();\n        var len = this.stack.length;\n        this.current = len === 0 ? null : this.stack[len - 1];\n        return item === undefined ? null : item;\n    };\n\n    Stack.prototype.isEmpty = function isEmpty() {\n        return this.stack.length === 0;\n    };\n\n    return Stack;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLEFBQU8sU0FBVyxBQUFVLEFBQUUsa0JBQU0sQUFBUSxBQUFDO0FBYTdDLElBQUksQUFBSyxlQUFVLEFBQU0sT0FBQyxBQUFJO0FBQzVCLEFBQXNEO0FBQ3RELEFBQXdDO0FBQ3hDLEFBQVc7QUFDVCxBQUFLLGVBQUUsQUFBUztBQUNoQixBQUFVLG9CQUFFLEFBQUs7QUFDakIsQUFBUSxrQkFBRSxBQUFJLEFBQ2YsQUFDRixBQUFDLEFBQUM7QUFMWTtBQUhpQixDQUFwQixBQUFNO0FBVWxCLHVCQUF3QixDQUFDO0FBQ3pCLEFBQVcsWUFBQyxBQUFTLFlBQUcsQUFBSyxBQUFDO0FBRTlCLEFBQU07QUFDSixBQUErQjtBQUMvQixBQUFXO0FBQ1gsQUFBYztBQUNkLEFBQVk7QUFDWixBQUFNLFdBQUMsSUFBSyxBQUFtQixBQUFFLEFBQUMsQUFDcEM7QUFBQztBQUlELEFBQU07QUFHSjs7O0FBQ0UsQUFBSSxhQUFDLEFBQUksT0FBRyxBQUFJLEFBQUssQUFBQyxBQUN4QjtBQUFDOztzQkFFRCxBQUFHLG1CQUFDLEFBQU07QUFDUixBQUFFLEFBQUMsWUFBQyxPQUFPLEFBQUcsUUFBSyxBQUFRLEFBQUMsVUFBQyxBQUFJLEtBQUMsQUFBSSxLQUFNLEFBQUcsQUFBQyxPQUFHLEFBQUcsQUFBQyxBQUN2RCxBQUFJLFNBQUMsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFVLFdBQU0sQUFBRyxBQUFDLEFBQUMsUUFBRyxBQUFHLEFBQUM7QUFDM0MsQUFBTSxlQUFDLEFBQUksQUFBQyxBQUNkO0FBQUM7O3NCQUVELEFBQU0sMEJBQUMsQUFBTTtBQUNYLEFBQUUsQUFBQyxZQUFDLE9BQU8sQUFBRyxRQUFLLEFBQVEsQUFBQyxVQUFDLE9BQU8sQUFBSSxLQUFDLEFBQUksS0FBTSxBQUFHLEFBQUMsQUFBQyxBQUN4RCxBQUFJLFVBQUMsQUFBRSxBQUFDLElBQUUsQUFBVyxJQUFDLEFBQUssQUFBQyxPQUFDLE9BQU8sQUFBSSxLQUFDLEFBQUksS0FBRSxBQUFXLElBQUMsQUFBSyxBQUFDLEFBQUMsQUFDcEU7QUFBQzs7c0JBRUQsQUFBTywyQkFBQyxBQUEyQjtBQUNqQyxBQUFJLFlBQUUsQUFBSSxBQUFFLE9BQUcsQUFBSSxBQUFDOztBQUNwQixBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxNQUFDLEFBQU87QUFBQyxBQUFHLG1CQUFJLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBRyxBQUFDLEFBQUMsQUFBQyxBQUFDLEFBQ3hEOztBQUFDOztzQkFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ2hDO0FBQUMsQUFDRjs7OztBQUVELEFBQU07QUFBTjs7O0FBQ1UsYUFBSyxRQUFRLEFBQUUsQUFBQztBQUNqQixhQUFPLFVBQWMsQUFBSSxBQUFDLEFBc0JuQztBQUFDOztvQkFwQkMsQUFBTztBQUNMLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQ3BCO0FBQUM7O29CQUVELEFBQUkscUJBQUMsQUFBTztBQUNWLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBSSxBQUFDO0FBQ3BCLEFBQUksYUFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ3hCO0FBQUM7O29CQUVELEFBQUc7QUFDRCxZQUFJLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQUcsQUFBRSxBQUFDO0FBQzVCLFlBQUksQUFBRyxNQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxBQUFDO0FBQzVCLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBRyxRQUFLLEFBQUMsSUFBRyxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLE1BQUcsQUFBQyxBQUFDLEFBQUM7QUFFdEQsQUFBTSxlQUFDLEFBQUksU0FBSyxBQUFTLFlBQUcsQUFBSSxPQUFHLEFBQUksQUFBQyxBQUMxQztBQUFDOztvQkFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxXQUFLLEFBQUMsQUFBQyxBQUNqQztBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNHdWlkLCBlbnN1cmVHdWlkIH0gZnJvbSAnLi9ndWlkJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpY3Q8VD4ge1xuICBbaW5kZXg6IHN0cmluZ106IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0PFQ+IHtcbiAgYWRkKHZhbHVlOiBUKTogU2V0PFQ+O1xuICBkZWxldGUodmFsdWU6IFQpOiB2b2lkO1xuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmxldCBwcm90byA9IE9iamVjdC5jcmVhdGUobnVsbCwge1xuICAvLyB3aXRob3V0IHRoaXMsIHdlIHdpbGwgYWx3YXlzIHN0aWxsIGVuZCB1cCB3aXRoIChuZXdcbiAgLy8gRW1wdHlPYmplY3QoKSkuY29uc3RydWN0b3IgPT09IE9iamVjdFxuICBjb25zdHJ1Y3Rvcjoge1xuICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIEVtcHR5T2JqZWN0KCkge31cbkVtcHR5T2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuXG5leHBvcnQgZnVuY3Rpb24gZGljdDxUPigpOiBEaWN0PFQ+IHtcbiAgLy8gbGV0IGQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBkLnggPSAxO1xuICAvLyBkZWxldGUgZC54O1xuICAvLyByZXR1cm4gZDtcbiAgcmV0dXJuIG5ldyAoRW1wdHlPYmplY3QgYXMgYW55KSgpO1xufVxuXG5leHBvcnQgdHlwZSBTZXRNZW1iZXIgPSBIYXNHdWlkIHwgc3RyaW5nO1xuXG5leHBvcnQgY2xhc3MgRGljdFNldDxUIGV4dGVuZHMgU2V0TWVtYmVyPiBpbXBsZW1lbnRzIFNldDxUPiB7XG4gIHByaXZhdGUgZGljdDogRGljdDxUPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRpY3QgPSBkaWN0PFQ+KCk7XG4gIH1cblxuICBhZGQob2JqOiBUKTogU2V0PFQ+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHRoaXMuZGljdFs8YW55Pm9ial0gPSBvYmo7XG4gICAgZWxzZSB0aGlzLmRpY3RbZW5zdXJlR3VpZCg8YW55Pm9iaildID0gb2JqO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKG9iajogVCkge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgZGVsZXRlIHRoaXMuZGljdFs8YW55Pm9ial07XG4gICAgZWxzZSBpZiAoKG9iaiBhcyBhbnkpLl9ndWlkKSBkZWxldGUgdGhpcy5kaWN0WyhvYmogYXMgYW55KS5fZ3VpZF07XG4gIH1cblxuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCkge1xuICAgIGxldCB7IGRpY3QgfSA9IHRoaXM7XG4gICAgT2JqZWN0LmtleXMoZGljdCkuZm9yRWFjaChrZXkgPT4gY2FsbGJhY2soZGljdFtrZXldKSk7XG4gIH1cblxuICB0b0FycmF5KCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5kaWN0KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhY2s8VD4ge1xuICBwcml2YXRlIHN0YWNrOiBUW10gPSBbXTtcbiAgcHVibGljIGN1cnJlbnQ6IE9wdGlvbjxUPiA9IG51bGw7XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIHJldHVybiB0aGlzLnN0YWNrO1xuICB9XG5cbiAgcHVzaChpdGVtOiBUKSB7XG4gICAgdGhpcy5jdXJyZW50ID0gaXRlbTtcbiAgICB0aGlzLnN0YWNrLnB1c2goaXRlbSk7XG4gIH1cblxuICBwb3AoKTogT3B0aW9uPFQ+IHtcbiAgICBsZXQgaXRlbSA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgbGV0IGxlbiA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIHRoaXMuY3VycmVudCA9IGxlbiA9PT0gMCA/IG51bGwgOiB0aGlzLnN0YWNrW2xlbiAtIDFdO1xuXG4gICAgcmV0dXJuIGl0ZW0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBpdGVtO1xuICB9XG5cbiAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGggPT09IDA7XG4gIH1cbn1cbiJdfQ==","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nexport var ListNode = function ListNode(value) {\n    _classCallCheck(this, ListNode);\n\n    this.next = null;\n    this.prev = null;\n    this.value = value;\n};\nexport var LinkedList = function () {\n    function LinkedList() {\n        _classCallCheck(this, LinkedList);\n\n        this.clear();\n    }\n\n    LinkedList.fromSlice = function fromSlice(slice) {\n        var list = new LinkedList();\n        slice.forEachNode(function (n) {\n            return list.append(n.clone());\n        });\n        return list;\n    };\n\n    LinkedList.prototype.head = function head() {\n        return this._head;\n    };\n\n    LinkedList.prototype.tail = function tail() {\n        return this._tail;\n    };\n\n    LinkedList.prototype.clear = function clear() {\n        this._head = this._tail = null;\n    };\n\n    LinkedList.prototype.isEmpty = function isEmpty() {\n        return this._head === null;\n    };\n\n    LinkedList.prototype.toArray = function toArray() {\n        var out = [];\n        this.forEachNode(function (n) {\n            return out.push(n);\n        });\n        return out;\n    };\n\n    LinkedList.prototype.splice = function splice(start, end, reference) {\n        var before = void 0;\n        if (reference === null) {\n            before = this._tail;\n            this._tail = end;\n        } else {\n            before = reference.prev;\n            end.next = reference;\n            reference.prev = end;\n        }\n        if (before) {\n            before.next = start;\n            start.prev = before;\n        }\n    };\n\n    LinkedList.prototype.nextNode = function nextNode(node) {\n        return node.next;\n    };\n\n    LinkedList.prototype.prevNode = function prevNode(node) {\n        return node.prev;\n    };\n\n    LinkedList.prototype.forEachNode = function forEachNode(callback) {\n        var node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = node.next;\n        }\n    };\n\n    LinkedList.prototype.contains = function contains(needle) {\n        var node = this._head;\n        while (node !== null) {\n            if (node === needle) return true;\n            node = node.next;\n        }\n        return false;\n    };\n\n    LinkedList.prototype.insertBefore = function insertBefore(node) {\n        var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        if (reference === null) return this.append(node);\n        if (reference.prev) reference.prev.next = node;else this._head = node;\n        node.prev = reference.prev;\n        node.next = reference;\n        reference.prev = node;\n        return node;\n    };\n\n    LinkedList.prototype.append = function append(node) {\n        var tail = this._tail;\n        if (tail) {\n            tail.next = node;\n            node.prev = tail;\n            node.next = null;\n        } else {\n            this._head = node;\n        }\n        return this._tail = node;\n    };\n\n    LinkedList.prototype.pop = function pop() {\n        if (this._tail) return this.remove(this._tail);\n        return null;\n    };\n\n    LinkedList.prototype.prepend = function prepend(node) {\n        if (this._head) return this.insertBefore(node, this._head);\n        return this._head = this._tail = node;\n    };\n\n    LinkedList.prototype.remove = function remove(node) {\n        if (node.prev) node.prev.next = node.next;else this._head = node.next;\n        if (node.next) node.next.prev = node.prev;else this._tail = node.prev;\n        return node;\n    };\n\n    return LinkedList;\n}();\nexport var ListSlice = function () {\n    function ListSlice(head, tail) {\n        _classCallCheck(this, ListSlice);\n\n        this._head = head;\n        this._tail = tail;\n    }\n\n    ListSlice.toList = function toList(slice) {\n        var list = new LinkedList();\n        slice.forEachNode(function (n) {\n            return list.append(n.clone());\n        });\n        return list;\n    };\n\n    ListSlice.prototype.forEachNode = function forEachNode(callback) {\n        var node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = this.nextNode(node);\n        }\n    };\n\n    ListSlice.prototype.contains = function contains(needle) {\n        var node = this._head;\n        while (node !== null) {\n            if (node === needle) return true;\n            node = node.next;\n        }\n        return false;\n    };\n\n    ListSlice.prototype.head = function head() {\n        return this._head;\n    };\n\n    ListSlice.prototype.tail = function tail() {\n        return this._tail;\n    };\n\n    ListSlice.prototype.toArray = function toArray() {\n        var out = [];\n        this.forEachNode(function (n) {\n            return out.push(n);\n        });\n        return out;\n    };\n\n    ListSlice.prototype.nextNode = function nextNode(node) {\n        if (node === this._tail) return null;\n        return node.next;\n    };\n\n    ListSlice.prototype.prevNode = function prevNode(node) {\n        if (node === this._head) return null;\n        return node.prev;\n    };\n\n    ListSlice.prototype.isEmpty = function isEmpty() {\n        return false;\n    };\n\n    return ListSlice;\n}();\nexport var EMPTY_SLICE = new ListSlice(null, null);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export var HAS_NATIVE_WEAKMAP = function () {\n    // detect if `WeakMap` is even present\n    var hasWeakMap = typeof WeakMap === 'function';\n    if (!hasWeakMap) {\n        return false;\n    }\n    var instance = new WeakMap();\n    // use `Object`'s `.toString` directly to prevent us from detecting\n    // polyfills as native weakmaps\n    return Object.prototype.toString.call(instance) === '[object WeakMap]';\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha21hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYWttYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBTSxXQUFPLEFBQWtCLHFCQUFJO0FBQ2pDLEFBQXNDO0FBQ3RDLFFBQUksQUFBVSxhQUFHLE9BQU8sQUFBTyxZQUFLLEFBQVUsQUFBQztBQUMvQyxBQUFFLEFBQUMsUUFBQyxDQUFDLEFBQVUsQUFBQyxZQUFDLEFBQUM7QUFBQyxBQUFNLGVBQUMsQUFBSyxBQUFDLEFBQUM7QUFBQztBQUVsQyxRQUFJLEFBQVEsV0FBRyxJQUFJLEFBQU8sQUFBRSxBQUFDO0FBQzdCLEFBQW1FO0FBQ25FLEFBQStCO0FBQy9CLEFBQU0sV0FBQyxBQUFNLE9BQUMsQUFBUyxVQUFDLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBUSxBQUFDLGNBQUssQUFBa0IsQUFBQyxBQUN6RTtBQUFDLEFBQUMsQUFBRSxBQUFDLENBVDZCLEVBQTNCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEhBU19OQVRJVkVfV0VBS01BUCA9IChmdW5jdGlvbigpIHtcbiAgLy8gZGV0ZWN0IGlmIGBXZWFrTWFwYCBpcyBldmVuIHByZXNlbnRcbiAgbGV0IGhhc1dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJztcbiAgaWYgKCFoYXNXZWFrTWFwKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGxldCBpbnN0YW5jZSA9IG5ldyBXZWFrTWFwKCk7XG4gIC8vIHVzZSBgT2JqZWN0YCdzIGAudG9TdHJpbmdgIGRpcmVjdGx5IHRvIHByZXZlbnQgdXMgZnJvbSBkZXRlY3RpbmdcbiAgLy8gcG9seWZpbGxzIGFzIG5hdGl2ZSB3ZWFrbWFwc1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGluc3RhbmNlKSA9PT0gJ1tvYmplY3QgV2Vha01hcF0nO1xufSkoKTtcbiJdfQ==","import { HAS_NATIVE_WEAKMAP } from './weakmap';\nvar HAS_TYPED_ARRAYS = typeof Uint32Array !== 'undefined';\nvar A = void 0;\nif (HAS_TYPED_ARRAYS) {\n    A = Uint32Array;\n} else {\n    A = Array;\n}\nexport default A;\nexport var EMPTY_ARRAY = HAS_NATIVE_WEAKMAP ? Object.freeze([]) : [];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcnJheS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUFPLFNBQUUsQUFBa0IsQUFBRSwwQkFBTSxBQUFXLEFBQUM7QUFFL0MsSUFBTSxBQUFnQixtQkFBRyxPQUFPLEFBQVcsZ0JBQUssQUFBVyxBQUFDO0FBRTVELElBQUksQUFBQyxBQUFDO0FBRU4sQUFBRSxBQUFDLElBQUMsQUFBZ0IsQUFBQyxrQkFBQyxBQUFDO0FBQ3JCLEFBQUMsUUFBRyxBQUFXLEFBQUMsQUFDbEI7QUFBQyxBQUFDLEFBQUksT0FBQyxBQUFDO0FBQ04sQUFBQyxRQUFHLEFBQUssQUFBQyxBQUNaO0FBQUM7QUFFRCxlQUFlLEFBQUMsQUFBQztBQUVqQixBQUFNLE9BQUMsSUFBTSxBQUFXLEFBQVUsY0FBQyxBQUFrQixxQkFBRyxBQUFNLE9BQUMsQUFBTSxPQUFDLEFBQUUsQUFBQyxNQUFHLEFBQUUsQUFBUSxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSEFTX05BVElWRV9XRUFLTUFQIH0gZnJvbSAnLi93ZWFrbWFwJztcblxuY29uc3QgSEFTX1RZUEVEX0FSUkFZUyA9IHR5cGVvZiBVaW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCc7XG5cbmxldCBBO1xuXG5pZiAoSEFTX1RZUEVEX0FSUkFZUykge1xuICBBID0gVWludDMyQXJyYXk7XG59IGVsc2Uge1xuICBBID0gQXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEE7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWTogYW55W10gPSAoSEFTX05BVElWRV9XRUFLTUFQID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXSkgYXMgYW55OyJdfQ==","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nimport { LinkedList, ListNode, dict } from '@glimmer/util';\nexport var ListItem = function (_ListNode) {\n    _inherits(ListItem, _ListNode);\n\n    function ListItem(iterable, result) {\n        _classCallCheck(this, ListItem);\n\n        var _this = _possibleConstructorReturn(this, _ListNode.call(this, iterable.valueReferenceFor(result)));\n\n        _this.retained = false;\n        _this.seen = false;\n        _this.key = result.key;\n        _this.iterable = iterable;\n        _this.memo = iterable.memoReferenceFor(result);\n        return _this;\n    }\n\n    ListItem.prototype.update = function update(item) {\n        this.retained = true;\n        this.iterable.updateValueReference(this.value, item);\n        this.iterable.updateMemoReference(this.memo, item);\n    };\n\n    ListItem.prototype.shouldRemove = function shouldRemove() {\n        return !this.retained;\n    };\n\n    ListItem.prototype.reset = function reset() {\n        this.retained = false;\n        this.seen = false;\n    };\n\n    return ListItem;\n}(ListNode);\nexport var IterationArtifacts = function () {\n    function IterationArtifacts(iterable) {\n        _classCallCheck(this, IterationArtifacts);\n\n        this.map = dict();\n        this.list = new LinkedList();\n        this.tag = iterable.tag;\n        this.iterable = iterable;\n    }\n\n    IterationArtifacts.prototype.isEmpty = function isEmpty() {\n        var iterator = this.iterator = this.iterable.iterate();\n        return iterator.isEmpty();\n    };\n\n    IterationArtifacts.prototype.iterate = function iterate() {\n        var iterator = this.iterator || this.iterable.iterate();\n        this.iterator = null;\n        return iterator;\n    };\n\n    IterationArtifacts.prototype.has = function has(key) {\n        return !!this.map[key];\n    };\n\n    IterationArtifacts.prototype.get = function get(key) {\n        return this.map[key];\n    };\n\n    IterationArtifacts.prototype.wasSeen = function wasSeen(key) {\n        var node = this.map[key];\n        return node && node.seen;\n    };\n\n    IterationArtifacts.prototype.append = function append(item) {\n        var map = this.map,\n            list = this.list,\n            iterable = this.iterable;\n\n        var node = map[item.key] = new ListItem(iterable, item);\n        list.append(node);\n        return node;\n    };\n\n    IterationArtifacts.prototype.insertBefore = function insertBefore(item, reference) {\n        var map = this.map,\n            list = this.list,\n            iterable = this.iterable;\n\n        var node = map[item.key] = new ListItem(iterable, item);\n        node.retained = true;\n        list.insertBefore(node, reference);\n        return node;\n    };\n\n    IterationArtifacts.prototype.move = function move(item, reference) {\n        var list = this.list;\n\n        item.retained = true;\n        list.remove(item);\n        list.insertBefore(item, reference);\n    };\n\n    IterationArtifacts.prototype.remove = function remove(item) {\n        var list = this.list;\n\n        list.remove(item);\n        delete this.map[item.key];\n    };\n\n    IterationArtifacts.prototype.nextNode = function nextNode(item) {\n        return this.list.nextNode(item);\n    };\n\n    IterationArtifacts.prototype.head = function head() {\n        return this.list.head();\n    };\n\n    return IterationArtifacts;\n}();\nexport var ReferenceIterator = function () {\n    // if anyone needs to construct this object with something other than\n    // an iterable, let @wycats know.\n    function ReferenceIterator(iterable) {\n        _classCallCheck(this, ReferenceIterator);\n\n        this.iterator = null;\n        var artifacts = new IterationArtifacts(iterable);\n        this.artifacts = artifacts;\n    }\n\n    ReferenceIterator.prototype.next = function next() {\n        var artifacts = this.artifacts;\n\n        var iterator = this.iterator = this.iterator || artifacts.iterate();\n        var item = iterator.next();\n        if (!item) return null;\n        return artifacts.append(item);\n    };\n\n    return ReferenceIterator;\n}();\nvar Phase;\n(function (Phase) {\n    Phase[Phase[\"Append\"] = 0] = \"Append\";\n    Phase[Phase[\"Prune\"] = 1] = \"Prune\";\n    Phase[Phase[\"Done\"] = 2] = \"Done\";\n})(Phase || (Phase = {}));\nexport var IteratorSynchronizer = function () {\n    function IteratorSynchronizer(_ref) {\n        var target = _ref.target,\n            artifacts = _ref.artifacts;\n\n        _classCallCheck(this, IteratorSynchronizer);\n\n        this.target = target;\n        this.artifacts = artifacts;\n        this.iterator = artifacts.iterate();\n        this.current = artifacts.head();\n    }\n\n    IteratorSynchronizer.prototype.sync = function sync() {\n        var phase = Phase.Append;\n        while (true) {\n            switch (phase) {\n                case Phase.Append:\n                    phase = this.nextAppend();\n                    break;\n                case Phase.Prune:\n                    phase = this.nextPrune();\n                    break;\n                case Phase.Done:\n                    this.nextDone();\n                    return;\n            }\n        }\n    };\n\n    IteratorSynchronizer.prototype.advanceToKey = function advanceToKey(key) {\n        var current = this.current,\n            artifacts = this.artifacts;\n\n        var seek = current;\n        while (seek && seek.key !== key) {\n            seek.seen = true;\n            seek = artifacts.nextNode(seek);\n        }\n        this.current = seek && artifacts.nextNode(seek);\n    };\n\n    IteratorSynchronizer.prototype.nextAppend = function nextAppend() {\n        var iterator = this.iterator,\n            current = this.current,\n            artifacts = this.artifacts;\n\n        var item = iterator.next();\n        if (item === null) {\n            return this.startPrune();\n        }\n        var key = item.key;\n\n        if (current && current.key === key) {\n            this.nextRetain(item);\n        } else if (artifacts.has(key)) {\n            this.nextMove(item);\n        } else {\n            this.nextInsert(item);\n        }\n        return Phase.Append;\n    };\n\n    IteratorSynchronizer.prototype.nextRetain = function nextRetain(item) {\n        var artifacts = this.artifacts,\n            current = this.current;\n\n        current.update(item);\n        this.current = artifacts.nextNode(current);\n        this.target.retain(item.key, current.value, current.memo);\n    };\n\n    IteratorSynchronizer.prototype.nextMove = function nextMove(item) {\n        var current = this.current,\n            artifacts = this.artifacts,\n            target = this.target;\n        var key = item.key;\n\n        var found = artifacts.get(item.key);\n        found.update(item);\n        if (artifacts.wasSeen(item.key)) {\n            artifacts.move(found, current);\n            target.move(found.key, found.value, found.memo, current ? current.key : null);\n        } else {\n            this.advanceToKey(key);\n        }\n    };\n\n    IteratorSynchronizer.prototype.nextInsert = function nextInsert(item) {\n        var artifacts = this.artifacts,\n            target = this.target,\n            current = this.current;\n\n        var node = artifacts.insertBefore(item, current);\n        target.insert(node.key, node.value, node.memo, current ? current.key : null);\n    };\n\n    IteratorSynchronizer.prototype.startPrune = function startPrune() {\n        this.current = this.artifacts.head();\n        return Phase.Prune;\n    };\n\n    IteratorSynchronizer.prototype.nextPrune = function nextPrune() {\n        var artifacts = this.artifacts,\n            target = this.target,\n            current = this.current;\n\n        if (current === null) {\n            return Phase.Done;\n        }\n        var node = current;\n        this.current = artifacts.nextNode(node);\n        if (node.shouldRemove()) {\n            artifacts.remove(node);\n            target.delete(node.key);\n        } else {\n            node.reset();\n        }\n        return Phase.Prune;\n    };\n\n    IteratorSynchronizer.prototype.nextDone = function nextDone() {\n        this.target.done();\n    };\n\n    return IteratorSynchronizer;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nimport { CachedReference, combineTagged } from '@glimmer/reference';\nexport var ConcatReference = function (_CachedReference) {\n    _inherits(ConcatReference, _CachedReference);\n\n    function ConcatReference(parts) {\n        _classCallCheck(this, ConcatReference);\n\n        var _this = _possibleConstructorReturn(this, _CachedReference.call(this));\n\n        _this.parts = parts;\n        _this.tag = combineTagged(parts);\n        return _this;\n    }\n\n    ConcatReference.prototype.compute = function compute() {\n        var parts = new Array();\n        for (var i = 0; i < this.parts.length; i++) {\n            var value = this.parts[i].value();\n            if (value !== null && value !== undefined) {\n                parts[i] = castToString(value);\n            }\n        }\n        if (parts.length > 0) {\n            return parts.join('');\n        }\n        return null;\n    };\n\n    return ConcatReference;\n}(CachedReference);\nfunction castToString(value) {\n    if (typeof value['toString'] !== 'function') {\n        return '';\n    }\n    return String(value);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uY2F0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uY2F0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ0EsQUFBTyxTQUFpQixBQUFlLGlCQUFPLEFBQWEsQUFBRSxxQkFBTSxBQUFvQixBQUFDO0FBR3hGLEFBQU0sV0FBdUI7OztBQUczQiw2QkFBb0IsQUFBOEI7OztxREFDaEQsQUFBSyxBQUFFLEFBQUM7O0FBRFUsY0FBSyxRQUFMLEFBQUssQUFBeUI7QUFFaEQsQUFBSSxjQUFDLEFBQUcsTUFBRyxBQUFhLGNBQUMsQUFBSyxBQUFDLEFBQUMsQUFDbEM7O0FBQUM7OzhCQUVTLEFBQU87QUFDZixZQUFJLEFBQUssUUFBRyxJQUFJLEFBQUssQUFBVSxBQUFDO0FBRWhDLEFBQUcsQUFBQyxhQUFDLElBQUksQUFBQyxJQUFHLEFBQUMsR0FBRSxBQUFDLElBQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFNLFFBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQztBQUMzQyxnQkFBSSxBQUFLLFFBQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFDLEFBQUMsR0FBQyxBQUFLLEFBQUUsQUFBQztBQUVsQyxBQUFFLEFBQUMsZ0JBQUMsQUFBSyxVQUFLLEFBQUksUUFBSSxBQUFLLFVBQUssQUFBUyxBQUFDLFdBQUMsQUFBQztBQUMxQyxBQUFLLHNCQUFDLEFBQUMsQUFBQyxLQUFHLEFBQVksYUFBQyxBQUF5RCxBQUFvRCxBQUFDLEFBQ3hJO0FBQUMsQUFDSDtBQUFDO0FBRUQsQUFBRSxBQUFDLFlBQUMsQUFBSyxNQUFDLEFBQU0sU0FBRyxBQUFDLEFBQUMsR0FBQyxBQUFDO0FBQ3JCLEFBQU0sbUJBQUMsQUFBSyxNQUFDLEFBQUksS0FBQyxBQUFFLEFBQUMsQUFBQyxBQUN4QjtBQUFDO0FBRUQsQUFBTSxlQUFDLEFBQUksQUFBQyxBQUNkO0FBQUMsQUFDRjs7O0VBekJvQyxBQUErQjtBQTJCcEUsc0JBQXNCLEFBQWE7QUFDakMsQUFBRSxBQUFDLFFBQUMsT0FBTyxBQUFLLE1BQUMsQUFBVSxBQUFDLGdCQUFLLEFBQVUsQUFBQyxZQUFDLEFBQUM7QUFDNUMsQUFBTSxlQUFDLEFBQUUsQUFBQyxBQUNaO0FBQUM7QUFFRCxBQUFNLFdBQUMsQUFBTSxPQUFDLEFBQUssQUFBQyxBQUFDLEFBQ3ZCO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGSVhNRSB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgUGF0aFJlZmVyZW5jZSwgQ2FjaGVkUmVmZXJlbmNlLCBUYWcsIGNvbWJpbmVUYWdnZWQgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgT3B0aW9uLCBPcGFxdWUgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIENvbmNhdFJlZmVyZW5jZSBleHRlbmRzIENhY2hlZFJlZmVyZW5jZTxPcHRpb248c3RyaW5nPj4ge1xuICBwdWJsaWMgdGFnOiBUYWc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwYXJ0czogUGF0aFJlZmVyZW5jZTxPcGFxdWU+W10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudGFnID0gY29tYmluZVRhZ2dlZChwYXJ0cyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY29tcHV0ZSgpOiBPcHRpb248c3RyaW5nPiB7XG4gICAgbGV0IHBhcnRzID0gbmV3IEFycmF5PHN0cmluZz4oKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHZhbHVlID0gdGhpcy5wYXJ0c1tpXS52YWx1ZSgpO1xuXG4gICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYXJ0c1tpXSA9IGNhc3RUb1N0cmluZyh2YWx1ZSBhcyBGSVhNRTxhbnksICdUaGlzIHdvcmtzIHdpdGggc3RyaWN0IG51bGwgY2hlY2tzJz4pIGFzIEZJWE1FPHN0cmluZywgJ0NvZXJjZSBmYWxzeSB2YWx1ZXMgdG8gc3RyaW5ncyc+O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gcGFydHMuam9pbignJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FzdFRvU3RyaW5nKHZhbHVlOiBPYmplY3QpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZVsndG9TdHJpbmcnXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuIl19","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nimport { ConstReference } from '@glimmer/reference';\nexport var PrimitiveReference = function (_ConstReference) {\n    _inherits(PrimitiveReference, _ConstReference);\n\n    function PrimitiveReference(value) {\n        _classCallCheck(this, PrimitiveReference);\n\n        return _possibleConstructorReturn(this, _ConstReference.call(this, value));\n    }\n\n    PrimitiveReference.create = function create(value) {\n        if (value === undefined) {\n            return UNDEFINED_REFERENCE;\n        } else if (value === null) {\n            return NULL_REFERENCE;\n        } else if (value === true) {\n            return TRUE_REFERENCE;\n        } else if (value === false) {\n            return FALSE_REFERENCE;\n        } else if (typeof value === 'number') {\n            return new ValueReference(value);\n        } else {\n            return new StringReference(value);\n        }\n    };\n\n    PrimitiveReference.prototype.get = function get(_key) {\n        return UNDEFINED_REFERENCE;\n    };\n\n    return PrimitiveReference;\n}(ConstReference);\n\nvar StringReference = function (_PrimitiveReference) {\n    _inherits(StringReference, _PrimitiveReference);\n\n    function StringReference() {\n        _classCallCheck(this, StringReference);\n\n        var _this2 = _possibleConstructorReturn(this, _PrimitiveReference.apply(this, arguments));\n\n        _this2.lengthReference = null;\n        return _this2;\n    }\n\n    StringReference.prototype.get = function get(key) {\n        if (key === 'length') {\n            var lengthReference = this.lengthReference;\n\n            if (lengthReference === null) {\n                lengthReference = this.lengthReference = new ValueReference(this.inner.length);\n            }\n            return lengthReference;\n        } else {\n            return _PrimitiveReference.prototype.get.call(this, key);\n        }\n    };\n\n    return StringReference;\n}(PrimitiveReference);\n\nvar ValueReference = function (_PrimitiveReference2) {\n    _inherits(ValueReference, _PrimitiveReference2);\n\n    function ValueReference(value) {\n        _classCallCheck(this, ValueReference);\n\n        return _possibleConstructorReturn(this, _PrimitiveReference2.call(this, value));\n    }\n\n    return ValueReference;\n}(PrimitiveReference);\n\nexport var UNDEFINED_REFERENCE = new ValueReference(undefined);\nexport var NULL_REFERENCE = new ValueReference(null);\nexport var TRUE_REFERENCE = new ValueReference(true);\nexport var FALSE_REFERENCE = new ValueReference(false);\nexport var ConditionalReference = function () {\n    function ConditionalReference(inner) {\n        _classCallCheck(this, ConditionalReference);\n\n        this.inner = inner;\n        this.tag = inner.tag;\n    }\n\n    ConditionalReference.prototype.value = function value() {\n        return this.toBool(this.inner.value());\n    };\n\n    ConditionalReference.prototype.toBool = function toBool(value) {\n        return !!value;\n    };\n\n    return ConditionalReference;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlZmVyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxBQUFPLFNBQU8sQUFBYyxBQUE0QixzQkFBTSxBQUFvQixBQUFDO0FBS25GLEFBQU0sV0FBK0M7OztBQWlCbkQsZ0NBQXNCLEFBQVE7OztnREFDNUIsQUFBSywyQkFBQyxBQUFLLEFBQUMsQUFBQyxBQUNmO0FBbEJBLEFBQU0sQUFrQkw7O3VCQWxCTSxBQUFNLHlCQUFzQixBQUFRO0FBQ3pDLEFBQUUsQUFBQyxZQUFDLEFBQUssVUFBSyxBQUFTLEFBQUMsV0FBQyxBQUFDO0FBQ3hCLEFBQU0sbUJBQUMsQUFBNEMsQUFBQyxBQUN0RDtBQUFDLEFBQUMsQUFBSSxtQkFBSyxBQUFLLFVBQUssQUFBSSxBQUFDLE1BQUMsQUFBQztBQUMxQixBQUFNLG1CQUFDLEFBQXVDLEFBQUMsQUFDakQ7QUFBQyxBQUFDLEFBQUksU0FGQyxBQUFFLEFBQUMsVUFFQyxBQUFLLFVBQUssQUFBSSxBQUFDLE1BQUMsQUFBQztBQUMxQixBQUFNLG1CQUFDLEFBQXVDLEFBQUMsQUFDakQ7QUFBQyxBQUFDLEFBQUksU0FGQyxBQUFFLEFBQUMsVUFFQyxBQUFLLFVBQUssQUFBSyxBQUFDLE9BQUMsQUFBQztBQUMzQixBQUFNLG1CQUFDLEFBQXdDLEFBQUMsQUFDbEQ7QUFBQyxBQUFDLEFBQUksU0FGQyxBQUFFLEFBQUMsVUFFQyxPQUFPLEFBQUssVUFBSyxBQUFRLEFBQUMsVUFBQyxBQUFDO0FBQ3JDLEFBQU0sbUJBQUMsSUFBSSxBQUFjLGVBQUMsQUFBZSxBQUEwQixBQUFDLEFBQ3RFO0FBQUMsQUFBQyxBQUFJLFNBRkMsQUFBRSxBQUFDLE1BRUgsQUFBQztBQUNOLEFBQU0sbUJBQUMsSUFBSSxBQUFlLGdCQUFDLEFBQWUsQUFBaUMsQUFBQyxBQUM5RTtBQUFDLEFBQ0g7QUFBQzs7aUNBTUQsQUFBRyxtQkFBQyxBQUFZO0FBQ2QsQUFBTSxlQUFDLEFBQW1CLEFBQUMsQUFDN0I7QUFBQyxBQUNGLEFBRUQ7OztFQTFCNkQsQUFBaUI7O0lBMEJ4RDs7O0FBQXRCOzs7OztBQUNVLGVBQWUsa0JBQXVDLEFBQUksQUFBQyxBQWVyRTs7QUFBQzs7OEJBYkMsQUFBRyxtQkFBQyxBQUFXO0FBQ2IsQUFBRSxBQUFDLFlBQUMsQUFBRyxRQUFLLEFBQVEsQUFBQztBQUFDLEFBQUMsQUFDckIsQUFBSSxnQkFBRSxBQUFlLEFBQUUsa0JBQUcsQUFBSSxBQUFDOztBQUUvQixBQUFFLEFBQUMsZ0JBQUMsQUFBZSxvQkFBSyxBQUFJLEFBQUMsTUFBQyxBQUFDO0FBQzdCLEFBQWUsa0NBQUcsQUFBSSxLQUFDLEFBQWUsa0JBQUcsSUFBSSxBQUFjLGVBQUMsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFNLEFBQUMsQUFBQyxBQUNqRjtBQUFDO0FBRUQsQUFBTSxtQkFBQyxBQUFlLEFBQUMsQUFDekI7QUFBQyxBQUFDLEFBQUksZUFBQyxBQUFDO0FBQ04sQUFBTSxtQkFBQyxBQUFLLDhCQUFDLEFBQUcsZUFBQyxBQUFHLEFBQUMsQUFBQyxBQUN4QjtBQUFDLEFBQ0g7QUFBQyxBQUNGLEFBSUQ7OztFQXBCOEIsQUFBMEI7O0lBb0JsQjs7O0FBQ3BDLDRCQUFZLEFBQVE7OztnREFDbEIsQUFBSyxnQ0FBQyxBQUFLLEFBQUMsQUFBQyxBQUNmO0FBQUMsQUFDRjs7O0VBSjZDLEFBQXFCOztBQU1uRSxBQUFNLE9BQUMsSUFBTSxBQUFtQixzQkFBa0MsSUFBSSxBQUFjLGVBQUMsQUFBUyxBQUFDLEFBQUM7QUFDaEcsQUFBTSxPQUFDLElBQU0sQUFBYyxpQkFBNkIsSUFBSSxBQUFjLGVBQUMsQUFBSSxBQUFDLEFBQUM7QUFDakYsQUFBTSxPQUFDLElBQU0sQUFBYyxpQkFBZ0MsSUFBSSxBQUFjLGVBQUMsQUFBSSxBQUFDLEFBQUM7QUFDcEYsQUFBTSxPQUFDLElBQU0sQUFBZSxrQkFBZ0MsSUFBSSxBQUFjLGVBQUMsQUFBSyxBQUFDLEFBQUM7QUFFdEYsQUFBTTtBQUdKLGtDQUFvQixBQUF3Qjs7O0FBQXhCLGFBQUssUUFBTCxBQUFLLEFBQW1CO0FBQzFDLEFBQUksYUFBQyxBQUFHLE1BQUcsQUFBSyxNQUFDLEFBQUcsQUFBQyxBQUN2QjtBQUFDOzttQ0FFRCxBQUFLO0FBQ0gsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFLLEFBQUUsQUFBQyxBQUFDLEFBQ3pDO0FBQUM7O21DQUVTLEFBQU0seUJBQUMsQUFBYTtBQUM1QixBQUFNLGVBQUMsQ0FBQyxDQUFDLEFBQUssQUFBQyxBQUNqQjtBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUYWcsIENvbnN0UmVmZXJlbmNlLCBQYXRoUmVmZXJlbmNlLCBSZWZlcmVuY2UgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgT3B0aW9uLCBPcGFxdWUgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxuZXhwb3J0IHR5cGUgUHJpbWl0aXZlID0gdW5kZWZpbmVkIHwgbnVsbCB8IGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmc7XG5cbmV4cG9ydCBjbGFzcyBQcmltaXRpdmVSZWZlcmVuY2U8VCBleHRlbmRzIFByaW1pdGl2ZT4gZXh0ZW5kcyBDb25zdFJlZmVyZW5jZTxUPiBpbXBsZW1lbnRzIFBhdGhSZWZlcmVuY2U8VD4ge1xuICBzdGF0aWMgY3JlYXRlPFQgZXh0ZW5kcyBQcmltaXRpdmU+KHZhbHVlOiBUKTogUHJpbWl0aXZlUmVmZXJlbmNlPFQ+IHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFVOREVGSU5FRF9SRUZFUkVOQ0UgYXMgUHJpbWl0aXZlUmVmZXJlbmNlPFQ+O1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBOVUxMX1JFRkVSRU5DRSBhcyBQcmltaXRpdmVSZWZlcmVuY2U8VD47XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIFRSVUVfUkVGRVJFTkNFIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIEZBTFNFX1JFRkVSRU5DRSBhcyBQcmltaXRpdmVSZWZlcmVuY2U8VD47XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gbmV3IFZhbHVlUmVmZXJlbmNlKHZhbHVlIGFzIG51bWJlcikgYXMgUHJpbWl0aXZlUmVmZXJlbmNlPFQ+O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFN0cmluZ1JlZmVyZW5jZSh2YWx1ZSBhcyBzdHJpbmcpIGFzIGFueSBhcyBQcmltaXRpdmVSZWZlcmVuY2U8VD47XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHZhbHVlOiBUKSB7XG4gICAgc3VwZXIodmFsdWUpO1xuICB9XG5cbiAgZ2V0KF9rZXk6IHN0cmluZyk6IFByaW1pdGl2ZVJlZmVyZW5jZTxQcmltaXRpdmU+IHtcbiAgICByZXR1cm4gVU5ERUZJTkVEX1JFRkVSRU5DRTtcbiAgfVxufVxuXG5jbGFzcyBTdHJpbmdSZWZlcmVuY2UgZXh0ZW5kcyBQcmltaXRpdmVSZWZlcmVuY2U8c3RyaW5nPiB7XG4gIHByaXZhdGUgbGVuZ3RoUmVmZXJlbmNlOiBPcHRpb248UHJpbWl0aXZlUmVmZXJlbmNlPG51bWJlcj4+ID0gbnVsbDtcblxuICBnZXQoa2V5OiBzdHJpbmcpOiBQcmltaXRpdmVSZWZlcmVuY2U8UHJpbWl0aXZlPiB7XG4gICAgaWYgKGtleSA9PT0gJ2xlbmd0aCcpIHtcbiAgICAgIGxldCB7IGxlbmd0aFJlZmVyZW5jZSB9ID0gdGhpcztcblxuICAgICAgaWYgKGxlbmd0aFJlZmVyZW5jZSA9PT0gbnVsbCkge1xuICAgICAgICBsZW5ndGhSZWZlcmVuY2UgPSB0aGlzLmxlbmd0aFJlZmVyZW5jZSA9IG5ldyBWYWx1ZVJlZmVyZW5jZSh0aGlzLmlubmVyLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsZW5ndGhSZWZlcmVuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdXBlci5nZXQoa2V5KTtcbiAgICB9XG4gIH1cbn1cblxudHlwZSBWYWx1ZSA9IHVuZGVmaW5lZCB8IG51bGwgfCBudW1iZXIgfCBib29sZWFuO1xuXG5jbGFzcyBWYWx1ZVJlZmVyZW5jZTxUIGV4dGVuZHMgVmFsdWU+IGV4dGVuZHMgUHJpbWl0aXZlUmVmZXJlbmNlPFQ+IHtcbiAgY29uc3RydWN0b3IodmFsdWU6IFQpIHtcbiAgICBzdXBlcih2YWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFVOREVGSU5FRF9SRUZFUkVOQ0U6IFByaW1pdGl2ZVJlZmVyZW5jZTx1bmRlZmluZWQ+ID0gbmV3IFZhbHVlUmVmZXJlbmNlKHVuZGVmaW5lZCk7XG5leHBvcnQgY29uc3QgTlVMTF9SRUZFUkVOQ0U6IFByaW1pdGl2ZVJlZmVyZW5jZTxudWxsPiA9IG5ldyBWYWx1ZVJlZmVyZW5jZShudWxsKTtcbmV4cG9ydCBjb25zdCBUUlVFX1JFRkVSRU5DRTogUHJpbWl0aXZlUmVmZXJlbmNlPGJvb2xlYW4+ID0gbmV3IFZhbHVlUmVmZXJlbmNlKHRydWUpO1xuZXhwb3J0IGNvbnN0IEZBTFNFX1JFRkVSRU5DRTogUHJpbWl0aXZlUmVmZXJlbmNlPGJvb2xlYW4+ID0gbmV3IFZhbHVlUmVmZXJlbmNlKGZhbHNlKTtcblxuZXhwb3J0IGNsYXNzIENvbmRpdGlvbmFsUmVmZXJlbmNlIGltcGxlbWVudHMgUmVmZXJlbmNlPGJvb2xlYW4+IHtcbiAgcHVibGljIHRhZzogVGFnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5uZXI6IFJlZmVyZW5jZTxPcGFxdWU+KSB7XG4gICAgdGhpcy50YWcgPSBpbm5lci50YWc7XG4gIH1cblxuICB2YWx1ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50b0Jvb2wodGhpcy5pbm5lci52YWx1ZSgpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB0b0Jvb2wodmFsdWU6IE9wYXF1ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXZhbHVlO1xuICB9XG59XG4iXX0=","import { APPEND_OPCODES } from '../../opcodes';\nimport { ConcatReference } from '../expressions/concat';\nimport { TRUE_REFERENCE, FALSE_REFERENCE } from '../../references';\nAPPEND_OPCODES.add(1 /* Helper */, function (vm, _ref) {\n    var _helper = _ref.op1;\n\n    var stack = vm.stack;\n    var helper = vm.constants.getFunction(_helper);\n    var args = stack.pop();\n    var value = helper(vm, args);\n    args.clear();\n    vm.stack.push(value);\n});\nAPPEND_OPCODES.add(2 /* Function */, function (vm, _ref2) {\n    var _function = _ref2.op1;\n\n    var func = vm.constants.getFunction(_function);\n    vm.stack.push(func(vm));\n});\nAPPEND_OPCODES.add(5 /* GetVariable */, function (vm, _ref3) {\n    var symbol = _ref3.op1;\n\n    var expr = vm.referenceForSymbol(symbol);\n    vm.stack.push(expr);\n});\nAPPEND_OPCODES.add(4 /* SetVariable */, function (vm, _ref4) {\n    var symbol = _ref4.op1;\n\n    var expr = vm.stack.pop();\n    vm.scope().bindSymbol(symbol, expr);\n});\nAPPEND_OPCODES.add(70 /* ResolveMaybeLocal */, function (vm, _ref5) {\n    var _name = _ref5.op1;\n\n    var name = vm.constants.getString(_name);\n    var locals = vm.scope().getPartialMap();\n    var ref = locals[name];\n    if (ref === undefined) {\n        ref = vm.getSelf().get(name);\n    }\n    vm.stack.push(ref);\n});\nAPPEND_OPCODES.add(19 /* RootScope */, function (vm, _ref6) {\n    var symbols = _ref6.op1,\n        bindCallerScope = _ref6.op2;\n\n    vm.pushRootScope(symbols, !!bindCallerScope);\n});\nAPPEND_OPCODES.add(6 /* GetProperty */, function (vm, _ref7) {\n    var _key = _ref7.op1;\n\n    var key = vm.constants.getString(_key);\n    var expr = vm.stack.pop();\n    vm.stack.push(expr.get(key));\n});\nAPPEND_OPCODES.add(7 /* PushBlock */, function (vm, _ref8) {\n    var _block = _ref8.op1;\n\n    var block = _block ? vm.constants.getBlock(_block) : null;\n    vm.stack.push(block);\n});\nAPPEND_OPCODES.add(8 /* GetBlock */, function (vm, _ref9) {\n    var _block = _ref9.op1;\n\n    vm.stack.push(vm.scope().getBlock(_block));\n});\nAPPEND_OPCODES.add(9 /* HasBlock */, function (vm, _ref10) {\n    var _block = _ref10.op1;\n\n    var hasBlock = !!vm.scope().getBlock(_block);\n    vm.stack.push(hasBlock ? TRUE_REFERENCE : FALSE_REFERENCE);\n});\nAPPEND_OPCODES.add(10 /* HasBlockParams */, function (vm, _ref11) {\n    var _block = _ref11.op1;\n\n    var block = vm.scope().getBlock(_block);\n    var hasBlockParams = block && block.symbolTable.parameters.length;\n    vm.stack.push(hasBlockParams ? TRUE_REFERENCE : FALSE_REFERENCE);\n});\nAPPEND_OPCODES.add(11 /* Concat */, function (vm, _ref12) {\n    var count = _ref12.op1;\n\n    var out = [];\n    for (var i = count; i > 0; i--) {\n        out.push(vm.stack.pop());\n    }\n    vm.stack.push(new ConcatReference(out.reverse()));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nimport { UpdatingOpcode } from '../../opcodes';\nimport { ConstReference } from '@glimmer/reference';\nimport { initializeGuid } from '@glimmer/util';\nimport { CONSTANT_TAG, ReferenceCache, isConst, isModified } from '@glimmer/reference';\nimport { APPEND_OPCODES } from '../../opcodes';\nimport { NULL_REFERENCE, UNDEFINED_REFERENCE, TRUE_REFERENCE, FALSE_REFERENCE, PrimitiveReference } from '../../references';\nAPPEND_OPCODES.add(20 /* ChildScope */, function (vm) {\n    return vm.pushChildScope();\n});\nAPPEND_OPCODES.add(21 /* PopScope */, function (vm) {\n    return vm.popScope();\n});\nAPPEND_OPCODES.add(38 /* PushDynamicScope */, function (vm) {\n    return vm.pushDynamicScope();\n});\nAPPEND_OPCODES.add(39 /* PopDynamicScope */, function (vm) {\n    return vm.popDynamicScope();\n});\nAPPEND_OPCODES.add(12 /* Immediate */, function (vm, _ref) {\n    var number = _ref.op1;\n\n    vm.stack.push(number);\n});\nAPPEND_OPCODES.add(13 /* Constant */, function (vm, _ref2) {\n    var other = _ref2.op1;\n\n    vm.stack.push(vm.constants.getOther(other));\n});\nAPPEND_OPCODES.add(14 /* PrimitiveReference */, function (vm, _ref3) {\n    var primitive = _ref3.op1;\n\n    var stack = vm.stack;\n    var flag = (primitive & 3 << 30) >>> 30;\n    var value = primitive & ~(3 << 30);\n    switch (flag) {\n        case 0:\n            stack.push(PrimitiveReference.create(value));\n            break;\n        case 1:\n            stack.push(PrimitiveReference.create(vm.constants.getString(value)));\n            break;\n        case 2:\n            switch (value) {\n                case 0:\n                    stack.push(FALSE_REFERENCE);\n                    break;\n                case 1:\n                    stack.push(TRUE_REFERENCE);\n                    break;\n                case 2:\n                    stack.push(NULL_REFERENCE);\n                    break;\n                case 3:\n                    stack.push(UNDEFINED_REFERENCE);\n                    break;\n            }\n            break;\n    }\n});\nAPPEND_OPCODES.add(15 /* Dup */, function (vm, _ref4) {\n    var register = _ref4.op1,\n        offset = _ref4.op2;\n\n    var position = vm.fetchValue(register) - offset;\n    vm.stack.dup(position);\n});\nAPPEND_OPCODES.add(16 /* Pop */, function (vm, _ref5) {\n    var count = _ref5.op1;\n    return vm.stack.pop(count);\n});\nAPPEND_OPCODES.add(17 /* Load */, function (vm, _ref6) {\n    var register = _ref6.op1;\n    return vm.load(register);\n});\nAPPEND_OPCODES.add(18 /* Fetch */, function (vm, _ref7) {\n    var register = _ref7.op1;\n    return vm.fetch(register);\n});\nAPPEND_OPCODES.add(37 /* BindDynamicScope */, function (vm, _ref8) {\n    var _names = _ref8.op1;\n\n    var names = vm.constants.getArray(_names);\n    vm.bindDynamicScope(names);\n});\nAPPEND_OPCODES.add(46 /* PushFrame */, function (vm) {\n    return vm.pushFrame();\n});\nAPPEND_OPCODES.add(47 /* PopFrame */, function (vm) {\n    return vm.popFrame();\n});\nAPPEND_OPCODES.add(48 /* Enter */, function (vm, _ref9) {\n    var args = _ref9.op1;\n    return vm.enter(args);\n});\nAPPEND_OPCODES.add(49 /* Exit */, function (vm) {\n    return vm.exit();\n});\nAPPEND_OPCODES.add(40 /* CompileDynamicBlock */, function (vm) {\n    var stack = vm.stack;\n    var block = stack.pop();\n    stack.push(block ? block.compileDynamic(vm.env) : null);\n});\nAPPEND_OPCODES.add(41 /* InvokeStatic */, function (vm, _ref10) {\n    var _block = _ref10.op1;\n\n    var block = vm.constants.getBlock(_block);\n    var compiled = block.compileStatic(vm.env);\n    vm.call(compiled.start);\n});\nAPPEND_OPCODES.add(42 /* InvokeDynamic */, function (vm, _ref11) {\n    var _invoker = _ref11.op1;\n\n    var invoker = vm.constants.getOther(_invoker);\n    var block = vm.stack.pop();\n    invoker.invoke(vm, block);\n});\nAPPEND_OPCODES.add(43 /* Jump */, function (vm, _ref12) {\n    var target = _ref12.op1;\n    return vm.goto(target);\n});\nAPPEND_OPCODES.add(44 /* JumpIf */, function (vm, _ref13) {\n    var target = _ref13.op1;\n\n    var reference = vm.stack.pop();\n    if (isConst(reference)) {\n        if (reference.value()) {\n            vm.goto(target);\n        }\n    } else {\n        var cache = new ReferenceCache(reference);\n        if (cache.peek()) {\n            vm.goto(target);\n        }\n        vm.updateWith(new Assert(cache));\n    }\n});\nAPPEND_OPCODES.add(45 /* JumpUnless */, function (vm, _ref14) {\n    var target = _ref14.op1;\n\n    var reference = vm.stack.pop();\n    if (isConst(reference)) {\n        if (!reference.value()) {\n            vm.goto(target);\n        }\n    } else {\n        var cache = new ReferenceCache(reference);\n        if (!cache.peek()) {\n            vm.goto(target);\n        }\n        vm.updateWith(new Assert(cache));\n    }\n});\nAPPEND_OPCODES.add(22 /* Return */, function (vm) {\n    return vm.return();\n});\nexport var ConstTest = function (ref, _env) {\n    return new ConstReference(!!ref.value());\n};\nexport var SimpleTest = function (ref, _env) {\n    return ref;\n};\nexport var EnvironmentTest = function (ref, env) {\n    return env.toConditionalReference(ref);\n};\nAPPEND_OPCODES.add(50 /* Test */, function (vm, _ref15) {\n    var _func = _ref15.op1;\n\n    var stack = vm.stack;\n    var operand = stack.pop();\n    var func = vm.constants.getFunction(_func);\n    stack.push(func(operand, vm.env));\n});\nexport var Assert = function (_UpdatingOpcode) {\n    _inherits(Assert, _UpdatingOpcode);\n\n    function Assert(cache) {\n        _classCallCheck(this, Assert);\n\n        var _this = _possibleConstructorReturn(this, _UpdatingOpcode.call(this));\n\n        _this.type = \"assert\";\n        _this.tag = cache.tag;\n        _this.cache = cache;\n        return _this;\n    }\n\n    Assert.prototype.evaluate = function evaluate(vm) {\n        var cache = this.cache;\n\n        if (isModified(cache.revalidate())) {\n            vm.throw();\n        }\n    };\n\n    return Assert;\n}(UpdatingOpcode);\nexport var JumpIfNotModifiedOpcode = function (_UpdatingOpcode2) {\n    _inherits(JumpIfNotModifiedOpcode, _UpdatingOpcode2);\n\n    function JumpIfNotModifiedOpcode(tag, target) {\n        _classCallCheck(this, JumpIfNotModifiedOpcode);\n\n        var _this2 = _possibleConstructorReturn(this, _UpdatingOpcode2.call(this));\n\n        _this2.target = target;\n        _this2.type = \"jump-if-not-modified\";\n        _this2.tag = tag;\n        _this2.lastRevision = tag.value();\n        return _this2;\n    }\n\n    JumpIfNotModifiedOpcode.prototype.evaluate = function evaluate(vm) {\n        var tag = this.tag,\n            target = this.target,\n            lastRevision = this.lastRevision;\n\n        if (!vm.alwaysRevalidate && tag.validate(lastRevision)) {\n            vm.goto(target);\n        }\n    };\n\n    JumpIfNotModifiedOpcode.prototype.didModify = function didModify() {\n        this.lastRevision = this.tag.value();\n    };\n\n    return JumpIfNotModifiedOpcode;\n}(UpdatingOpcode);\nexport var DidModifyOpcode = function (_UpdatingOpcode3) {\n    _inherits(DidModifyOpcode, _UpdatingOpcode3);\n\n    function DidModifyOpcode(target) {\n        _classCallCheck(this, DidModifyOpcode);\n\n        var _this3 = _possibleConstructorReturn(this, _UpdatingOpcode3.call(this));\n\n        _this3.target = target;\n        _this3.type = \"did-modify\";\n        _this3.tag = CONSTANT_TAG;\n        return _this3;\n    }\n\n    DidModifyOpcode.prototype.evaluate = function evaluate() {\n        this.target.didModify();\n    };\n\n    return DidModifyOpcode;\n}(UpdatingOpcode);\nexport var LabelOpcode = function () {\n    function LabelOpcode(label) {\n        _classCallCheck(this, LabelOpcode);\n\n        this.tag = CONSTANT_TAG;\n        this.type = \"label\";\n        this.label = null;\n        this.prev = null;\n        this.next = null;\n        initializeGuid(this);\n        if (label) this.label = label;\n    }\n\n    LabelOpcode.prototype.evaluate = function evaluate() {};\n\n    LabelOpcode.prototype.inspect = function inspect() {\n        return this.label + ' [' + this._guid + ']';\n    };\n\n    return LabelOpcode;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { dict, EMPTY_ARRAY } from '@glimmer/util';\nimport { combineTagged } from '@glimmer/reference';\nimport { PrimitiveReference, UNDEFINED_REFERENCE } from '../references';\nexport var Arguments = function () {\n    function Arguments() {\n        _classCallCheck(this, Arguments);\n\n        this.stack = null;\n        this.positional = new PositionalArguments();\n        this.named = new NamedArguments();\n    }\n\n    Arguments.prototype.empty = function empty() {\n        this.setup(null, 0, true);\n        return this;\n    };\n\n    Arguments.prototype.setup = function setup(stack, positionalCount, synthetic) {\n        this.stack = stack;\n        var names = stack.fromTop(0);\n        var namedCount = names.length;\n        var start = positionalCount + namedCount + 1;\n        var positional = this.positional;\n        positional.setup(stack, start, positionalCount);\n        var named = this.named;\n        named.setup(stack, namedCount, names, synthetic);\n    };\n\n    Arguments.prototype.at = function at(pos) {\n        return this.positional.at(pos);\n    };\n\n    Arguments.prototype.get = function get(name) {\n        return this.named.get(name);\n    };\n\n    Arguments.prototype.capture = function capture() {\n        return {\n            tag: this.tag,\n            length: this.length,\n            positional: this.positional.capture(),\n            named: this.named.capture()\n        };\n    };\n\n    Arguments.prototype.clear = function clear() {\n        var stack = this.stack,\n            length = this.length;\n\n        var pops = length + 1;\n        while (--pops >= 0) {\n            stack.pop();\n        }\n    };\n\n    _createClass(Arguments, [{\n        key: 'tag',\n        get: function () {\n            return combineTagged([this.positional, this.named]);\n        }\n    }, {\n        key: 'length',\n        get: function () {\n            return this.positional.length + this.named.length;\n        }\n    }]);\n\n    return Arguments;\n}();\n\nvar PositionalArguments = function () {\n    function PositionalArguments() {\n        _classCallCheck(this, PositionalArguments);\n\n        this.length = 0;\n        this.stack = null;\n        this.start = 0;\n        this._tag = null;\n        this._references = null;\n    }\n\n    PositionalArguments.prototype.setup = function setup(stack, start, length) {\n        this.stack = stack;\n        this.start = start;\n        this.length = length;\n        this._tag = null;\n        this._references = null;\n    };\n\n    PositionalArguments.prototype.at = function at(position) {\n        var start = this.start,\n            length = this.length;\n\n        if (position < 0 || position >= length) {\n            return UNDEFINED_REFERENCE;\n        }\n        // stack: pos1, pos2, pos3, named1, named2\n        // start: 4 (top - 4)\n        //\n        // at(0) === pos1 === top - start\n        // at(1) === pos2 === top - (start - 1)\n        // at(2) === pos3 === top - (start - 2)\n        var fromTop = start - position - 1;\n        return this.stack.fromTop(fromTop);\n    };\n\n    PositionalArguments.prototype.capture = function capture() {\n        return new CapturedPositionalArguments(this.tag, this.references);\n    };\n\n    _createClass(PositionalArguments, [{\n        key: 'tag',\n        get: function () {\n            var tag = this._tag;\n            if (!tag) {\n                tag = this._tag = combineTagged(this.references);\n            }\n            return tag;\n        }\n    }, {\n        key: 'references',\n        get: function () {\n            var references = this._references;\n            if (!references) {\n                var length = this.length;\n\n                references = this._references = new Array(length);\n                for (var i = 0; i < length; i++) {\n                    references[i] = this.at(i);\n                }\n            }\n            return references;\n        }\n    }]);\n\n    return PositionalArguments;\n}();\n\nvar CapturedPositionalArguments = function () {\n    function CapturedPositionalArguments(tag, references) {\n        var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : references.length;\n\n        _classCallCheck(this, CapturedPositionalArguments);\n\n        this.tag = tag;\n        this.references = references;\n        this.length = length;\n    }\n\n    CapturedPositionalArguments.prototype.at = function at(position) {\n        return this.references[position];\n    };\n\n    CapturedPositionalArguments.prototype.value = function value() {\n        return this.references.map(this.valueOf);\n    };\n\n    CapturedPositionalArguments.prototype.get = function get(name) {\n        var references = this.references,\n            length = this.length;\n\n        if (name === 'length') {\n            return PrimitiveReference.create(length);\n        } else {\n            var idx = parseInt(name, 10);\n            if (idx < 0 || idx >= length) {\n                return UNDEFINED_REFERENCE;\n            } else {\n                return references[idx];\n            }\n        }\n    };\n\n    CapturedPositionalArguments.prototype.valueOf = function valueOf(reference) {\n        return reference.value();\n    };\n\n    return CapturedPositionalArguments;\n}();\n\nvar NamedArguments = function () {\n    function NamedArguments() {\n        _classCallCheck(this, NamedArguments);\n\n        this.length = 0;\n        this._tag = null;\n        this._references = null;\n        this._names = null;\n        this._realNames = EMPTY_ARRAY;\n    }\n\n    NamedArguments.prototype.setup = function setup(stack, length, names, synthetic) {\n        this.stack = stack;\n        this.length = length;\n        this._tag = null;\n        this._references = null;\n        if (synthetic) {\n            this._names = names;\n            this._realNames = EMPTY_ARRAY;\n        } else {\n            this._names = null;\n            this._realNames = names;\n        }\n    };\n\n    NamedArguments.prototype.has = function has(name) {\n        return this.names.indexOf(name) !== -1;\n    };\n\n    NamedArguments.prototype.get = function get(name) {\n        var names = this.names,\n            length = this.length;\n\n        var idx = names.indexOf(name);\n        if (idx === -1) {\n            return UNDEFINED_REFERENCE;\n        }\n        // stack: pos1, pos2, pos3, named1, named2\n        // start: 4 (top - 4)\n        // namedDict: { named1: 1, named2: 0 };\n        //\n        // get('named1') === named1 === top - (start - 1)\n        // get('named2') === named2 === top - start\n        var fromTop = length - idx;\n        return this.stack.fromTop(fromTop);\n    };\n\n    NamedArguments.prototype.capture = function capture() {\n        return new CapturedNamedArguments(this.tag, this.names, this.references);\n    };\n\n    NamedArguments.prototype.sliceName = function sliceName(name) {\n        return name.slice(1);\n    };\n\n    _createClass(NamedArguments, [{\n        key: 'tag',\n        get: function () {\n            return combineTagged(this.references);\n        }\n    }, {\n        key: 'names',\n        get: function () {\n            var names = this._names;\n            if (!names) {\n                names = this._names = this._realNames.map(this.sliceName);\n            }\n            return names;\n        }\n    }, {\n        key: 'references',\n        get: function () {\n            var references = this._references;\n            if (!references) {\n                var names = this.names,\n                    length = this.length;\n\n                references = this._references = [];\n                for (var i = 0; i < length; i++) {\n                    references[i] = this.get(names[i]);\n                }\n            }\n            return references;\n        }\n    }]);\n\n    return NamedArguments;\n}();\n\nvar CapturedNamedArguments = function () {\n    function CapturedNamedArguments(tag, names, references) {\n        _classCallCheck(this, CapturedNamedArguments);\n\n        this.tag = tag;\n        this.names = names;\n        this.references = references;\n        this.length = names.length;\n        this._map = null;\n    }\n\n    CapturedNamedArguments.prototype.has = function has(name) {\n        return this.names.indexOf(name) !== -1;\n    };\n\n    CapturedNamedArguments.prototype.get = function get(name) {\n        var names = this.names,\n            references = this.references;\n\n        var idx = names.indexOf(name);\n        if (idx === -1) {\n            return UNDEFINED_REFERENCE;\n        } else {\n            return references[idx];\n        }\n    };\n\n    CapturedNamedArguments.prototype.value = function value() {\n        var names = this.names,\n            references = this.references;\n\n        var out = dict();\n        names.forEach(function (name, i) {\n            return out[name] = references[i].value();\n        });\n        return out;\n    };\n\n    _createClass(CapturedNamedArguments, [{\n        key: 'map',\n        get: function () {\n            var map = this._map;\n            if (!map) {\n                var names = this.names,\n                    references = this.references;\n\n                map = this._map = dict();\n                names.forEach(function (name, i) {\n                    return map[name] = references[i];\n                });\n            }\n            return map;\n        }\n    }]);\n\n    return CapturedNamedArguments;\n}();\n\nexport default new Arguments();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { UpdatingOpcode } from '../../opcodes';\nimport { CachedReference, ReferenceCache, combineTagged, isConst as isConstReference, isModified } from '@glimmer/reference';\nimport { NULL_REFERENCE, PrimitiveReference } from '../../references';\nimport { Assert } from './vm';\nimport { APPEND_OPCODES } from '../../opcodes';\nAPPEND_OPCODES.add(23 /* Text */, function (vm, _ref) {\n    var text = _ref.op1;\n\n    vm.elements().appendText(vm.constants.getString(text));\n});\nAPPEND_OPCODES.add(24 /* Comment */, function (vm, _ref2) {\n    var text = _ref2.op1;\n\n    vm.elements().appendComment(vm.constants.getString(text));\n});\nAPPEND_OPCODES.add(26 /* OpenElement */, function (vm, _ref3) {\n    var tag = _ref3.op1;\n\n    vm.elements().openElement(vm.constants.getString(tag));\n});\nAPPEND_OPCODES.add(27 /* OpenElementWithOperations */, function (vm, _ref4) {\n    var tag = _ref4.op1;\n\n    var tagName = vm.constants.getString(tag);\n    var operations = vm.stack.pop();\n    vm.elements().openElement(tagName, operations);\n});\nAPPEND_OPCODES.add(28 /* OpenDynamicElement */, function (vm) {\n    var operations = vm.stack.pop();\n    var tagName = vm.stack.pop().value();\n    vm.elements().openElement(tagName, operations);\n});\nAPPEND_OPCODES.add(35 /* PushRemoteElement */, function (vm) {\n    var elementRef = vm.stack.pop();\n    var nextSiblingRef = vm.stack.pop();\n    var element = void 0;\n    var nextSibling = void 0;\n    if (isConstReference(elementRef)) {\n        element = elementRef.value();\n    } else {\n        var cache = new ReferenceCache(elementRef);\n        element = cache.peek();\n        vm.updateWith(new Assert(cache));\n    }\n    if (isConstReference(nextSiblingRef)) {\n        nextSibling = nextSiblingRef.value();\n    } else {\n        var _cache = new ReferenceCache(nextSiblingRef);\n        nextSibling = _cache.peek();\n        vm.updateWith(new Assert(_cache));\n    }\n    vm.elements().pushRemoteElement(element, nextSibling);\n});\nAPPEND_OPCODES.add(36 /* PopRemoteElement */, function (vm) {\n    return vm.elements().popRemoteElement();\n});\n\nvar ClassList = function () {\n    function ClassList() {\n        _classCallCheck(this, ClassList);\n\n        this.list = null;\n        this.isConst = true;\n    }\n\n    ClassList.prototype.append = function append(reference) {\n        var list = this.list,\n            isConst = this.isConst;\n\n        if (list === null) list = this.list = [];\n        list.push(reference);\n        this.isConst = isConst && isConstReference(reference);\n    };\n\n    ClassList.prototype.toReference = function toReference() {\n        var list = this.list,\n            isConst = this.isConst;\n\n        if (!list) return NULL_REFERENCE;\n        if (isConst) return PrimitiveReference.create(toClassName(list));\n        return new ClassListReference(list);\n    };\n\n    return ClassList;\n}();\n\nvar ClassListReference = function (_CachedReference) {\n    _inherits(ClassListReference, _CachedReference);\n\n    function ClassListReference(list) {\n        _classCallCheck(this, ClassListReference);\n\n        var _this = _possibleConstructorReturn(this, _CachedReference.call(this));\n\n        _this.list = [];\n        _this.tag = combineTagged(list);\n        _this.list = list;\n        return _this;\n    }\n\n    ClassListReference.prototype.compute = function compute() {\n        return toClassName(this.list);\n    };\n\n    return ClassListReference;\n}(CachedReference);\n\nfunction toClassName(list) {\n    var ret = [];\n    for (var i = 0; i < list.length; i++) {\n        var value = list[i].value();\n        if (value !== false && value !== null && value !== undefined) ret.push(value);\n    }\n    return ret.length === 0 ? null : ret.join(' ');\n}\nexport var SimpleElementOperations = function () {\n    function SimpleElementOperations(env) {\n        _classCallCheck(this, SimpleElementOperations);\n\n        this.env = env;\n        this.opcodes = null;\n        this.classList = null;\n    }\n\n    SimpleElementOperations.prototype.addStaticAttribute = function addStaticAttribute(element, name, value) {\n        if (name === 'class') {\n            this.addClass(PrimitiveReference.create(value));\n        } else {\n            this.env.getAppendOperations().setAttribute(element, name, value);\n        }\n    };\n\n    SimpleElementOperations.prototype.addStaticAttributeNS = function addStaticAttributeNS(element, namespace, name, value) {\n        this.env.getAppendOperations().setAttribute(element, name, value, namespace);\n    };\n\n    SimpleElementOperations.prototype.addDynamicAttribute = function addDynamicAttribute(element, name, reference, isTrusting) {\n        if (name === 'class') {\n            this.addClass(reference);\n        } else {\n            var attributeManager = this.env.attributeFor(element, name, isTrusting);\n            var attribute = new DynamicAttribute(element, attributeManager, name, reference);\n            this.addAttribute(attribute);\n        }\n    };\n\n    SimpleElementOperations.prototype.addDynamicAttributeNS = function addDynamicAttributeNS(element, namespace, name, reference, isTrusting) {\n        var attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);\n        var nsAttribute = new DynamicAttribute(element, attributeManager, name, reference, namespace);\n        this.addAttribute(nsAttribute);\n    };\n\n    SimpleElementOperations.prototype.flush = function flush(element, vm) {\n        var env = vm.env;\n        var opcodes = this.opcodes,\n            classList = this.classList;\n\n        for (var i = 0; opcodes && i < opcodes.length; i++) {\n            vm.updateWith(opcodes[i]);\n        }\n        if (classList) {\n            var attributeManager = env.attributeFor(element, 'class', false);\n            var attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());\n            var opcode = attribute.flush(env);\n            if (opcode) {\n                vm.updateWith(opcode);\n            }\n        }\n        this.opcodes = null;\n        this.classList = null;\n    };\n\n    SimpleElementOperations.prototype.addClass = function addClass(reference) {\n        var classList = this.classList;\n\n        if (!classList) {\n            classList = this.classList = new ClassList();\n        }\n        classList.append(reference);\n    };\n\n    SimpleElementOperations.prototype.addAttribute = function addAttribute(attribute) {\n        var opcode = attribute.flush(this.env);\n        if (opcode) {\n            var opcodes = this.opcodes;\n\n            if (!opcodes) {\n                opcodes = this.opcodes = [];\n            }\n            opcodes.push(opcode);\n        }\n    };\n\n    return SimpleElementOperations;\n}();\nexport var ComponentElementOperations = function () {\n    function ComponentElementOperations(env) {\n        _classCallCheck(this, ComponentElementOperations);\n\n        this.env = env;\n        this.attributeNames = null;\n        this.attributes = null;\n        this.classList = null;\n    }\n\n    ComponentElementOperations.prototype.addStaticAttribute = function addStaticAttribute(element, name, value) {\n        if (name === 'class') {\n            this.addClass(PrimitiveReference.create(value));\n        } else if (this.shouldAddAttribute(name)) {\n            this.addAttribute(name, new StaticAttribute(element, name, value));\n        }\n    };\n\n    ComponentElementOperations.prototype.addStaticAttributeNS = function addStaticAttributeNS(element, namespace, name, value) {\n        if (this.shouldAddAttribute(name)) {\n            this.addAttribute(name, new StaticAttribute(element, name, value, namespace));\n        }\n    };\n\n    ComponentElementOperations.prototype.addDynamicAttribute = function addDynamicAttribute(element, name, reference, isTrusting) {\n        if (name === 'class') {\n            this.addClass(reference);\n        } else if (this.shouldAddAttribute(name)) {\n            var attributeManager = this.env.attributeFor(element, name, isTrusting);\n            var attribute = new DynamicAttribute(element, attributeManager, name, reference);\n            this.addAttribute(name, attribute);\n        }\n    };\n\n    ComponentElementOperations.prototype.addDynamicAttributeNS = function addDynamicAttributeNS(element, namespace, name, reference, isTrusting) {\n        if (this.shouldAddAttribute(name)) {\n            var attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);\n            var nsAttribute = new DynamicAttribute(element, attributeManager, name, reference, namespace);\n            this.addAttribute(name, nsAttribute);\n        }\n    };\n\n    ComponentElementOperations.prototype.flush = function flush(element, vm) {\n        var env = this.env;\n        var attributes = this.attributes,\n            classList = this.classList;\n\n        for (var i = 0; attributes && i < attributes.length; i++) {\n            var opcode = attributes[i].flush(env);\n            if (opcode) {\n                vm.updateWith(opcode);\n            }\n        }\n        if (classList) {\n            var attributeManager = env.attributeFor(element, 'class', false);\n            var attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());\n            var _opcode = attribute.flush(env);\n            if (_opcode) {\n                vm.updateWith(_opcode);\n            }\n        }\n    };\n\n    ComponentElementOperations.prototype.shouldAddAttribute = function shouldAddAttribute(name) {\n        return !this.attributeNames || this.attributeNames.indexOf(name) === -1;\n    };\n\n    ComponentElementOperations.prototype.addClass = function addClass(reference) {\n        var classList = this.classList;\n\n        if (!classList) {\n            classList = this.classList = new ClassList();\n        }\n        classList.append(reference);\n    };\n\n    ComponentElementOperations.prototype.addAttribute = function addAttribute(name, attribute) {\n        var attributeNames = this.attributeNames,\n            attributes = this.attributes;\n\n        if (!attributeNames) {\n            attributeNames = this.attributeNames = [];\n            attributes = this.attributes = [];\n        }\n        attributeNames.push(name);\n        attributes.push(attribute);\n    };\n\n    return ComponentElementOperations;\n}();\nAPPEND_OPCODES.add(32 /* FlushElement */, function (vm) {\n    var stack = vm.elements();\n    var action = 'FlushElementOpcode#evaluate';\n    stack.expectOperations(action).flush(stack.expectConstructing(action), vm);\n    stack.flushElement();\n});\nAPPEND_OPCODES.add(33 /* CloseElement */, function (vm) {\n    return vm.elements().closeElement();\n});\nAPPEND_OPCODES.add(29 /* StaticAttr */, function (vm, _ref5) {\n    var _name = _ref5.op1,\n        _value = _ref5.op2,\n        _namespace = _ref5.op3;\n\n    var name = vm.constants.getString(_name);\n    var value = vm.constants.getString(_value);\n    if (_namespace) {\n        var namespace = vm.constants.getString(_namespace);\n        vm.elements().setStaticAttributeNS(namespace, name, value);\n    } else {\n        vm.elements().setStaticAttribute(name, value);\n    }\n});\nAPPEND_OPCODES.add(34 /* Modifier */, function (vm, _ref6) {\n    var _manager = _ref6.op1;\n\n    var manager = vm.constants.getOther(_manager);\n    var stack = vm.stack;\n    var args = stack.pop();\n    var tag = args.tag;\n\n    var _vm$elements = vm.elements(),\n        element = _vm$elements.constructing,\n        updateOperations = _vm$elements.updateOperations;\n\n    var dynamicScope = vm.dynamicScope();\n    var modifier = manager.create(element, args, dynamicScope, updateOperations);\n    args.clear();\n    vm.env.scheduleInstallModifier(modifier, manager);\n    var destructor = manager.getDestructor(modifier);\n    if (destructor) {\n        vm.newDestroyable(destructor);\n    }\n    vm.updateWith(new UpdateModifierOpcode(tag, manager, modifier));\n});\nexport var UpdateModifierOpcode = function (_UpdatingOpcode) {\n    _inherits(UpdateModifierOpcode, _UpdatingOpcode);\n\n    function UpdateModifierOpcode(tag, manager, modifier) {\n        _classCallCheck(this, UpdateModifierOpcode);\n\n        var _this2 = _possibleConstructorReturn(this, _UpdatingOpcode.call(this));\n\n        _this2.tag = tag;\n        _this2.manager = manager;\n        _this2.modifier = modifier;\n        _this2.type = \"update-modifier\";\n        _this2.lastUpdated = tag.value();\n        return _this2;\n    }\n\n    UpdateModifierOpcode.prototype.evaluate = function evaluate(vm) {\n        var manager = this.manager,\n            modifier = this.modifier,\n            tag = this.tag,\n            lastUpdated = this.lastUpdated;\n\n        if (!tag.validate(lastUpdated)) {\n            vm.env.scheduleUpdateModifier(modifier, manager);\n            this.lastUpdated = tag.value();\n        }\n    };\n\n    return UpdateModifierOpcode;\n}(UpdatingOpcode);\nexport var StaticAttribute = function () {\n    function StaticAttribute(element, name, value, namespace) {\n        _classCallCheck(this, StaticAttribute);\n\n        this.element = element;\n        this.name = name;\n        this.value = value;\n        this.namespace = namespace;\n    }\n\n    StaticAttribute.prototype.flush = function flush(env) {\n        env.getAppendOperations().setAttribute(this.element, this.name, this.value, this.namespace);\n        return null;\n    };\n\n    return StaticAttribute;\n}();\nexport var DynamicAttribute = function () {\n    function DynamicAttribute(element, attributeManager, name, reference, namespace) {\n        _classCallCheck(this, DynamicAttribute);\n\n        this.element = element;\n        this.attributeManager = attributeManager;\n        this.name = name;\n        this.reference = reference;\n        this.namespace = namespace;\n        this.cache = null;\n        this.tag = reference.tag;\n    }\n\n    DynamicAttribute.prototype.patch = function patch(env) {\n        var element = this.element,\n            cache = this.cache;\n\n        var value = cache.revalidate();\n        if (isModified(value)) {\n            this.attributeManager.updateAttribute(env, element, value, this.namespace);\n        }\n    };\n\n    DynamicAttribute.prototype.flush = function flush(env) {\n        var reference = this.reference,\n            element = this.element;\n\n        if (isConstReference(reference)) {\n            var value = reference.value();\n            this.attributeManager.setAttribute(env, element, value, this.namespace);\n            return null;\n        } else {\n            var cache = this.cache = new ReferenceCache(reference);\n            var _value2 = cache.peek();\n            this.attributeManager.setAttribute(env, element, _value2, this.namespace);\n            return new PatchElementOpcode(this);\n        }\n    };\n\n    return DynamicAttribute;\n}();\nfunction formatElement(element) {\n    return JSON.stringify('<' + element.tagName.toLowerCase() + ' />');\n}\nAPPEND_OPCODES.add(31 /* DynamicAttrNS */, function (vm, _ref7) {\n    var _name = _ref7.op1,\n        _namespace = _ref7.op2,\n        trusting = _ref7.op3;\n\n    var name = vm.constants.getString(_name);\n    var namespace = vm.constants.getString(_namespace);\n    var reference = vm.stack.pop();\n    vm.elements().setDynamicAttributeNS(namespace, name, reference, !!trusting);\n});\nAPPEND_OPCODES.add(30 /* DynamicAttr */, function (vm, _ref8) {\n    var _name = _ref8.op1,\n        trusting = _ref8.op2;\n\n    var name = vm.constants.getString(_name);\n    var reference = vm.stack.pop();\n    vm.elements().setDynamicAttribute(name, reference, !!trusting);\n});\nexport var PatchElementOpcode = function (_UpdatingOpcode2) {\n    _inherits(PatchElementOpcode, _UpdatingOpcode2);\n\n    function PatchElementOpcode(operation) {\n        _classCallCheck(this, PatchElementOpcode);\n\n        var _this3 = _possibleConstructorReturn(this, _UpdatingOpcode2.call(this));\n\n        _this3.type = \"patch-element\";\n        _this3.tag = operation.tag;\n        _this3.operation = operation;\n        return _this3;\n    }\n\n    PatchElementOpcode.prototype.evaluate = function evaluate(vm) {\n        this.operation.patch(vm.env);\n    };\n\n    return PatchElementOpcode;\n}(UpdatingOpcode);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nimport { APPEND_OPCODES, UpdatingOpcode } from '../../opcodes';\nimport { Assert } from './vm';\nimport ARGS from '../../vm/arguments';\nimport { ComponentElementOperations } from './dom';\nimport { CONSTANT_TAG, ReferenceCache, combine, isConst } from '@glimmer/reference';\nAPPEND_OPCODES.add(55 /* PushComponentManager */, function (vm, _ref) {\n    var _definition = _ref.op1;\n\n    var definition = vm.constants.getOther(_definition);\n    var stack = vm.stack;\n    stack.push(definition);\n    stack.push(definition.manager);\n});\nAPPEND_OPCODES.add(56 /* PushDynamicComponentManager */, function (vm) {\n    var stack = vm.stack;\n    var reference = stack.pop();\n    var cache = isConst(reference) ? undefined : new ReferenceCache(reference);\n    var definition = cache ? cache.peek() : reference.value();\n    stack.push(definition);\n    stack.push(definition.manager);\n    if (cache) {\n        vm.updateWith(new Assert(cache));\n    }\n});\nAPPEND_OPCODES.add(57 /* InitializeComponentState */, function (vm) {\n    var stack = vm.stack;\n    var manager = stack.pop();\n    var definition = stack.pop();\n    stack.push({ definition: definition, manager: manager, component: null });\n});\nAPPEND_OPCODES.add(58 /* PushArgs */, function (vm, _ref2) {\n    var positional = _ref2.op1,\n        synthetic = _ref2.op2;\n\n    var stack = vm.stack;\n    ARGS.setup(stack, positional, !!synthetic);\n    stack.push(ARGS);\n});\nAPPEND_OPCODES.add(59 /* PrepareArgs */, function (vm, _ref3) {\n    var _state = _ref3.op1;\n\n    var stack = vm.stack;\n\n    var _vm$fetchValue = vm.fetchValue(_state),\n        definition = _vm$fetchValue.definition,\n        manager = _vm$fetchValue.manager;\n\n    var args = stack.pop();\n    var preparedArgs = manager.prepareArgs(definition, args);\n    if (preparedArgs) {\n        args.clear();\n        var positional = preparedArgs.positional,\n            named = preparedArgs.named;\n\n        var positionalCount = positional.length;\n        for (var i = 0; i < positionalCount; i++) {\n            stack.push(positional[i]);\n        }\n        var names = Object.keys(named);\n        var namedCount = names.length;\n        for (var _i = 0; _i < namedCount; _i++) {\n            stack.push(named[names[_i]]);\n        }\n        stack.push(names);\n        args.setup(stack, positionalCount, true);\n    }\n    stack.push(args);\n});\nAPPEND_OPCODES.add(60 /* CreateComponent */, function (vm, _ref4) {\n    var _vm$fetchValue2;\n\n    var flags = _ref4.op1,\n        _state = _ref4.op2;\n\n    var definition = void 0,\n        manager = void 0;\n    var args = vm.stack.pop();\n    var dynamicScope = vm.dynamicScope();\n    var state = (_vm$fetchValue2 = vm.fetchValue(_state), definition = _vm$fetchValue2.definition, manager = _vm$fetchValue2.manager, _vm$fetchValue2);\n    var hasDefaultBlock = flags & 0b01;\n    var component = manager.create(vm.env, definition, args, dynamicScope, vm.getSelf(), !!hasDefaultBlock);\n    state.component = component;\n    vm.updateWith(new UpdateComponentOpcode(args.tag, definition.name, component, manager, dynamicScope));\n});\nAPPEND_OPCODES.add(61 /* RegisterComponentDestructor */, function (vm, _ref5) {\n    var _state = _ref5.op1;\n\n    var _vm$fetchValue3 = vm.fetchValue(_state),\n        manager = _vm$fetchValue3.manager,\n        component = _vm$fetchValue3.component;\n\n    var destructor = manager.getDestructor(component);\n    if (destructor) vm.newDestroyable(destructor);\n});\nAPPEND_OPCODES.add(65 /* BeginComponentTransaction */, function (vm) {\n    vm.beginCacheGroup();\n    vm.elements().pushSimpleBlock();\n});\nAPPEND_OPCODES.add(62 /* PushComponentOperations */, function (vm) {\n    vm.stack.push(new ComponentElementOperations(vm.env));\n});\nAPPEND_OPCODES.add(67 /* DidCreateElement */, function (vm, _ref6) {\n    var _state = _ref6.op1;\n\n    var _vm$fetchValue4 = vm.fetchValue(_state),\n        manager = _vm$fetchValue4.manager,\n        component = _vm$fetchValue4.component;\n\n    var action = 'DidCreateElementOpcode#evaluate';\n    manager.didCreateElement(component, vm.elements().expectConstructing(action), vm.elements().expectOperations(action));\n});\nAPPEND_OPCODES.add(63 /* GetComponentSelf */, function (vm, _ref7) {\n    var _state = _ref7.op1;\n\n    var state = vm.fetchValue(_state);\n    vm.stack.push(state.manager.getSelf(state.component));\n});\nAPPEND_OPCODES.add(64 /* GetComponentLayout */, function (vm, _ref8) {\n    var _state = _ref8.op1;\n\n    var _vm$fetchValue5 = vm.fetchValue(_state),\n        manager = _vm$fetchValue5.manager,\n        definition = _vm$fetchValue5.definition,\n        component = _vm$fetchValue5.component;\n\n    vm.stack.push(manager.layoutFor(definition, component, vm.env));\n});\nAPPEND_OPCODES.add(68 /* DidRenderLayout */, function (vm, _ref9) {\n    var _state = _ref9.op1;\n\n    var _vm$fetchValue6 = vm.fetchValue(_state),\n        manager = _vm$fetchValue6.manager,\n        component = _vm$fetchValue6.component;\n\n    var bounds = vm.elements().popBlock();\n    manager.didRenderLayout(component, bounds);\n    vm.env.didCreate(component, manager);\n    vm.updateWith(new DidUpdateLayoutOpcode(manager, component, bounds));\n});\nAPPEND_OPCODES.add(66 /* CommitComponentTransaction */, function (vm) {\n    return vm.commitCacheGroup();\n});\nexport var UpdateComponentOpcode = function (_UpdatingOpcode) {\n    _inherits(UpdateComponentOpcode, _UpdatingOpcode);\n\n    function UpdateComponentOpcode(tag, name, component, manager, dynamicScope) {\n        _classCallCheck(this, UpdateComponentOpcode);\n\n        var _this = _possibleConstructorReturn(this, _UpdatingOpcode.call(this));\n\n        _this.name = name;\n        _this.component = component;\n        _this.manager = manager;\n        _this.dynamicScope = dynamicScope;\n        _this.type = \"update-component\";\n        var componentTag = manager.getTag(component);\n        if (componentTag) {\n            _this.tag = combine([tag, componentTag]);\n        } else {\n            _this.tag = tag;\n        }\n        return _this;\n    }\n\n    UpdateComponentOpcode.prototype.evaluate = function evaluate(_vm) {\n        var component = this.component,\n            manager = this.manager,\n            dynamicScope = this.dynamicScope;\n\n        manager.update(component, dynamicScope);\n    };\n\n    return UpdateComponentOpcode;\n}(UpdatingOpcode);\nexport var DidUpdateLayoutOpcode = function (_UpdatingOpcode2) {\n    _inherits(DidUpdateLayoutOpcode, _UpdatingOpcode2);\n\n    function DidUpdateLayoutOpcode(manager, component, bounds) {\n        _classCallCheck(this, DidUpdateLayoutOpcode);\n\n        var _this2 = _possibleConstructorReturn(this, _UpdatingOpcode2.call(this));\n\n        _this2.manager = manager;\n        _this2.component = component;\n        _this2.bounds = bounds;\n        _this2.type = \"did-update-layout\";\n        _this2.tag = CONSTANT_TAG;\n        return _this2;\n    }\n\n    DidUpdateLayoutOpcode.prototype.evaluate = function evaluate(vm) {\n        var manager = this.manager,\n            component = this.component,\n            bounds = this.bounds;\n\n        manager.didUpdateLayout(component, bounds);\n        vm.env.didUpdate(component, manager);\n    };\n\n    return DidUpdateLayoutOpcode;\n}(UpdatingOpcode);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nexport var Cursor = function Cursor(element, nextSibling) {\n    _classCallCheck(this, Cursor);\n\n    this.element = element;\n    this.nextSibling = nextSibling;\n};\nexport var RealDOMBounds = function () {\n    function RealDOMBounds(bounds) {\n        _classCallCheck(this, RealDOMBounds);\n\n        this.bounds = bounds;\n    }\n\n    RealDOMBounds.prototype.parentElement = function parentElement() {\n        return this.bounds.parentElement();\n    };\n\n    RealDOMBounds.prototype.firstNode = function firstNode() {\n        return this.bounds.firstNode();\n    };\n\n    RealDOMBounds.prototype.lastNode = function lastNode() {\n        return this.bounds.lastNode();\n    };\n\n    return RealDOMBounds;\n}();\nexport var ConcreteBounds = function () {\n    function ConcreteBounds(parentNode, first, last) {\n        _classCallCheck(this, ConcreteBounds);\n\n        this.parentNode = parentNode;\n        this.first = first;\n        this.last = last;\n    }\n\n    ConcreteBounds.prototype.parentElement = function parentElement() {\n        return this.parentNode;\n    };\n\n    ConcreteBounds.prototype.firstNode = function firstNode() {\n        return this.first;\n    };\n\n    ConcreteBounds.prototype.lastNode = function lastNode() {\n        return this.last;\n    };\n\n    return ConcreteBounds;\n}();\nexport var SingleNodeBounds = function () {\n    function SingleNodeBounds(parentNode, node) {\n        _classCallCheck(this, SingleNodeBounds);\n\n        this.parentNode = parentNode;\n        this.node = node;\n    }\n\n    SingleNodeBounds.prototype.parentElement = function parentElement() {\n        return this.parentNode;\n    };\n\n    SingleNodeBounds.prototype.firstNode = function firstNode() {\n        return this.node;\n    };\n\n    SingleNodeBounds.prototype.lastNode = function lastNode() {\n        return this.node;\n    };\n\n    return SingleNodeBounds;\n}();\nexport function bounds(parent, first, last) {\n    return new ConcreteBounds(parent, first, last);\n}\nexport function single(parent, node) {\n    return new SingleNodeBounds(parent, node);\n}\nexport function move(bounds, reference) {\n    var parent = bounds.parentElement();\n    var first = bounds.firstNode();\n    var last = bounds.lastNode();\n    var node = first;\n    while (node) {\n        var next = node.nextSibling;\n        parent.insertBefore(node, reference);\n        if (node === last) return next;\n        node = next;\n    }\n    return null;\n}\nexport function clear(bounds) {\n    var parent = bounds.parentElement();\n    var first = bounds.firstNode();\n    var last = bounds.lastNode();\n    var node = first;\n    while (node) {\n        var next = node.nextSibling;\n        parent.removeChild(node);\n        if (node === last) return next;\n        node = next;\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm91bmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBVUEsQUFBTSxvQkFDSixnQkFBbUIsQUFBdUIsU0FBUyxBQUFnQzs7O0FBQWhFLFNBQU8sVUFBUCxBQUFPLEFBQWdCO0FBQVMsU0FBVyxjQUFYLEFBQVcsQUFBcUIsQUFBRztBQUFDLEFBQ3hGO0FBTUQsQUFBTTtBQUNKLDJCQUFvQixBQUFjOzs7QUFBZCxhQUFNLFNBQU4sQUFBTSxBQUFRLEFBQUc7QUFBQzs7NEJBRXRDLEFBQWE7QUFBSyxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQU0sT0FBQyxBQUFhLEFBQWEsQUFBQyxBQUFDO0FBQUM7OzRCQUNsRSxBQUFTO0FBQUssQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBUyxBQUFVLEFBQUMsQUFBQztBQUFDOzs0QkFDdkQsQUFBUTtBQUFLLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQVEsQUFBVSxBQUFDLEFBQUM7QUFBQyxBQUN0RDs7OztBQUVELEFBQU07QUFDSiw0QkFBbUIsQUFBMEIsWUFBVSxBQUEwQixPQUFVLEFBQXlCOzs7QUFBakcsYUFBVSxhQUFWLEFBQVUsQUFBZ0I7QUFBVSxhQUFLLFFBQUwsQUFBSyxBQUFxQjtBQUFVLGFBQUksT0FBSixBQUFJLEFBQXFCLEFBQUc7QUFBQzs7NkJBRXhILEFBQWE7QUFBSyxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQVUsQUFBQyxBQUFDO0FBQUM7OzZCQUMzQyxBQUFTO0FBQUssQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFBQztBQUFDOzs2QkFDbEMsQUFBUTtBQUFLLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBSSxBQUFDLEFBQUM7QUFBQyxBQUNqQzs7OztBQUVELEFBQU07QUFJSiw4QkFBWSxBQUEwQixZQUFFLEFBQWlCOzs7QUFDdkQsQUFBSSxhQUFDLEFBQVUsYUFBRyxBQUFxQixBQUFDO0FBQ3hDLEFBQUksYUFBQyxBQUFJLE9BQUcsQUFBWSxBQUFDLEFBQzNCO0FBQUM7OytCQUVELEFBQWE7QUFBSyxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQVUsQUFBQyxBQUFDO0FBQUM7OytCQUMzQyxBQUFTO0FBQUssQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQztBQUFDOzsrQkFDakMsQUFBUTtBQUFLLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBSSxBQUFDLEFBQUM7QUFBQyxBQUNqQzs7OztBQUVELEFBQU0sdUJBQWlCLEFBQXNCLFFBQUUsQUFBa0IsT0FBRSxBQUFpQjtBQUNsRixBQUFNLFdBQUMsSUFBSSxBQUFjLGVBQUMsQUFBTSxRQUFFLEFBQUssT0FBRSxBQUFJLEFBQUMsQUFBQyxBQUNqRDtBQUFDO0FBRUQsQUFBTSx1QkFBaUIsQUFBc0IsUUFBRSxBQUFpQjtBQUM5RCxBQUFNLFdBQUMsSUFBSSxBQUFnQixpQkFBQyxBQUFNLFFBQUUsQUFBSSxBQUFDLEFBQUMsQUFDNUM7QUFBQztBQUVELEFBQU0scUJBQWUsQUFBYyxRQUFFLEFBQThCO0FBQ2pFLFFBQUksQUFBTSxTQUFHLEFBQU0sT0FBQyxBQUFhLEFBQUUsQUFBQztBQUNwQyxRQUFJLEFBQUssUUFBRyxBQUFNLE9BQUMsQUFBUyxBQUFFLEFBQUM7QUFDL0IsUUFBSSxBQUFJLE9BQUcsQUFBTSxPQUFDLEFBQVEsQUFBRSxBQUFDO0FBRTdCLFFBQUksQUFBSSxPQUF3QixBQUFLLEFBQUM7QUFFdEMsV0FBTyxBQUFJLE1BQUUsQUFBQztBQUNaLFlBQUksQUFBSSxPQUFHLEFBQUksS0FBQyxBQUFXLEFBQUM7QUFDNUIsQUFBTSxlQUFDLEFBQVksYUFBQyxBQUFJLE1BQUUsQUFBUyxBQUFDLEFBQUM7QUFDckMsQUFBRSxBQUFDLFlBQUMsQUFBSSxTQUFLLEFBQUksQUFBQyxNQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUM7QUFDL0IsQUFBSSxlQUFHLEFBQUksQUFBQyxBQUNkO0FBQUM7QUFFRCxBQUFNLFdBQUMsQUFBSSxBQUFDLEFBQ2Q7QUFBQztBQUVELEFBQU0sc0JBQWdCLEFBQWM7QUFDbEMsUUFBSSxBQUFNLFNBQUcsQUFBTSxPQUFDLEFBQWEsQUFBRSxBQUFDO0FBQ3BDLFFBQUksQUFBSyxRQUFHLEFBQU0sT0FBQyxBQUFTLEFBQUUsQUFBQztBQUMvQixRQUFJLEFBQUksT0FBRyxBQUFNLE9BQUMsQUFBUSxBQUFFLEFBQUM7QUFFN0IsUUFBSSxBQUFJLE9BQXdCLEFBQUssQUFBQztBQUV0QyxXQUFPLEFBQUksTUFBRSxBQUFDO0FBQ1osWUFBSSxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQVcsQUFBQztBQUM1QixBQUFNLGVBQUMsQUFBVyxZQUFDLEFBQUksQUFBQyxBQUFDO0FBQ3pCLEFBQUUsQUFBQyxZQUFDLEFBQUksU0FBSyxBQUFJLEFBQUMsTUFBQyxBQUFNLE9BQUMsQUFBSSxBQUFDO0FBQy9CLEFBQUksZUFBRyxBQUFJLEFBQUMsQUFDZDtBQUFDO0FBRUQsQUFBTSxXQUFDLEFBQUksQUFBQyxBQUNkO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBTaW1wbGUgZnJvbSAnLi9kb20vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBPcHRpb24sIERlc3Ryb3lhYmxlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQm91bmRzIHtcbiAgLy8gYSBtZXRob2QgdG8gZnV0dXJlLXByb29mIGZvciB3b3JtaG9saW5nOyBtYXkgbm90IGJlIG5lZWRlZCB1bHRpbWF0ZWx5XG4gIHBhcmVudEVsZW1lbnQoKTogU2ltcGxlLkVsZW1lbnQ7XG4gIGZpcnN0Tm9kZSgpOiBPcHRpb248U2ltcGxlLk5vZGU+O1xuICBsYXN0Tm9kZSgpOiBPcHRpb248U2ltcGxlLk5vZGU+O1xufVxuXG5leHBvcnQgY2xhc3MgQ3Vyc29yIHtcbiAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnQ6IFNpbXBsZS5FbGVtZW50LCBwdWJsaWMgbmV4dFNpYmxpbmc6IE9wdGlvbjxTaW1wbGUuTm9kZT4pIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJvdW5kcztcblxuZXhwb3J0IGludGVyZmFjZSBEZXN0cm95YWJsZUJvdW5kcyBleHRlbmRzIEJvdW5kcywgRGVzdHJveWFibGUge31cblxuZXhwb3J0IGNsYXNzIFJlYWxET01Cb3VuZHMgaW1wbGVtZW50cyBCb3VuZHMge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJvdW5kczogQm91bmRzKSB7fVxuXG4gIHBhcmVudEVsZW1lbnQoKSB7IHJldHVybiB0aGlzLmJvdW5kcy5wYXJlbnRFbGVtZW50KCkgYXMgRWxlbWVudDsgfVxuICBmaXJzdE5vZGUoKSB7IHJldHVybiB0aGlzLmJvdW5kcy5maXJzdE5vZGUoKSBhcyBOb2RlOyB9XG4gIGxhc3ROb2RlKCkgeyByZXR1cm4gdGhpcy5ib3VuZHMubGFzdE5vZGUoKSBhcyBOb2RlOyB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25jcmV0ZUJvdW5kcyBpbXBsZW1lbnRzIEJvdW5kcyB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXJlbnROb2RlOiBTaW1wbGUuRWxlbWVudCwgcHJpdmF0ZSBmaXJzdDogT3B0aW9uPFNpbXBsZS5Ob2RlPiwgcHJpdmF0ZSBsYXN0OiBPcHRpb248U2ltcGxlLk5vZGU+KSB7fVxuXG4gIHBhcmVudEVsZW1lbnQoKSB7IHJldHVybiB0aGlzLnBhcmVudE5vZGU7IH1cbiAgZmlyc3ROb2RlKCkgeyByZXR1cm4gdGhpcy5maXJzdDsgfVxuICBsYXN0Tm9kZSgpIHsgcmV0dXJuIHRoaXMubGFzdDsgfVxufVxuXG5leHBvcnQgY2xhc3MgU2luZ2xlTm9kZUJvdW5kcyBpbXBsZW1lbnRzIEJvdW5kcyB7XG4gIHByaXZhdGUgcGFyZW50Tm9kZTogRWxlbWVudDtcbiAgcHJpdmF0ZSBub2RlOiBOb2RlO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmVudE5vZGU6IFNpbXBsZS5FbGVtZW50LCBub2RlOiBTaW1wbGUuTm9kZSkge1xuICAgIHRoaXMucGFyZW50Tm9kZSA9IHBhcmVudE5vZGUgYXMgRWxlbWVudDtcbiAgICB0aGlzLm5vZGUgPSBub2RlIGFzIE5vZGU7XG4gIH1cblxuICBwYXJlbnRFbGVtZW50KCkgeyByZXR1cm4gdGhpcy5wYXJlbnROb2RlOyB9XG4gIGZpcnN0Tm9kZSgpIHsgcmV0dXJuIHRoaXMubm9kZTsgfVxuICBsYXN0Tm9kZSgpIHsgcmV0dXJuIHRoaXMubm9kZTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYm91bmRzKHBhcmVudDogU2ltcGxlLkVsZW1lbnQsIGZpcnN0OiBTaW1wbGUuTm9kZSwgbGFzdDogU2ltcGxlLk5vZGUpOiBCb3VuZHMge1xuICByZXR1cm4gbmV3IENvbmNyZXRlQm91bmRzKHBhcmVudCwgZmlyc3QsIGxhc3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luZ2xlKHBhcmVudDogU2ltcGxlLkVsZW1lbnQsIG5vZGU6IFNpbXBsZS5Ob2RlKTogQm91bmRzIHtcbiAgcmV0dXJuIG5ldyBTaW5nbGVOb2RlQm91bmRzKHBhcmVudCwgbm9kZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlKGJvdW5kczogQm91bmRzLCByZWZlcmVuY2U6IE9wdGlvbjxTaW1wbGUuTm9kZT4pIHtcbiAgbGV0IHBhcmVudCA9IGJvdW5kcy5wYXJlbnRFbGVtZW50KCk7XG4gIGxldCBmaXJzdCA9IGJvdW5kcy5maXJzdE5vZGUoKTtcbiAgbGV0IGxhc3QgPSBib3VuZHMubGFzdE5vZGUoKTtcblxuICBsZXQgbm9kZTogT3B0aW9uPFNpbXBsZS5Ob2RlPiA9IGZpcnN0O1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgbGV0IG5leHQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgcmVmZXJlbmNlKTtcbiAgICBpZiAobm9kZSA9PT0gbGFzdCkgcmV0dXJuIG5leHQ7XG4gICAgbm9kZSA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyKGJvdW5kczogQm91bmRzKTogT3B0aW9uPFNpbXBsZS5Ob2RlPiB7XG4gIGxldCBwYXJlbnQgPSBib3VuZHMucGFyZW50RWxlbWVudCgpO1xuICBsZXQgZmlyc3QgPSBib3VuZHMuZmlyc3ROb2RlKCk7XG4gIGxldCBsYXN0ID0gYm91bmRzLmxhc3ROb2RlKCk7XG5cbiAgbGV0IG5vZGU6IE9wdGlvbjxTaW1wbGUuTm9kZT4gPSBmaXJzdDtcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGxldCBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgaWYgKG5vZGUgPT09IGxhc3QpIHJldHVybiBuZXh0O1xuICAgIG5vZGUgPSBuZXh0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iXX0=","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { SingleNodeBounds, single, clear } from './bounds';\nexport function isSafeString(value) {\n    return !!value && typeof value['toHTML'] === 'function';\n}\nexport function isNode(value) {\n    return value !== null && typeof value === 'object' && typeof value['nodeType'] === 'number';\n}\nexport function isString(value) {\n    return typeof value === 'string';\n}\n\nvar Upsert = function Upsert(bounds) {\n    _classCallCheck(this, Upsert);\n\n    this.bounds = bounds;\n};\n\nexport default Upsert;\nexport function cautiousInsert(dom, cursor, value) {\n    if (isString(value)) {\n        return TextUpsert.insert(dom, cursor, value);\n    }\n    if (isSafeString(value)) {\n        return SafeStringUpsert.insert(dom, cursor, value);\n    }\n    if (isNode(value)) {\n        return NodeUpsert.insert(dom, cursor, value);\n    }\n}\nexport function trustingInsert(dom, cursor, value) {\n    if (isString(value)) {\n        return HTMLUpsert.insert(dom, cursor, value);\n    }\n    if (isNode(value)) {\n        return NodeUpsert.insert(dom, cursor, value);\n    }\n}\n\nvar TextUpsert = function (_Upsert) {\n    _inherits(TextUpsert, _Upsert);\n\n    TextUpsert.insert = function insert(dom, cursor, value) {\n        var textNode = dom.createTextNode(value);\n        dom.insertBefore(cursor.element, textNode, cursor.nextSibling);\n        var bounds = new SingleNodeBounds(cursor.element, textNode);\n        return new TextUpsert(bounds, textNode);\n    };\n\n    function TextUpsert(bounds, textNode) {\n        _classCallCheck(this, TextUpsert);\n\n        var _this = _possibleConstructorReturn(this, _Upsert.call(this, bounds));\n\n        _this.textNode = textNode;\n        return _this;\n    }\n\n    TextUpsert.prototype.update = function update(_dom, value) {\n        if (isString(value)) {\n            var textNode = this.textNode;\n\n            textNode.nodeValue = value;\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    return TextUpsert;\n}(Upsert);\n\nvar HTMLUpsert = function (_Upsert2) {\n    _inherits(HTMLUpsert, _Upsert2);\n\n    function HTMLUpsert() {\n        _classCallCheck(this, HTMLUpsert);\n\n        return _possibleConstructorReturn(this, _Upsert2.apply(this, arguments));\n    }\n\n    HTMLUpsert.insert = function insert(dom, cursor, value) {\n        var bounds = dom.insertHTMLBefore(cursor.element, value, cursor.nextSibling);\n        return new HTMLUpsert(bounds);\n    };\n\n    HTMLUpsert.prototype.update = function update(dom, value) {\n        if (isString(value)) {\n            var bounds = this.bounds;\n\n            var parentElement = bounds.parentElement();\n            var nextSibling = clear(bounds);\n            this.bounds = dom.insertHTMLBefore(parentElement, nextSibling, value);\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    return HTMLUpsert;\n}(Upsert);\n\nvar SafeStringUpsert = function (_Upsert3) {\n    _inherits(SafeStringUpsert, _Upsert3);\n\n    function SafeStringUpsert(bounds, lastStringValue) {\n        _classCallCheck(this, SafeStringUpsert);\n\n        var _this3 = _possibleConstructorReturn(this, _Upsert3.call(this, bounds));\n\n        _this3.lastStringValue = lastStringValue;\n        return _this3;\n    }\n\n    SafeStringUpsert.insert = function insert(dom, cursor, value) {\n        var stringValue = value.toHTML();\n        var bounds = dom.insertHTMLBefore(cursor.element, stringValue, cursor.nextSibling);\n        return new SafeStringUpsert(bounds, stringValue);\n    };\n\n    SafeStringUpsert.prototype.update = function update(dom, value) {\n        if (isSafeString(value)) {\n            var stringValue = value.toHTML();\n            if (stringValue !== this.lastStringValue) {\n                var bounds = this.bounds;\n\n                var parentElement = bounds.parentElement();\n                var nextSibling = clear(bounds);\n                this.bounds = dom.insertHTMLBefore(parentElement, nextSibling, stringValue);\n                this.lastStringValue = stringValue;\n            }\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    return SafeStringUpsert;\n}(Upsert);\n\nvar NodeUpsert = function (_Upsert4) {\n    _inherits(NodeUpsert, _Upsert4);\n\n    function NodeUpsert() {\n        _classCallCheck(this, NodeUpsert);\n\n        return _possibleConstructorReturn(this, _Upsert4.apply(this, arguments));\n    }\n\n    NodeUpsert.insert = function insert(dom, cursor, node) {\n        dom.insertBefore(cursor.element, node, cursor.nextSibling);\n        return new NodeUpsert(single(cursor.element, node));\n    };\n\n    NodeUpsert.prototype.update = function update(dom, value) {\n        if (isNode(value)) {\n            var bounds = this.bounds;\n\n            var parentElement = bounds.parentElement();\n            var nextSibling = clear(bounds);\n            this.bounds = dom.insertNodeBefore(parentElement, value, nextSibling);\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    return NodeUpsert;\n}(Upsert);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar COMPONENT_DEFINITION_BRAND = 'COMPONENT DEFINITION [id=e59c754e-61eb-4392-8c4a-2c0ac72bfcd4]';\nexport function isComponentDefinition(obj) {\n    return typeof obj === 'object' && obj && obj[COMPONENT_DEFINITION_BRAND];\n}\nexport var ComponentDefinition = function ComponentDefinition(name, manager, ComponentClass) {\n    _classCallCheck(this, ComponentDefinition);\n\n    this[COMPONENT_DEFINITION_BRAND] = true;\n    this.name = name;\n    this.manager = manager;\n    this.ComponentClass = ComponentClass;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { clear } from './bounds';\nimport { Stack } from '@glimmer/util';\nimport { SimpleElementOperations } from './compiled/opcodes/dom';\n\nvar First = function () {\n    function First(node) {\n        _classCallCheck(this, First);\n\n        this.node = node;\n    }\n\n    First.prototype.firstNode = function firstNode() {\n        return this.node;\n    };\n\n    return First;\n}();\n\nvar Last = function () {\n    function Last(node) {\n        _classCallCheck(this, Last);\n\n        this.node = node;\n    }\n\n    Last.prototype.lastNode = function lastNode() {\n        return this.node;\n    };\n\n    return Last;\n}();\n\nexport var Fragment = function () {\n    function Fragment(bounds) {\n        _classCallCheck(this, Fragment);\n\n        this.bounds = bounds;\n    }\n\n    Fragment.prototype.parentElement = function parentElement() {\n        return this.bounds.parentElement();\n    };\n\n    Fragment.prototype.firstNode = function firstNode() {\n        return this.bounds.firstNode();\n    };\n\n    Fragment.prototype.lastNode = function lastNode() {\n        return this.bounds.lastNode();\n    };\n\n    Fragment.prototype.update = function update(bounds) {\n        this.bounds = bounds;\n    };\n\n    return Fragment;\n}();\nexport var ElementStack = function () {\n    function ElementStack(env, parentNode, nextSibling) {\n        _classCallCheck(this, ElementStack);\n\n        this.constructing = null;\n        this.operations = null;\n        this.elementStack = new Stack();\n        this.nextSiblingStack = new Stack();\n        this.blockStack = new Stack();\n        this.env = env;\n        this.dom = env.getAppendOperations();\n        this.updateOperations = env.getDOM();\n        this.element = parentNode;\n        this.nextSibling = nextSibling;\n        this.defaultOperations = new SimpleElementOperations(env);\n        this.pushSimpleBlock();\n        this.elementStack.push(this.element);\n        this.nextSiblingStack.push(this.nextSibling);\n    }\n\n    ElementStack.forInitialRender = function forInitialRender(env, parentNode, nextSibling) {\n        return new ElementStack(env, parentNode, nextSibling);\n    };\n\n    ElementStack.resume = function resume(env, tracker, nextSibling) {\n        var parentNode = tracker.parentElement();\n        var stack = new ElementStack(env, parentNode, nextSibling);\n        stack.pushBlockTracker(tracker);\n        return stack;\n    };\n\n    ElementStack.prototype.expectConstructing = function expectConstructing(method) {\n        return this.constructing;\n    };\n\n    ElementStack.prototype.expectOperations = function expectOperations(method) {\n        return this.operations;\n    };\n\n    ElementStack.prototype.block = function block() {\n        return this.blockStack.current;\n    };\n\n    ElementStack.prototype.popElement = function popElement() {\n        var elementStack = this.elementStack,\n            nextSiblingStack = this.nextSiblingStack;\n\n        var topElement = elementStack.pop();\n        nextSiblingStack.pop();\n        // LOGGER.debug(`-> element stack ${this.elementStack.toArray().map(e => e.tagName).join(', ')}`);\n        this.element = elementStack.current;\n        this.nextSibling = nextSiblingStack.current;\n        return topElement;\n    };\n\n    ElementStack.prototype.pushSimpleBlock = function pushSimpleBlock() {\n        var tracker = new SimpleBlockTracker(this.element);\n        this.pushBlockTracker(tracker);\n        return tracker;\n    };\n\n    ElementStack.prototype.pushUpdatableBlock = function pushUpdatableBlock() {\n        var tracker = new UpdatableBlockTracker(this.element);\n        this.pushBlockTracker(tracker);\n        return tracker;\n    };\n\n    ElementStack.prototype.pushBlockTracker = function pushBlockTracker(tracker) {\n        var isRemote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        var current = this.blockStack.current;\n        if (current !== null) {\n            current.newDestroyable(tracker);\n            if (!isRemote) {\n                current.newBounds(tracker);\n            }\n        }\n        this.blockStack.push(tracker);\n        return tracker;\n    };\n\n    ElementStack.prototype.pushBlockList = function pushBlockList(list) {\n        var tracker = new BlockListTracker(this.element, list);\n        var current = this.blockStack.current;\n        if (current !== null) {\n            current.newDestroyable(tracker);\n            current.newBounds(tracker);\n        }\n        this.blockStack.push(tracker);\n        return tracker;\n    };\n\n    ElementStack.prototype.popBlock = function popBlock() {\n        this.block().finalize(this);\n        return this.blockStack.pop();\n    };\n\n    ElementStack.prototype.openElement = function openElement(tag) {\n        var operations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultOperations;\n\n        var element = this.dom.createElement(tag, this.element);\n        this.constructing = element;\n        this.operations = operations;\n        return element;\n    };\n\n    ElementStack.prototype.flushElement = function flushElement() {\n        var parent = this.element;\n        var element = this.constructing;\n        this.dom.insertBefore(parent, element, this.nextSibling);\n        this.constructing = null;\n        this.operations = null;\n        this.pushElement(element);\n        this.block().openElement(element);\n    };\n\n    ElementStack.prototype.pushRemoteElement = function pushRemoteElement(element) {\n        var nextSibling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        this.pushElement(element, nextSibling);\n        var tracker = new RemoteBlockTracker(element);\n        this.pushBlockTracker(tracker, true);\n    };\n\n    ElementStack.prototype.popRemoteElement = function popRemoteElement() {\n        this.popBlock();\n        this.popElement();\n    };\n\n    ElementStack.prototype.pushElement = function pushElement(element) {\n        var nextSibling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        this.element = element;\n        this.elementStack.push(element);\n        // LOGGER.debug(`-> element stack ${this.elementStack.toArray().map(e => e.tagName).join(', ')}`);\n        this.nextSibling = nextSibling;\n        this.nextSiblingStack.push(nextSibling);\n    };\n\n    ElementStack.prototype.newDestroyable = function newDestroyable(d) {\n        this.block().newDestroyable(d);\n    };\n\n    ElementStack.prototype.newBounds = function newBounds(bounds) {\n        this.block().newBounds(bounds);\n    };\n\n    ElementStack.prototype.appendText = function appendText(string) {\n        var dom = this.dom;\n\n        var text = dom.createTextNode(string);\n        dom.insertBefore(this.element, text, this.nextSibling);\n        this.block().newNode(text);\n        return text;\n    };\n\n    ElementStack.prototype.appendComment = function appendComment(string) {\n        var dom = this.dom;\n\n        var comment = dom.createComment(string);\n        dom.insertBefore(this.element, comment, this.nextSibling);\n        this.block().newNode(comment);\n        return comment;\n    };\n\n    ElementStack.prototype.setStaticAttribute = function setStaticAttribute(name, value) {\n        this.expectOperations('setStaticAttribute').addStaticAttribute(this.expectConstructing('setStaticAttribute'), name, value);\n    };\n\n    ElementStack.prototype.setStaticAttributeNS = function setStaticAttributeNS(namespace, name, value) {\n        this.expectOperations('setStaticAttributeNS').addStaticAttributeNS(this.expectConstructing('setStaticAttributeNS'), namespace, name, value);\n    };\n\n    ElementStack.prototype.setDynamicAttribute = function setDynamicAttribute(name, reference, isTrusting) {\n        this.expectOperations('setDynamicAttribute').addDynamicAttribute(this.expectConstructing('setDynamicAttribute'), name, reference, isTrusting);\n    };\n\n    ElementStack.prototype.setDynamicAttributeNS = function setDynamicAttributeNS(namespace, name, reference, isTrusting) {\n        this.expectOperations('setDynamicAttributeNS').addDynamicAttributeNS(this.expectConstructing('setDynamicAttributeNS'), namespace, name, reference, isTrusting);\n    };\n\n    ElementStack.prototype.closeElement = function closeElement() {\n        this.block().closeElement();\n        this.popElement();\n    };\n\n    return ElementStack;\n}();\nexport var SimpleBlockTracker = function () {\n    function SimpleBlockTracker(parent) {\n        _classCallCheck(this, SimpleBlockTracker);\n\n        this.parent = parent;\n        this.first = null;\n        this.last = null;\n        this.destroyables = null;\n        this.nesting = 0;\n    }\n\n    SimpleBlockTracker.prototype.destroy = function destroy() {\n        var destroyables = this.destroyables;\n\n        if (destroyables && destroyables.length) {\n            for (var i = 0; i < destroyables.length; i++) {\n                destroyables[i].destroy();\n            }\n        }\n    };\n\n    SimpleBlockTracker.prototype.parentElement = function parentElement() {\n        return this.parent;\n    };\n\n    SimpleBlockTracker.prototype.firstNode = function firstNode() {\n        return this.first && this.first.firstNode();\n    };\n\n    SimpleBlockTracker.prototype.lastNode = function lastNode() {\n        return this.last && this.last.lastNode();\n    };\n\n    SimpleBlockTracker.prototype.openElement = function openElement(element) {\n        this.newNode(element);\n        this.nesting++;\n    };\n\n    SimpleBlockTracker.prototype.closeElement = function closeElement() {\n        this.nesting--;\n    };\n\n    SimpleBlockTracker.prototype.newNode = function newNode(node) {\n        if (this.nesting !== 0) return;\n        if (!this.first) {\n            this.first = new First(node);\n        }\n        this.last = new Last(node);\n    };\n\n    SimpleBlockTracker.prototype.newBounds = function newBounds(bounds) {\n        if (this.nesting !== 0) return;\n        if (!this.first) {\n            this.first = bounds;\n        }\n        this.last = bounds;\n    };\n\n    SimpleBlockTracker.prototype.newDestroyable = function newDestroyable(d) {\n        this.destroyables = this.destroyables || [];\n        this.destroyables.push(d);\n    };\n\n    SimpleBlockTracker.prototype.finalize = function finalize(stack) {\n        if (!this.first) {\n            stack.appendComment('');\n        }\n    };\n\n    return SimpleBlockTracker;\n}();\n\nvar RemoteBlockTracker = function (_SimpleBlockTracker) {\n    _inherits(RemoteBlockTracker, _SimpleBlockTracker);\n\n    function RemoteBlockTracker() {\n        _classCallCheck(this, RemoteBlockTracker);\n\n        return _possibleConstructorReturn(this, _SimpleBlockTracker.apply(this, arguments));\n    }\n\n    RemoteBlockTracker.prototype.destroy = function destroy() {\n        _SimpleBlockTracker.prototype.destroy.call(this);\n        clear(this);\n    };\n\n    return RemoteBlockTracker;\n}(SimpleBlockTracker);\n\nexport var UpdatableBlockTracker = function (_SimpleBlockTracker2) {\n    _inherits(UpdatableBlockTracker, _SimpleBlockTracker2);\n\n    function UpdatableBlockTracker() {\n        _classCallCheck(this, UpdatableBlockTracker);\n\n        return _possibleConstructorReturn(this, _SimpleBlockTracker2.apply(this, arguments));\n    }\n\n    UpdatableBlockTracker.prototype.reset = function reset(env) {\n        var destroyables = this.destroyables;\n\n        if (destroyables && destroyables.length) {\n            for (var i = 0; i < destroyables.length; i++) {\n                env.didDestroy(destroyables[i]);\n            }\n        }\n        var nextSibling = clear(this);\n        this.first = null;\n        this.last = null;\n        this.destroyables = null;\n        this.nesting = 0;\n        return nextSibling;\n    };\n\n    return UpdatableBlockTracker;\n}(SimpleBlockTracker);\n\nvar BlockListTracker = function () {\n    function BlockListTracker(parent, boundList) {\n        _classCallCheck(this, BlockListTracker);\n\n        this.parent = parent;\n        this.boundList = boundList;\n        this.parent = parent;\n        this.boundList = boundList;\n    }\n\n    BlockListTracker.prototype.destroy = function destroy() {\n        this.boundList.forEachNode(function (node) {\n            return node.destroy();\n        });\n    };\n\n    BlockListTracker.prototype.parentElement = function parentElement() {\n        return this.parent;\n    };\n\n    BlockListTracker.prototype.firstNode = function firstNode() {\n        var head = this.boundList.head();\n        return head && head.firstNode();\n    };\n\n    BlockListTracker.prototype.lastNode = function lastNode() {\n        var tail = this.boundList.tail();\n        return tail && tail.lastNode();\n    };\n\n    BlockListTracker.prototype.openElement = function openElement(_element) {};\n\n    BlockListTracker.prototype.closeElement = function closeElement() {};\n\n    BlockListTracker.prototype.newNode = function newNode(_node) {};\n\n    BlockListTracker.prototype.newBounds = function newBounds(_bounds) {};\n\n    BlockListTracker.prototype.newDestroyable = function newDestroyable(_d) {};\n\n    BlockListTracker.prototype.finalize = function finalize(_stack) {};\n\n    return BlockListTracker;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { isSafeString, isNode, isString, cautiousInsert, trustingInsert } from '../../upsert';\nimport { isComponentDefinition } from '../../component/interfaces';\nimport { UpdatingOpcode } from '../../opcodes';\nimport { ReferenceCache, UpdatableTag, isModified, isConst, map } from '@glimmer/reference';\nimport { Cursor, clear } from '../../bounds';\nimport { Fragment } from '../../builder';\nimport { ConditionalReference } from '../../references';\nimport { APPEND_OPCODES } from '../../opcodes';\nAPPEND_OPCODES.add(25 /* DynamicContent */, function (vm, _ref) {\n    var append = _ref.op1;\n\n    var opcode = vm.constants.getOther(append);\n    opcode.evaluate(vm);\n});\nfunction isEmpty(value) {\n    return value === null || value === undefined || typeof value['toString'] !== 'function';\n}\nexport function normalizeTextValue(value) {\n    if (isEmpty(value)) {\n        return '';\n    }\n    return String(value);\n}\nfunction normalizeTrustedValue(value) {\n    if (isEmpty(value)) {\n        return '';\n    }\n    if (isString(value)) {\n        return value;\n    }\n    if (isSafeString(value)) {\n        return value.toHTML();\n    }\n    if (isNode(value)) {\n        return value;\n    }\n    return String(value);\n}\nfunction normalizeValue(value) {\n    if (isEmpty(value)) {\n        return '';\n    }\n    if (isString(value)) {\n        return value;\n    }\n    if (isSafeString(value) || isNode(value)) {\n        return value;\n    }\n    return String(value);\n}\nexport var AppendDynamicOpcode = function () {\n    function AppendDynamicOpcode() {\n        _classCallCheck(this, AppendDynamicOpcode);\n    }\n\n    AppendDynamicOpcode.prototype.evaluate = function evaluate(vm) {\n        var reference = vm.stack.pop();\n        var normalized = this.normalize(reference);\n        var value = void 0,\n            cache = void 0;\n        if (isConst(reference)) {\n            value = normalized.value();\n        } else {\n            cache = new ReferenceCache(normalized);\n            value = cache.peek();\n        }\n        var stack = vm.elements();\n        var upsert = this.insert(vm.env.getAppendOperations(), stack, value);\n        var bounds = new Fragment(upsert.bounds);\n        stack.newBounds(bounds);\n        if (cache /* i.e. !isConst(reference) */) {\n                vm.updateWith(this.updateWith(vm, reference, cache, bounds, upsert));\n            }\n    };\n\n    return AppendDynamicOpcode;\n}();\nexport var GuardedAppendOpcode = function (_AppendDynamicOpcode) {\n    _inherits(GuardedAppendOpcode, _AppendDynamicOpcode);\n\n    function GuardedAppendOpcode() {\n        _classCallCheck(this, GuardedAppendOpcode);\n\n        var _this = _possibleConstructorReturn(this, _AppendDynamicOpcode.call(this));\n\n        _this.start = -1;\n        return _this;\n    }\n\n    GuardedAppendOpcode.prototype.evaluate = function evaluate(vm) {\n        if (this.deopted) {\n            vm.goto(this.start);\n        } else {\n            var value = vm.stack.pop();\n            if (isComponentDefinition(value)) {\n                this.deopt(vm.env);\n                vm.goto(this.start);\n            } else {\n                vm.stack.push(value);\n                _AppendDynamicOpcode.prototype.evaluate.call(this, vm);\n            }\n        }\n    };\n\n    GuardedAppendOpcode.prototype.deopt = function deopt(_env) {\n        // At compile time, we determined that this append callsite might refer\n        // to a local variable/property lookup that resolves to a component\n        // definition at runtime.\n        //\n        // We could have eagerly compiled this callsite into something like this:\n        //\n        //   {{#if (is-component-definition foo)}}\n        //     {{component foo}}\n        //   {{else}}\n        //     {{foo}}\n        //   {{/if}}\n        //\n        // However, in practice, there might be a large amout of these callsites\n        // and most of them would resolve to a simple value lookup. Therefore, we\n        // tried to be optimistic and assumed that the callsite will resolve to\n        // appending a simple value.\n        //\n        // However, we have reached here because at runtime, the guard conditional\n        // have detected that this callsite is indeed referring to a component\n        // definition object. Since this is likely going to be true for other\n        // instances of the same callsite, it is now appropiate to deopt into the\n        // expanded version that handles both cases. The compilation would look\n        // like this:\n        //\n        //               PutValue(expression)\n        //               Test(is-component-definition)\n        //               Enter(BEGIN, END)\n        //   BEGIN:      Noop\n        //               JumpUnless(VALUE)\n        //               PutDynamicComponentDefinitionOpcode\n        //               OpenComponent\n        //               CloseComponent\n        //               Jump(END)\n        //   VALUE:      Noop\n        //               OptimizedAppend\n        //   END:        Noop\n        //               Exit\n        //\n        // Keep in mind that even if we *don't* reach here at initial render time,\n        // it is still possible (although quite rare) that the simple value we\n        // encounter during initial render could later change into a component\n        // definition object at update time. That is handled by the \"lazy deopt\"\n        // code on the update side (scroll down for the next big block of comment).\n        return null;\n    };\n\n    _createClass(GuardedAppendOpcode, [{\n        key: 'deopted',\n        get: function () {\n            return this.start === -1;\n        }\n    }]);\n\n    return GuardedAppendOpcode;\n}(AppendDynamicOpcode);\n\nvar IsComponentDefinitionReference = function (_ConditionalReference) {\n    _inherits(IsComponentDefinitionReference, _ConditionalReference);\n\n    function IsComponentDefinitionReference() {\n        _classCallCheck(this, IsComponentDefinitionReference);\n\n        return _possibleConstructorReturn(this, _ConditionalReference.apply(this, arguments));\n    }\n\n    IsComponentDefinitionReference.create = function create(inner) {\n        return new IsComponentDefinitionReference(inner);\n    };\n\n    IsComponentDefinitionReference.prototype.toBool = function toBool(value) {\n        return isComponentDefinition(value);\n    };\n\n    return IsComponentDefinitionReference;\n}(ConditionalReference);\n\nvar UpdateOpcode = function (_UpdatingOpcode) {\n    _inherits(UpdateOpcode, _UpdatingOpcode);\n\n    function UpdateOpcode(cache, bounds, upsert) {\n        _classCallCheck(this, UpdateOpcode);\n\n        var _this3 = _possibleConstructorReturn(this, _UpdatingOpcode.call(this));\n\n        _this3.cache = cache;\n        _this3.bounds = bounds;\n        _this3.upsert = upsert;\n        _this3.tag = cache.tag;\n        return _this3;\n    }\n\n    UpdateOpcode.prototype.evaluate = function evaluate(vm) {\n        var value = this.cache.revalidate();\n        if (isModified(value)) {\n            var bounds = this.bounds,\n                upsert = this.upsert;\n            var dom = vm.dom;\n\n            if (!this.upsert.update(dom, value)) {\n                var cursor = new Cursor(bounds.parentElement(), clear(bounds));\n                upsert = this.upsert = this.insert(vm.env.getAppendOperations(), cursor, value);\n            }\n            bounds.update(upsert.bounds);\n        }\n    };\n\n    return UpdateOpcode;\n}(UpdatingOpcode);\n\nvar GuardedUpdateOpcode = function (_UpdateOpcode) {\n    _inherits(GuardedUpdateOpcode, _UpdateOpcode);\n\n    function GuardedUpdateOpcode(reference, cache, bounds, upsert) {\n        _classCallCheck(this, GuardedUpdateOpcode);\n\n        var _this4 = _possibleConstructorReturn(this, _UpdateOpcode.call(this, cache, bounds, upsert));\n\n        _this4.reference = reference;\n        _this4.deopted = null;\n        _this4.tag = _this4._tag = UpdatableTag.create(_this4.tag);\n        return _this4;\n    }\n\n    GuardedUpdateOpcode.prototype.evaluate = function evaluate(vm) {\n        if (this.deopted) {\n            vm.evaluateOpcode(this.deopted);\n        } else {\n            if (isComponentDefinition(this.reference.value())) {\n                this.lazyDeopt(vm);\n            } else {\n                _UpdateOpcode.prototype.evaluate.call(this, vm);\n            }\n        }\n    };\n\n    GuardedUpdateOpcode.prototype.lazyDeopt = function lazyDeopt(_vm) {\n        // Durign initial render, we know that the reference does not contain a\n        // component definition, so we optimistically assumed that this append\n        // is just a normal append. However, at update time, we discovered that\n        // the reference has switched into containing a component definition, so\n        // we need to do a \"lazy deopt\", simulating what would have happened if\n        // we had decided to perform the deopt in the first place during initial\n        // render.\n        //\n        // More concretely, we would have expanded the curly into a if/else, and\n        // based on whether the value is a component definition or not, we would\n        // have entered either the dynamic component branch or the simple value\n        // branch.\n        //\n        // Since we rendered a simple value during initial render (and all the\n        // updates up until this point), we need to pretend that the result is\n        // produced by the \"VALUE\" branch of the deopted append opcode:\n        //\n        //   Try(BEGIN, END)\n        //     Assert(IsComponentDefinition, expected=false)\n        //     OptimizedUpdate\n        //\n        // In this case, because the reference has switched from being a simple\n        // value into a component definition, what would have happened is that\n        // the assert would throw, causing the Try opcode to teardown the bounds\n        // and rerun the original append opcode.\n        //\n        // Since the Try opcode would have nuked the updating opcodes anyway, we\n        // wouldn't have to worry about simulating those. All we have to do is to\n        // execute the Try opcode and immediately throw.\n        return null;\n    };\n\n    return GuardedUpdateOpcode;\n}(UpdateOpcode);\n\nexport var OptimizedCautiousAppendOpcode = function (_AppendDynamicOpcode2) {\n    _inherits(OptimizedCautiousAppendOpcode, _AppendDynamicOpcode2);\n\n    function OptimizedCautiousAppendOpcode() {\n        _classCallCheck(this, OptimizedCautiousAppendOpcode);\n\n        var _this5 = _possibleConstructorReturn(this, _AppendDynamicOpcode2.apply(this, arguments));\n\n        _this5.type = 'optimized-cautious-append';\n        return _this5;\n    }\n\n    OptimizedCautiousAppendOpcode.prototype.normalize = function normalize(reference) {\n        return map(reference, normalizeValue);\n    };\n\n    OptimizedCautiousAppendOpcode.prototype.insert = function insert(dom, cursor, value) {\n        return cautiousInsert(dom, cursor, value);\n    };\n\n    OptimizedCautiousAppendOpcode.prototype.updateWith = function updateWith(_vm, _reference, cache, bounds, upsert) {\n        return new OptimizedCautiousUpdateOpcode(cache, bounds, upsert);\n    };\n\n    return OptimizedCautiousAppendOpcode;\n}(AppendDynamicOpcode);\n\nvar OptimizedCautiousUpdateOpcode = function (_UpdateOpcode2) {\n    _inherits(OptimizedCautiousUpdateOpcode, _UpdateOpcode2);\n\n    function OptimizedCautiousUpdateOpcode() {\n        _classCallCheck(this, OptimizedCautiousUpdateOpcode);\n\n        var _this6 = _possibleConstructorReturn(this, _UpdateOpcode2.apply(this, arguments));\n\n        _this6.type = 'optimized-cautious-update';\n        return _this6;\n    }\n\n    OptimizedCautiousUpdateOpcode.prototype.insert = function insert(dom, cursor, value) {\n        return cautiousInsert(dom, cursor, value);\n    };\n\n    return OptimizedCautiousUpdateOpcode;\n}(UpdateOpcode);\n\nexport var GuardedCautiousAppendOpcode = function (_GuardedAppendOpcode) {\n    _inherits(GuardedCautiousAppendOpcode, _GuardedAppendOpcode);\n\n    function GuardedCautiousAppendOpcode() {\n        _classCallCheck(this, GuardedCautiousAppendOpcode);\n\n        var _this7 = _possibleConstructorReturn(this, _GuardedAppendOpcode.apply(this, arguments));\n\n        _this7.type = 'guarded-cautious-append';\n        _this7.AppendOpcode = OptimizedCautiousAppendOpcode;\n        return _this7;\n    }\n\n    GuardedCautiousAppendOpcode.prototype.normalize = function normalize(reference) {\n        return map(reference, normalizeValue);\n    };\n\n    GuardedCautiousAppendOpcode.prototype.insert = function insert(dom, cursor, value) {\n        return cautiousInsert(dom, cursor, value);\n    };\n\n    GuardedCautiousAppendOpcode.prototype.updateWith = function updateWith(_vm, reference, cache, bounds, upsert) {\n        return new GuardedCautiousUpdateOpcode(reference, cache, bounds, upsert);\n    };\n\n    return GuardedCautiousAppendOpcode;\n}(GuardedAppendOpcode);\n\nvar GuardedCautiousUpdateOpcode = function (_GuardedUpdateOpcode) {\n    _inherits(GuardedCautiousUpdateOpcode, _GuardedUpdateOpcode);\n\n    function GuardedCautiousUpdateOpcode() {\n        _classCallCheck(this, GuardedCautiousUpdateOpcode);\n\n        var _this8 = _possibleConstructorReturn(this, _GuardedUpdateOpcode.apply(this, arguments));\n\n        _this8.type = 'guarded-cautious-update';\n        return _this8;\n    }\n\n    GuardedCautiousUpdateOpcode.prototype.insert = function insert(dom, cursor, value) {\n        return cautiousInsert(dom, cursor, value);\n    };\n\n    return GuardedCautiousUpdateOpcode;\n}(GuardedUpdateOpcode);\n\nexport var OptimizedTrustingAppendOpcode = function (_AppendDynamicOpcode3) {\n    _inherits(OptimizedTrustingAppendOpcode, _AppendDynamicOpcode3);\n\n    function OptimizedTrustingAppendOpcode() {\n        _classCallCheck(this, OptimizedTrustingAppendOpcode);\n\n        var _this9 = _possibleConstructorReturn(this, _AppendDynamicOpcode3.apply(this, arguments));\n\n        _this9.type = 'optimized-trusting-append';\n        return _this9;\n    }\n\n    OptimizedTrustingAppendOpcode.prototype.normalize = function normalize(reference) {\n        return map(reference, normalizeTrustedValue);\n    };\n\n    OptimizedTrustingAppendOpcode.prototype.insert = function insert(dom, cursor, value) {\n        return trustingInsert(dom, cursor, value);\n    };\n\n    OptimizedTrustingAppendOpcode.prototype.updateWith = function updateWith(_vm, _reference, cache, bounds, upsert) {\n        return new OptimizedTrustingUpdateOpcode(cache, bounds, upsert);\n    };\n\n    return OptimizedTrustingAppendOpcode;\n}(AppendDynamicOpcode);\n\nvar OptimizedTrustingUpdateOpcode = function (_UpdateOpcode3) {\n    _inherits(OptimizedTrustingUpdateOpcode, _UpdateOpcode3);\n\n    function OptimizedTrustingUpdateOpcode() {\n        _classCallCheck(this, OptimizedTrustingUpdateOpcode);\n\n        var _this10 = _possibleConstructorReturn(this, _UpdateOpcode3.apply(this, arguments));\n\n        _this10.type = 'optimized-trusting-update';\n        return _this10;\n    }\n\n    OptimizedTrustingUpdateOpcode.prototype.insert = function insert(dom, cursor, value) {\n        return trustingInsert(dom, cursor, value);\n    };\n\n    return OptimizedTrustingUpdateOpcode;\n}(UpdateOpcode);\n\nexport var GuardedTrustingAppendOpcode = function (_GuardedAppendOpcode2) {\n    _inherits(GuardedTrustingAppendOpcode, _GuardedAppendOpcode2);\n\n    function GuardedTrustingAppendOpcode() {\n        _classCallCheck(this, GuardedTrustingAppendOpcode);\n\n        var _this11 = _possibleConstructorReturn(this, _GuardedAppendOpcode2.apply(this, arguments));\n\n        _this11.type = 'guarded-trusting-append';\n        _this11.AppendOpcode = OptimizedTrustingAppendOpcode;\n        return _this11;\n    }\n\n    GuardedTrustingAppendOpcode.prototype.normalize = function normalize(reference) {\n        return map(reference, normalizeTrustedValue);\n    };\n\n    GuardedTrustingAppendOpcode.prototype.insert = function insert(dom, cursor, value) {\n        return trustingInsert(dom, cursor, value);\n    };\n\n    GuardedTrustingAppendOpcode.prototype.updateWith = function updateWith(_vm, reference, cache, bounds, upsert) {\n        return new GuardedTrustingUpdateOpcode(reference, cache, bounds, upsert);\n    };\n\n    return GuardedTrustingAppendOpcode;\n}(GuardedAppendOpcode);\n\nvar GuardedTrustingUpdateOpcode = function (_GuardedUpdateOpcode2) {\n    _inherits(GuardedTrustingUpdateOpcode, _GuardedUpdateOpcode2);\n\n    function GuardedTrustingUpdateOpcode() {\n        _classCallCheck(this, GuardedTrustingUpdateOpcode);\n\n        var _this12 = _possibleConstructorReturn(this, _GuardedUpdateOpcode2.apply(this, arguments));\n\n        _this12.type = 'trusting-update';\n        return _this12;\n    }\n\n    GuardedTrustingUpdateOpcode.prototype.insert = function insert(dom, cursor, value) {\n        return trustingInsert(dom, cursor, value);\n    };\n\n    return GuardedTrustingUpdateOpcode;\n}(GuardedUpdateOpcode);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { APPEND_OPCODES } from '../../opcodes';\nimport { dict } from '@glimmer/util';\n/* tslint:disable */\nfunction debugCallback(context, get) {\n    console.info('Use `context`, and `get(<path>)` to debug this template.');\n    // for example...\n    context === get('this');\n    debugger;\n}\n/* tslint:enable */\nvar callback = debugCallback;\n// For testing purposes\nexport function setDebuggerCallback(cb) {\n    callback = cb;\n}\nexport function resetDebuggerCallback() {\n    callback = debugCallback;\n}\n\nvar ScopeInspector = function () {\n    function ScopeInspector(scope, symbols, evalInfo) {\n        var _this = this;\n\n        _classCallCheck(this, ScopeInspector);\n\n        this.scope = scope;\n        this.locals = dict();\n        evalInfo.forEach(function (slot) {\n            var name = symbols[slot - 1];\n            var ref = scope.getSymbol(slot);\n            _this.locals[name] = ref;\n        });\n    }\n\n    ScopeInspector.prototype.get = function get(path) {\n        var scope = this.scope,\n            locals = this.locals;\n\n        var parts = path.split('.');\n\n        var _path$split = path.split('.'),\n            head = _path$split[0],\n            tail = _path$split.slice(1);\n\n        var evalScope = scope.getEvalScope();\n        var ref = void 0;\n        if (head === 'this') {\n            ref = scope.getSelf();\n        } else if (locals[head]) {\n            ref = locals[head];\n        } else if (head.indexOf('@') === 0 && evalScope[head]) {\n            ref = evalScope[head];\n        } else {\n            ref = this.scope.getSelf();\n            tail = parts;\n        }\n        return tail.reduce(function (ref, part) {\n            return ref.get(part);\n        }, ref);\n    };\n\n    return ScopeInspector;\n}();\n\nAPPEND_OPCODES.add(71 /* Debugger */, function (vm, _ref) {\n    var _symbols = _ref.op1,\n        _evalInfo = _ref.op2;\n\n    var symbols = vm.constants.getOther(_symbols);\n    var evalInfo = vm.constants.getArray(_evalInfo);\n    var inspector = new ScopeInspector(vm.scope(), symbols, evalInfo);\n    callback(vm.getSelf().value(), function (path) {\n        return inspector.get(path).value();\n    });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWdnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZWJ1Z2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLEFBQU8sU0FBRSxBQUFjLEFBQU0sc0JBQU0sQUFBZSxBQUFDO0FBRW5ELEFBQU8sU0FBRSxBQUFJLEFBQUUsWUFBTSxBQUFlLEFBQUM7QUFNckMsQUFBb0I7QUFDcEIsdUJBQXVCLEFBQWUsU0FBRSxBQUFhO0FBQ25ELEFBQU8sWUFBQyxBQUFJLEtBQUMsQUFBMEQsQUFBQyxBQUFDO0FBRXpFLEFBQWlCO0FBQ2pCLEFBQU8sZ0JBQUssQUFBRyxJQUFDLEFBQU0sQUFBQyxBQUFDO0FBRXhCLEFBQVEsQUFBQyxBQUNYO0FBQUM7QUFDRCxBQUFtQjtBQUVuQixJQUFJLEFBQVEsV0FBRyxBQUFhLEFBQUM7QUFFN0IsQUFBdUI7QUFDdkIsQUFBTSxvQ0FBOEIsQUFBaUI7QUFDbkQsQUFBUSxlQUFHLEFBQUUsQUFBQyxBQUNoQjtBQUFDO0FBRUQsQUFBTTtBQUNKLEFBQVEsZUFBRyxBQUFhLEFBQUMsQUFDM0I7QUFBQyxBQUVEOzs7QUFHRSw0QkFBb0IsQUFBWSxPQUFFLEFBQWlCLFNBQUUsQUFBa0I7Ozs7O0FBQW5ELGFBQUssUUFBTCxBQUFLLEFBQU87QUFGeEIsYUFBTSxTQUFHLEFBQUksQUFBa0MsQUFBQztBQUd0RCxBQUFRLGlCQUFDLEFBQU8sUUFBQyxBQUFJO0FBQ25CLGdCQUFJLEFBQUksT0FBRyxBQUFPLFFBQUMsQUFBSSxPQUFHLEFBQUMsQUFBQyxBQUFDO0FBQzdCLGdCQUFJLEFBQUcsTUFBSSxBQUFLLE1BQUMsQUFBUyxVQUFDLEFBQUksQUFBQyxBQUFDO0FBQ2pDLEFBQUksa0JBQUMsQUFBTSxPQUFDLEFBQUksQUFBQyxRQUFHLEFBQUcsQUFBQyxBQUMxQjtBQUFDLEFBQUMsQUFBQyxBQUNMO0FBQUM7OzZCQUVELEFBQUcsbUJBQUMsQUFBWTtBQUNkLEFBQUksWUFBRSxBQUFLLFFBQWEsQUFBSSxBQUFDO1lBQWhCLEFBQU0sQUFBRTs7QUFDckIsWUFBSSxBQUFLLFFBQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLEFBQUMsQUFBQyxBQUM1QixBQUFJOzswQkFBa0IsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLEFBQUMsQUFBQztZQUFqQyxBQUFJLEFBQUU7WUFBRyxBQUFJLEFBQUM7O0FBRW5CLFlBQUksQUFBUyxZQUFHLEFBQUssTUFBQyxBQUFZLEFBQUcsQUFBQztBQUN0QyxZQUFJLEFBQW1DLEFBQUM7QUFFeEMsQUFBRSxBQUFDLFlBQUMsQUFBSSxTQUFLLEFBQU0sQUFBQyxRQUFDLEFBQUM7QUFDcEIsQUFBRyxrQkFBRyxBQUFLLE1BQUMsQUFBTyxBQUFFLEFBQUMsQUFDeEI7QUFBQyxBQUFDLEFBQUksbUJBQUssQUFBTSxPQUFDLEFBQUksQUFBQyxBQUFDLE9BQUMsQUFBQztBQUN4QixBQUFHLGtCQUFHLEFBQU0sT0FBQyxBQUFJLEFBQUMsQUFBQyxBQUNyQjtBQUFDLEFBQUMsQUFBSSxTQUZDLEFBQUUsQUFBQyxVQUVDLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBRyxBQUFDLFNBQUssQUFBQyxLQUFJLEFBQVMsVUFBQyxBQUFJLEFBQUMsQUFBQyxPQUFDLEFBQUM7QUFDdEQsQUFBRyxrQkFBRyxBQUFTLFVBQUMsQUFBSSxBQUFtQyxBQUFDLEFBQzFEO0FBQUMsQUFBQyxBQUFJLFNBRkMsQUFBRSxBQUFDLE1BRUgsQUFBQztBQUNOLEFBQUcsa0JBQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFPLEFBQUUsQUFBQztBQUMzQixBQUFJLG1CQUFHLEFBQUssQUFBQyxBQUNmO0FBQUM7QUFFRCxBQUFNLG9CQUFNLEFBQU0saUJBQUUsQUFBRyxLQUFFLEFBQUk7QUFBVixtQkFBZSxBQUFHLElBQUMsQUFBRyxJQUFDLEFBQUksQUFBQztTQUF4QyxBQUFJLEVBQXNDLEFBQUcsQUFBQyxBQUFDLEFBQ3hEO0FBQUMsQUFDRjs7Ozs7QUFFRCxBQUFjLGVBQUMsQUFBRyxJQUFDLEdBQVcsZ0JBQUUsVUFBQyxBQUFFLEFBQUU7UUFBTyxBQUFRLGdCQUFiLEFBQUc7UUFBaUIsQUFBUyxBQUFFLGlCQUFoQixBQUFHOztBQUN2RCxRQUFJLEFBQU8sVUFBRyxBQUFFLEdBQUMsQUFBUyxVQUFDLEFBQVEsU0FBVyxBQUFRLEFBQUMsQUFBQztBQUN4RCxRQUFJLEFBQVEsV0FBRyxBQUFFLEdBQUMsQUFBUyxVQUFDLEFBQVEsU0FBQyxBQUFTLEFBQUMsQUFBQztBQUNoRCxRQUFJLEFBQVMsWUFBRyxJQUFJLEFBQWMsZUFBQyxBQUFFLEdBQUMsQUFBSyxBQUFFLFNBQUUsQUFBTyxTQUFFLEFBQVEsQUFBQyxBQUFDO0FBQ2xFLEFBQVEsYUFBQyxBQUFFLEdBQUMsQUFBTyxBQUFFLFVBQUMsQUFBSyxBQUFFO0FBQUUsQUFBSSxlQUFJLEFBQVMsVUFBQyxBQUFHLElBQUMsQUFBSSxBQUFDLE1BQUMsQUFBSyxBQUFFLEFBQUMsQUFBQyxBQUN0RTs7QUFBQyxBQUFDLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY29wZSB9IGZyb20gJy4uLy4uL2Vudmlyb25tZW50JztcbmltcG9ydCB7IFZlcnNpb25lZFBhdGhSZWZlcmVuY2UgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgQVBQRU5EX09QQ09ERVMsIE9wIH0gZnJvbSAnLi4vLi4vb3Bjb2Rlcyc7XG5pbXBvcnQgeyBPcGFxdWUgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGRpY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxuZXhwb3J0IHR5cGUgRGVidWdHZXQgPSAoKHBhdGg6IHN0cmluZykgPT4gT3BhcXVlKTtcblxuZXhwb3J0IHR5cGUgRGVidWdDYWxsYmFjayA9ICgoY29udGV4dDogT3BhcXVlLCBnZXQ6IERlYnVnR2V0KSA9PiB2b2lkKTtcblxuLyogdHNsaW50OmRpc2FibGUgKi9cbmZ1bmN0aW9uIGRlYnVnQ2FsbGJhY2soY29udGV4dDogT3BhcXVlLCBnZXQ6IERlYnVnR2V0KTogdm9pZCB7XG4gIGNvbnNvbGUuaW5mbygnVXNlIGBjb250ZXh0YCwgYW5kIGBnZXQoPHBhdGg+KWAgdG8gZGVidWcgdGhpcyB0ZW1wbGF0ZS4nKTtcblxuICAvLyBmb3IgZXhhbXBsZS4uLlxuICBjb250ZXh0ID09PSBnZXQoJ3RoaXMnKTtcblxuICBkZWJ1Z2dlcjtcbn1cbi8qIHRzbGludDplbmFibGUgKi9cblxubGV0IGNhbGxiYWNrID0gZGVidWdDYWxsYmFjaztcblxuLy8gRm9yIHRlc3RpbmcgcHVycG9zZXNcbmV4cG9ydCBmdW5jdGlvbiBzZXREZWJ1Z2dlckNhbGxiYWNrKGNiOiBEZWJ1Z0NhbGxiYWNrKSB7XG4gIGNhbGxiYWNrID0gY2I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldERlYnVnZ2VyQ2FsbGJhY2soKSB7XG4gIGNhbGxiYWNrID0gZGVidWdDYWxsYmFjaztcbn1cblxuY2xhc3MgU2NvcGVJbnNwZWN0b3Ige1xuICBwcml2YXRlIGxvY2FscyA9IGRpY3Q8VmVyc2lvbmVkUGF0aFJlZmVyZW5jZTxPcGFxdWU+PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2NvcGU6IFNjb3BlLCBzeW1ib2xzOiBzdHJpbmdbXSwgZXZhbEluZm86IG51bWJlcltdKSB7XG4gICAgZXZhbEluZm8uZm9yRWFjaChzbG90ID0+IHtcbiAgICAgIGxldCBuYW1lID0gc3ltYm9sc1tzbG90IC0gMV07XG4gICAgICBsZXQgcmVmICA9IHNjb3BlLmdldFN5bWJvbChzbG90KTtcbiAgICAgIHRoaXMubG9jYWxzW25hbWVdID0gcmVmO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0KHBhdGg6IHN0cmluZyk6IFZlcnNpb25lZFBhdGhSZWZlcmVuY2U8T3BhcXVlPiB7XG4gICAgbGV0IHsgc2NvcGUsIGxvY2FscyB9ID0gdGhpcztcbiAgICBsZXQgcGFydHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgbGV0IFtoZWFkLCAuLi50YWlsXSA9IHBhdGguc3BsaXQoJy4nKTtcblxuICAgIGxldCBldmFsU2NvcGUgPSBzY29wZS5nZXRFdmFsU2NvcGUoKSE7XG4gICAgbGV0IHJlZjogVmVyc2lvbmVkUGF0aFJlZmVyZW5jZTxPcGFxdWU+O1xuXG4gICAgaWYgKGhlYWQgPT09ICd0aGlzJykge1xuICAgICAgcmVmID0gc2NvcGUuZ2V0U2VsZigpO1xuICAgIH0gZWxzZSBpZiAobG9jYWxzW2hlYWRdKSB7XG4gICAgICByZWYgPSBsb2NhbHNbaGVhZF07XG4gICAgfSBlbHNlIGlmIChoZWFkLmluZGV4T2YoJ0AnKSA9PT0gMCAmJiBldmFsU2NvcGVbaGVhZF0pIHtcbiAgICAgIHJlZiA9IGV2YWxTY29wZVtoZWFkXSBhcyBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlPE9wYXF1ZT47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZiA9IHRoaXMuc2NvcGUuZ2V0U2VsZigpO1xuICAgICAgdGFpbCA9IHBhcnRzO1xuICAgIH1cblxuICAgIHJldHVybiB0YWlsLnJlZHVjZSgocmVmLCBwYXJ0KSA9PiByZWYuZ2V0KHBhcnQpLCByZWYpO1xuICB9XG59XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5EZWJ1Z2dlciwgKHZtLCB7IG9wMTogX3N5bWJvbHMsIG9wMjogX2V2YWxJbmZvIH0pID0+IHtcbiAgbGV0IHN5bWJvbHMgPSB2bS5jb25zdGFudHMuZ2V0T3RoZXI8c3RyaW5nW10+KF9zeW1ib2xzKTtcbiAgbGV0IGV2YWxJbmZvID0gdm0uY29uc3RhbnRzLmdldEFycmF5KF9ldmFsSW5mbyk7XG4gIGxldCBpbnNwZWN0b3IgPSBuZXcgU2NvcGVJbnNwZWN0b3Iodm0uc2NvcGUoKSwgc3ltYm9scywgZXZhbEluZm8pO1xuICBjYWxsYmFjayh2bS5nZXRTZWxmKCkudmFsdWUoKSwgcGF0aCA9PiBpbnNwZWN0b3IuZ2V0KHBhdGgpLnZhbHVlKCkpO1xufSk7XG4iXX0=","import { APPEND_OPCODES } from '../../opcodes';\nAPPEND_OPCODES.add(69 /* GetPartialTemplate */, function (vm) {\n    var stack = vm.stack;\n    var definition = stack.pop();\n    stack.push(definition.value().template.asPartial());\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGlhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBhcnRpYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsQUFBTyxTQUFFLEFBQWMsQUFBTSxzQkFBTSxBQUFlLEFBQUM7QUFHbkQsQUFBYyxlQUFDLEFBQUcsSUFBQyxHQUFxQiwwQkFBRSxBQUFFO0FBQzFDLFFBQUksQUFBSyxRQUFHLEFBQUUsR0FBQyxBQUFLLEFBQUM7QUFDckIsUUFBSSxBQUFVLGFBQUcsQUFBSyxNQUFDLEFBQUcsQUFBMkQsQUFBQztBQUN0RixBQUFLLFVBQUMsQUFBSSxLQUFDLEFBQVUsV0FBQyxBQUFLLEFBQUUsUUFBQyxBQUFRLFNBQUMsQUFBUyxBQUFFLEFBQUMsQUFBQyxBQUN0RDtBQUFDLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlTWV0YSB9IGZyb20gJ0BnbGltbWVyL3dpcmUtZm9ybWF0JztcbmltcG9ydCB7IFZlcnNpb25lZFBhdGhSZWZlcmVuY2UgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgQVBQRU5EX09QQ09ERVMsIE9wIH0gZnJvbSAnLi4vLi4vb3Bjb2Rlcyc7XG5pbXBvcnQgeyBQYXJ0aWFsRGVmaW5pdGlvbiB9IGZyb20gJy4uLy4uL3BhcnRpYWwnO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuR2V0UGFydGlhbFRlbXBsYXRlLCB2bSA9PiB7XG4gIGxldCBzdGFjayA9IHZtLnN0YWNrO1xuICBsZXQgZGVmaW5pdGlvbiA9IHN0YWNrLnBvcDxWZXJzaW9uZWRQYXRoUmVmZXJlbmNlPFBhcnRpYWxEZWZpbml0aW9uPFRlbXBsYXRlTWV0YT4+PigpO1xuICBzdGFjay5wdXNoKGRlZmluaXRpb24udmFsdWUoKS50ZW1wbGF0ZS5hc1BhcnRpYWwoKSk7XG59KTtcbiJdfQ==","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { ReferenceIterator } from '@glimmer/reference';\nimport { APPEND_OPCODES } from '../../opcodes';\n\nvar IterablePresenceReference = function () {\n    function IterablePresenceReference(artifacts) {\n        _classCallCheck(this, IterablePresenceReference);\n\n        this.tag = artifacts.tag;\n        this.artifacts = artifacts;\n    }\n\n    IterablePresenceReference.prototype.value = function value() {\n        return !this.artifacts.isEmpty();\n    };\n\n    return IterablePresenceReference;\n}();\n\nAPPEND_OPCODES.add(53 /* PutIterator */, function (vm) {\n    var stack = vm.stack;\n    var listRef = stack.pop();\n    var key = stack.pop();\n    var iterable = vm.env.iterableFor(listRef, key.value());\n    var iterator = new ReferenceIterator(iterable);\n    stack.push(iterator);\n    stack.push(new IterablePresenceReference(iterator.artifacts));\n});\nAPPEND_OPCODES.add(51 /* EnterList */, function (vm, _ref) {\n    var start = _ref.op1;\n\n    vm.enterList(start);\n});\nAPPEND_OPCODES.add(52 /* ExitList */, function (vm) {\n    return vm.exitList();\n});\nAPPEND_OPCODES.add(54 /* Iterate */, function (vm, _ref2) {\n    var breaks = _ref2.op1;\n\n    var stack = vm.stack;\n    var item = stack.peek().next();\n    if (item) {\n        var tryOpcode = vm.iterate(item.memo, item.value);\n        vm.enterItem(item.key, tryOpcode);\n    } else {\n        vm.goto(breaks);\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLEFBQU8sU0FBa0IsQUFBaUIsQUFBOEMseUJBQU0sQUFBb0IsQUFBQztBQUNuSCxBQUFPLFNBQUUsQUFBYyxBQUFNLHNCQUFNLEFBQWUsQUFBQyxBQUVuRDs7O0FBSUUsdUNBQVksQUFBNkI7OztBQUN2QyxBQUFJLGFBQUMsQUFBRyxNQUFHLEFBQVMsVUFBQyxBQUFHLEFBQUM7QUFDekIsQUFBSSxhQUFDLEFBQVMsWUFBRyxBQUFTLEFBQUMsQUFDN0I7QUFBQzs7d0NBRUQsQUFBSztBQUNILEFBQU0sZUFBQyxDQUFDLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBTyxBQUFFLEFBQUMsQUFDbkM7QUFBQyxBQUNGOzs7OztBQUVELEFBQWMsZUFBQyxBQUFHLElBQUMsR0FBYyxtQkFBRSxBQUFFO0FBQ25DLFFBQUksQUFBSyxRQUFHLEFBQUUsR0FBQyxBQUFLLEFBQUM7QUFDckIsUUFBSSxBQUFPLFVBQUcsQUFBSyxNQUFDLEFBQUcsQUFBa0MsQUFBQztBQUMxRCxRQUFJLEFBQUcsTUFBRyxBQUFLLE1BQUMsQUFBRyxBQUFrQyxBQUFDO0FBQ3RELFFBQUksQUFBUSxXQUFHLEFBQUUsR0FBQyxBQUFHLElBQUMsQUFBVyxZQUFDLEFBQU8sU0FBRSxBQUFHLElBQUMsQUFBSyxBQUFFLEFBQUMsQUFBQztBQUN4RCxRQUFJLEFBQVEsV0FBRyxJQUFJLEFBQWlCLGtCQUFDLEFBQVEsQUFBQyxBQUFDO0FBRS9DLEFBQUssVUFBQyxBQUFJLEtBQUMsQUFBUSxBQUFDLEFBQUM7QUFDckIsQUFBSyxVQUFDLEFBQUksS0FBQyxJQUFJLEFBQXlCLDBCQUFDLEFBQVEsU0FBQyxBQUFTLEFBQUMsQUFBQyxBQUFDLEFBQ2hFO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBYyxlQUFDLEFBQUcsSUFBQyxHQUFZLGlCQUFFLFVBQUMsQUFBRSxBQUFFO1FBQU8sQUFBSyxBQUFFLGFBQVosQUFBRzs7QUFDekMsQUFBRSxPQUFDLEFBQVMsVUFBQyxBQUFLLEFBQUMsQUFBQyxBQUN0QjtBQUFDLEFBQUMsQUFBQztBQUVILEFBQWMsZUFBQyxBQUFHLElBQUMsR0FBVztBQUFFLEFBQUUsV0FBSSxBQUFFLEdBQUMsQUFBUSxBQUFFLEFBQUMsQUFBQzs7QUFFckQsQUFBYyxlQUFDLEFBQUcsSUFBQyxHQUFVLGVBQUUsVUFBQyxBQUFFLEFBQUU7UUFBTyxBQUFNLEFBQUUsZUFBYixBQUFHOztBQUN2QyxRQUFJLEFBQUssUUFBRyxBQUFFLEdBQUMsQUFBSyxBQUFDO0FBQ3JCLFFBQUksQUFBSSxPQUFHLEFBQUssTUFBQyxBQUFJLEFBQXFCLE9BQUMsQUFBSSxBQUFFLEFBQUM7QUFFbEQsQUFBRSxBQUFDLFFBQUMsQUFBSSxBQUFDLE1BQUMsQUFBQztBQUNULFlBQUksQUFBUyxZQUFHLEFBQUUsR0FBQyxBQUFPLFFBQUMsQUFBSSxLQUFDLEFBQUksTUFBRSxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQUM7QUFDbEQsQUFBRSxXQUFDLEFBQVMsVUFBQyxBQUFJLEtBQUMsQUFBRyxLQUFFLEFBQVMsQUFBQyxBQUFDLEFBQ3BDO0FBQUMsQUFBQyxBQUFJLFdBQUMsQUFBQztBQUNOLEFBQUUsV0FBQyxBQUFJLEtBQUMsQUFBTSxBQUFDLEFBQUMsQUFDbEI7QUFBQyxBQUNIO0FBQUMsQUFBQyxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBUYWcsIFJlZmVyZW5jZSwgUmVmZXJlbmNlSXRlcmF0b3IsIEl0ZXJhdGlvbkFydGlmYWN0cywgVmVyc2lvbmVkUGF0aFJlZmVyZW5jZSB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBBUFBFTkRfT1BDT0RFUywgT3AgfSBmcm9tICcuLi8uLi9vcGNvZGVzJztcblxuY2xhc3MgSXRlcmFibGVQcmVzZW5jZVJlZmVyZW5jZSBpbXBsZW1lbnRzIFJlZmVyZW5jZTxib29sZWFuPiB7XG4gIHB1YmxpYyB0YWc6IFRhZztcbiAgcHJpdmF0ZSBhcnRpZmFjdHM6IEl0ZXJhdGlvbkFydGlmYWN0cztcblxuICBjb25zdHJ1Y3RvcihhcnRpZmFjdHM6IEl0ZXJhdGlvbkFydGlmYWN0cykge1xuICAgIHRoaXMudGFnID0gYXJ0aWZhY3RzLnRhZztcbiAgICB0aGlzLmFydGlmYWN0cyA9IGFydGlmYWN0cztcbiAgfVxuXG4gIHZhbHVlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5hcnRpZmFjdHMuaXNFbXB0eSgpO1xuICB9XG59XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5QdXRJdGVyYXRvciwgdm0gPT4ge1xuICBsZXQgc3RhY2sgPSB2bS5zdGFjaztcbiAgbGV0IGxpc3RSZWYgPSBzdGFjay5wb3A8VmVyc2lvbmVkUGF0aFJlZmVyZW5jZTxPcGFxdWU+PigpO1xuICBsZXQga2V5ID0gc3RhY2sucG9wPFZlcnNpb25lZFBhdGhSZWZlcmVuY2U8c3RyaW5nPj4oKTtcbiAgbGV0IGl0ZXJhYmxlID0gdm0uZW52Lml0ZXJhYmxlRm9yKGxpc3RSZWYsIGtleS52YWx1ZSgpKTtcbiAgbGV0IGl0ZXJhdG9yID0gbmV3IFJlZmVyZW5jZUl0ZXJhdG9yKGl0ZXJhYmxlKTtcblxuICBzdGFjay5wdXNoKGl0ZXJhdG9yKTtcbiAgc3RhY2sucHVzaChuZXcgSXRlcmFibGVQcmVzZW5jZVJlZmVyZW5jZShpdGVyYXRvci5hcnRpZmFjdHMpKTtcbn0pO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuRW50ZXJMaXN0LCAodm0sIHsgb3AxOiBzdGFydCB9KSA9PiB7XG4gIHZtLmVudGVyTGlzdChzdGFydCk7XG59KTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLkV4aXRMaXN0LCB2bSA9PiB2bS5leGl0TGlzdCgpKTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLkl0ZXJhdGUsICh2bSwgeyBvcDE6IGJyZWFrcyB9KSA9PiB7XG4gIGxldCBzdGFjayA9IHZtLnN0YWNrO1xuICBsZXQgaXRlbSA9IHN0YWNrLnBlZWs8UmVmZXJlbmNlSXRlcmF0b3I+KCkubmV4dCgpO1xuXG4gIGlmIChpdGVtKSB7XG4gICAgbGV0IHRyeU9wY29kZSA9IHZtLml0ZXJhdGUoaXRlbS5tZW1vLCBpdGVtLnZhbHVlKTtcbiAgICB2bS5lbnRlckl0ZW0oaXRlbS5rZXksIHRyeU9wY29kZSk7XG4gIH0gZWxzZSB7XG4gICAgdm0uZ290byhicmVha3MpO1xuICB9XG59KTtcbiJdfQ==","export var Opcodes;\n(function (Opcodes) {\n    // Statements\n    Opcodes[Opcodes[\"Text\"] = 0] = \"Text\";\n    Opcodes[Opcodes[\"Append\"] = 1] = \"Append\";\n    Opcodes[Opcodes[\"Comment\"] = 2] = \"Comment\";\n    Opcodes[Opcodes[\"Modifier\"] = 3] = \"Modifier\";\n    Opcodes[Opcodes[\"Block\"] = 4] = \"Block\";\n    Opcodes[Opcodes[\"Component\"] = 5] = \"Component\";\n    Opcodes[Opcodes[\"OpenElement\"] = 6] = \"OpenElement\";\n    Opcodes[Opcodes[\"FlushElement\"] = 7] = \"FlushElement\";\n    Opcodes[Opcodes[\"CloseElement\"] = 8] = \"CloseElement\";\n    Opcodes[Opcodes[\"StaticAttr\"] = 9] = \"StaticAttr\";\n    Opcodes[Opcodes[\"DynamicAttr\"] = 10] = \"DynamicAttr\";\n    Opcodes[Opcodes[\"Yield\"] = 11] = \"Yield\";\n    Opcodes[Opcodes[\"Partial\"] = 12] = \"Partial\";\n    Opcodes[Opcodes[\"DynamicArg\"] = 13] = \"DynamicArg\";\n    Opcodes[Opcodes[\"StaticArg\"] = 14] = \"StaticArg\";\n    Opcodes[Opcodes[\"TrustingAttr\"] = 15] = \"TrustingAttr\";\n    Opcodes[Opcodes[\"Debugger\"] = 16] = \"Debugger\";\n    Opcodes[Opcodes[\"ClientSideStatement\"] = 17] = \"ClientSideStatement\";\n    // Expressions\n    Opcodes[Opcodes[\"Unknown\"] = 18] = \"Unknown\";\n    Opcodes[Opcodes[\"Get\"] = 19] = \"Get\";\n    Opcodes[Opcodes[\"MaybeLocal\"] = 20] = \"MaybeLocal\";\n    Opcodes[Opcodes[\"FixThisBeforeWeMerge\"] = 21] = \"FixThisBeforeWeMerge\";\n    Opcodes[Opcodes[\"HasBlock\"] = 22] = \"HasBlock\";\n    Opcodes[Opcodes[\"HasBlockParams\"] = 23] = \"HasBlockParams\";\n    Opcodes[Opcodes[\"Undefined\"] = 24] = \"Undefined\";\n    Opcodes[Opcodes[\"Helper\"] = 25] = \"Helper\";\n    Opcodes[Opcodes[\"Concat\"] = 26] = \"Concat\";\n    Opcodes[Opcodes[\"ClientSideExpression\"] = 27] = \"ClientSideExpression\";\n})(Opcodes || (Opcodes = {}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Bjb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm9wY29kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBTSxPQUFOLElBQVksQUFrQ1g7QUFsQ0QsV0FBWSxBQUFPO0FBQ2pCLEFBQWE7QUFDYixtQ0FBSTtBQUNKLHFDQUFNO0FBQ04sc0NBQU87QUFDUCx1Q0FBUTtBQUNSLG9DQUFLO0FBQ0wsd0NBQVM7QUFDVCwwQ0FBVztBQUNYLDJDQUFZO0FBQ1osMkNBQVk7QUFDWix5Q0FBVTtBQUNWLDJDQUFXO0FBQ1gscUNBQUs7QUFDTCx1Q0FBTztBQUVQLDBDQUFVO0FBQ1YseUNBQVM7QUFDVCw0Q0FBWTtBQUNaLHdDQUFRO0FBQ1IsbURBQW1CO0FBRW5CLEFBQWM7QUFFZCx1Q0FBTztBQUNQLG1DQUFHO0FBQ0gsMENBQVU7QUFDVixvREFBb0I7QUFDcEIsd0NBQVE7QUFDUiw4Q0FBYztBQUNkLHlDQUFTO0FBQ1Qsc0NBQU07QUFDTixzQ0FBTTtBQUNOLG9EQUFvQixBQUN0QjtBQUFDLEdBbENXLEFBQU8sWUFBUCxBQUFPLFVBa0NsQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIE9wY29kZXMge1xuICAvLyBTdGF0ZW1lbnRzXG4gIFRleHQsXG4gIEFwcGVuZCxcbiAgQ29tbWVudCxcbiAgTW9kaWZpZXIsXG4gIEJsb2NrLFxuICBDb21wb25lbnQsXG4gIE9wZW5FbGVtZW50LFxuICBGbHVzaEVsZW1lbnQsXG4gIENsb3NlRWxlbWVudCxcbiAgU3RhdGljQXR0cixcbiAgRHluYW1pY0F0dHIsXG4gIFlpZWxkLFxuICBQYXJ0aWFsLFxuXG4gIER5bmFtaWNBcmcsXG4gIFN0YXRpY0FyZyxcbiAgVHJ1c3RpbmdBdHRyLFxuICBEZWJ1Z2dlcixcbiAgQ2xpZW50U2lkZVN0YXRlbWVudCxcblxuICAvLyBFeHByZXNzaW9uc1xuXG4gIFVua25vd24sXG4gIEdldCxcbiAgTWF5YmVMb2NhbCxcbiAgRml4VGhpc0JlZm9yZVdlTWVyZ2UsXG4gIEhhc0Jsb2NrLFxuICBIYXNCbG9ja1BhcmFtcyxcbiAgVW5kZWZpbmVkLFxuICBIZWxwZXIsXG4gIENvbmNhdCxcbiAgQ2xpZW50U2lkZUV4cHJlc3Npb25cbn1cbiJdfQ==","import { Opcodes } from './lib/opcodes';\nexport { Opcodes as Ops } from './lib/opcodes';\nexport function is(variant) {\n    return function (value) {\n        return value[0] === variant;\n    };\n}\nexport var Expressions;\n(function (Expressions) {\n    Expressions.isUnknown = is(Opcodes.Unknown);\n    Expressions.isGet = is(Opcodes.Get);\n    Expressions.isConcat = is(Opcodes.Concat);\n    Expressions.isHelper = is(Opcodes.Helper);\n    Expressions.isHasBlock = is(Opcodes.HasBlock);\n    Expressions.isHasBlockParams = is(Opcodes.HasBlockParams);\n    Expressions.isUndefined = is(Opcodes.Undefined);\n    Expressions.isClientSide = is(Opcodes.ClientSideExpression);\n    function isPrimitiveValue(value) {\n        if (value === null) {\n            return true;\n        }\n        return typeof value !== 'object';\n    }\n    Expressions.isPrimitiveValue = isPrimitiveValue;\n})(Expressions || (Expressions = {}));\nexport var Statements;\n(function (Statements) {\n    Statements.isText = is(Opcodes.Text);\n    Statements.isAppend = is(Opcodes.Append);\n    Statements.isComment = is(Opcodes.Comment);\n    Statements.isModifier = is(Opcodes.Modifier);\n    Statements.isBlock = is(Opcodes.Block);\n    Statements.isComponent = is(Opcodes.Component);\n    Statements.isOpenElement = is(Opcodes.OpenElement);\n    Statements.isFlushElement = is(Opcodes.FlushElement);\n    Statements.isCloseElement = is(Opcodes.CloseElement);\n    Statements.isStaticAttr = is(Opcodes.StaticAttr);\n    Statements.isDynamicAttr = is(Opcodes.DynamicAttr);\n    Statements.isYield = is(Opcodes.Yield);\n    Statements.isPartial = is(Opcodes.Partial);\n    Statements.isDynamicArg = is(Opcodes.DynamicArg);\n    Statements.isStaticArg = is(Opcodes.StaticArg);\n    Statements.isTrustingAttr = is(Opcodes.TrustingAttr);\n    Statements.isDebugger = is(Opcodes.Debugger);\n    Statements.isClientSide = is(Opcodes.ClientSideStatement);\n    function isAttribute(val) {\n        return val[0] === Opcodes.StaticAttr || val[0] === Opcodes.DynamicAttr || val[0] === Opcodes.TrustingAttr;\n    }\n    Statements.isAttribute = isAttribute;\n    function isArgument(val) {\n        return val[0] === Opcodes.StaticArg || val[0] === Opcodes.DynamicArg;\n    }\n    Statements.isArgument = isArgument;\n    function isParameter(val) {\n        return isAttribute(val) || isArgument(val);\n    }\n    Statements.isParameter = isParameter;\n    function getParameterName(s) {\n        return s[1];\n    }\n    Statements.getParameterName = getParameterName;\n    function isInElementHead(val) {\n        return isParameter(val) || Statements.isModifier(val) || Statements.isFlushElement(val);\n    }\n    Statements.isInElementHead = isInElementHead;\n})(Statements || (Statements = {}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nexport var CompiledStaticTemplate = function CompiledStaticTemplate(start, end) {\n    _classCallCheck(this, CompiledStaticTemplate);\n\n    this.start = start;\n    this.end = end;\n};\nexport var CompiledDynamicTemplate = function CompiledDynamicTemplate(start, end, symbolTable) {\n    _classCallCheck(this, CompiledDynamicTemplate);\n\n    this.start = start;\n    this.end = end;\n    this.symbolTable = symbolTable;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmxvY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBeUNBLEFBQU0sb0NBQ0osZ0NBQW1CLEFBQWEsT0FBUyxBQUFXOzs7QUFBakMsU0FBSyxRQUFMLEFBQUssQUFBUTtBQUFTLFNBQUcsTUFBSCxBQUFHLEFBQVEsQUFDcEQ7QUFBQyxBQUNGO0FBRUQsQUFBTSxxQ0FDSixpQ0FBbUIsQUFBYSxPQUFTLEFBQVcsS0FBUyxBQUFjOzs7QUFBeEQsU0FBSyxRQUFMLEFBQUssQUFBUTtBQUFTLFNBQUcsTUFBSCxBQUFHLEFBQVE7QUFBUyxTQUFXLGNBQVgsQUFBVyxBQUFHLEFBQzNFO0FBQUMsQUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN5bWJvbFRhYmxlLCBQcm9ncmFtU3ltYm9sVGFibGUsIEJsb2NrU3ltYm9sVGFibGUgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuLyoqXG4gKiBUaGUgdGVybSBcImJsb2NrXCIgaW4gdGhlIHJ1bnRpbWUgcmVmZXJzIHRvIGEgc2VjdGlvblxuICogb2YgY29kZSBpbiBhIEdsaW1tZXIgdGVtcGxhdGUuIFRoZSBtb3N0IGNvbW1vbiBraW5kc1xuICogb2YgYmxvY2tzIHRoYXQgeW91IHdpbGwgZW5jb3VudGVyIGFyZSBgUHJvZ3JhbWBzLCB3aGljaFxuICogcmVwcmVzZW50IHRoZSB0b3AtbGV2ZWwgb2YgYSBmaWxlLCBhbmQgYElubGluZUJsb2Nrc2AsXG4gKiB3aGljaCByZXByZXNlbnQgYmxvY2tzIGludGVyaW9yIHRvIGEgZmlsZS5cbiAqXG4gKiBBbGwgYmxvY2tzIHJlcHJlc2VudCBhIGxpc3Qgb2Ygc3RhdGVtZW50cy4gYElubGluZUJsb2NrYHNcbiAqIGFsc28gaGF2ZSBhIGxpc3Qgb2YgcG9zaXRpb25hbCBwYXJhbWV0ZXJzIChzb21ldGltZXNcbiAqIHJlZmVycmVkIHRvIGFzIFwiYmxvY2sgcGFyYW1zXCIpLiBgRnVuY3Rpb25CbG9ja2BzIGhhdmVcbiAqIGEgbGlzdCBvZiBuYW1lZCBwYXJhbWV0ZXJzIGFuZCBhIGxpc3Qgb2YgYmxvY2tcbiAqIHBhcmFtZXRlcnMuIFN5bnRhY3RpY2FsbHksIGBGdW5jdGlvbkJsb2NrYHMgcmVmZXIgdG9cbiAqIHRoZWlyIG5hbWVkIHBhcmFtZXRlcnMgdXNpbmcgYEBuYW1lYCBzeW50YXgsIGFuZFxuICogcmVmZXIgdG8gdGhlaXIgYmxvY2sgcGFyYW1ldGVycyB1c2luZyBge3t5aWVsZH19YCBhbmRcbiAqIGB7e2hhcy1ibG9ja319YCBzeW50YXguXG4gKlxuICogU2VtYW50aWNhbGx5LCBhIGBGdW5jdGlvbkJsb2NrYCBoYXMgYSBjbGVhbiB0b3AtbGV2ZWxcbiAqIHNjb3BlLiBJdCBhY2Nlc3NlcyBkYXRhIHRocm91Z2ggaXRzIGB0aGlzYCBjb250ZXh0LFxuICogYW5kIHRocm91Z2ggbmFtZWQgYXJndW1lbnRzIChgQG5hbWVgKSBhbmQgYmxvY2tcbiAqIGFyZ3VtZW50cy5cbiAqXG4gKiBTZW1hbnRpY2FsbHksIGFuIGBJbmxpbmVCbG9ja2AgaW5oZXJpdHMgaXRzIGxleGljYWxcbiAqIHNjb3BlIGZyb20gaXRzIGVudmlyb25tZW50LCBhbmQgbWF5IGJlIGludm9rZWQgd2l0aFxuICogb25lIG9yIG1vcmUgcG9zaXRpb25hbCBhcmd1bWVudHMuIFdoZW4gaW52b2tlZCB3aXRoXG4gKiBwb3NpdGlvbmFsIGFyZ3VtZW50cywgdGhlIG5hbWVzIG9mIHRob3NlIGFyZ3VtZW50c1xuICogYXJlIGF2YWlsYWJsZSBpbiB0aGUgYmxvY2ssIGFuZCBzaGFkb3cgaWRlbnRpY2FsIG5hbWVzXG4gKiBpbiB0aGUgcGFyZW50IHNjb3BlLlxuICpcbiAqIFRoZSBsaWZlY3ljbGUgb2YgYSBibG9jayBpbiB0aGUgcnVudGltZSBpczpcbiAqXG4gKiBGaXJzdCwgYSBibG9jayBjb21lcyBpbiBmcm9tIHRoZSB3aXJlIGZvcm1hdCBhcyBhc1xuICogYFdpcmVGb3JtYXQuU2VyaWFsaXplZEJsb2NrYC5cbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIE9wU2xpY2Uge1xuICBzdGFydDogbnVtYmVyO1xuICBlbmQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIENvbXBpbGVkU3RhdGljVGVtcGxhdGUgaW1wbGVtZW50cyBPcFNsaWNlIHtcbiAgY29uc3RydWN0b3IocHVibGljIHN0YXJ0OiBudW1iZXIsIHB1YmxpYyBlbmQ6IG51bWJlcikge1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21waWxlZER5bmFtaWNUZW1wbGF0ZTxTIGV4dGVuZHMgU3ltYm9sVGFibGU+IGltcGxlbWVudHMgT3BTbGljZSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzdGFydDogbnVtYmVyLCBwdWJsaWMgZW5kOiBudW1iZXIsIHB1YmxpYyBzeW1ib2xUYWJsZTogUykge1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIENvbXBpbGVkRHluYW1pY0Jsb2NrID0gQ29tcGlsZWREeW5hbWljVGVtcGxhdGU8QmxvY2tTeW1ib2xUYWJsZT47XG5leHBvcnQgdHlwZSBDb21waWxlZER5bmFtaWNQcm9ncmFtID0gQ29tcGlsZWREeW5hbWljVGVtcGxhdGU8UHJvZ3JhbVN5bWJvbFRhYmxlPjtcbiJdfQ==","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport * as content from './content';\nimport * as vm from './vm';\nimport { Register } from '../../opcodes';\nimport { Stack, dict, fillNulls, EMPTY_ARRAY } from '@glimmer/util';\nimport { ComponentBuilder } from '../../compiler';\nimport { RawInlineBlock } from '../../scanner';\nimport { InvokeDynamicLayout, expr } from '../../syntax/functions';\n\nvar Labels = function () {\n    function Labels() {\n        _classCallCheck(this, Labels);\n\n        this.labels = dict();\n        this.targets = [];\n    }\n\n    Labels.prototype.label = function label(name, index) {\n        this.labels[name] = index;\n    };\n\n    Labels.prototype.target = function target(at, Target, _target) {\n        this.targets.push({ at: at, Target: Target, target: _target });\n    };\n\n    Labels.prototype.patch = function patch(opcodes) {\n        for (var _ref of this.targets) {\n            var at = _ref.at;\n            var Target = _ref.Target;\n            var target = _ref.target;\n\n            opcodes.set(at, Target, this.labels[target]);\n        }\n    };\n\n    return Labels;\n}();\n\nvar BasicOpcodeBuilder = function () {\n    function BasicOpcodeBuilder(env, meta, program) {\n        _classCallCheck(this, BasicOpcodeBuilder);\n\n        this.env = env;\n        this.meta = meta;\n        this.program = program;\n        this.labelsStack = new Stack();\n        this.constants = env.constants;\n        this.start = program.next;\n    }\n\n    BasicOpcodeBuilder.prototype.upvars = function upvars(count) {\n        return fillNulls(count);\n    };\n\n    BasicOpcodeBuilder.prototype.reserve = function reserve(name) {\n        this.push(name, 0, 0, 0);\n    };\n\n    BasicOpcodeBuilder.prototype.push = function push(name) {\n        var op1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var op2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var op3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n        return this.program.push(name, op1, op2, op3);\n    };\n\n    BasicOpcodeBuilder.prototype.finalize = function finalize() {\n        return this.push(22 /* Return */);\n    };\n    // args\n\n\n    BasicOpcodeBuilder.prototype.pushArgs = function pushArgs(positional, synthetic) {\n        this.push(58 /* PushArgs */, positional, synthetic | 0);\n    };\n    // helpers\n\n\n    BasicOpcodeBuilder.prototype.startLabels = function startLabels() {\n        this.labelsStack.push(new Labels());\n    };\n\n    BasicOpcodeBuilder.prototype.stopLabels = function stopLabels() {\n        var label = this.labelsStack.pop();\n        label.patch(this.program);\n    };\n    // components\n\n\n    BasicOpcodeBuilder.prototype.pushComponentManager = function pushComponentManager(definition) {\n        this.push(55 /* PushComponentManager */, this.other(definition));\n    };\n\n    BasicOpcodeBuilder.prototype.pushDynamicComponentManager = function pushDynamicComponentManager() {\n        this.push(56 /* PushDynamicComponentManager */);\n    };\n\n    BasicOpcodeBuilder.prototype.initializeComponentState = function initializeComponentState() {\n        this.push(57 /* InitializeComponentState */);\n    };\n\n    BasicOpcodeBuilder.prototype.prepareArgs = function prepareArgs(state) {\n        this.push(59 /* PrepareArgs */, state);\n    };\n\n    BasicOpcodeBuilder.prototype.createComponent = function createComponent(state, hasDefault, hasInverse) {\n        var flag = hasDefault | 0 | (hasInverse | 0) << 1;\n        this.push(60 /* CreateComponent */, flag, state);\n    };\n\n    BasicOpcodeBuilder.prototype.registerComponentDestructor = function registerComponentDestructor(state) {\n        this.push(61 /* RegisterComponentDestructor */, state);\n    };\n\n    BasicOpcodeBuilder.prototype.beginComponentTransaction = function beginComponentTransaction() {\n        this.push(65 /* BeginComponentTransaction */);\n    };\n\n    BasicOpcodeBuilder.prototype.commitComponentTransaction = function commitComponentTransaction() {\n        this.push(66 /* CommitComponentTransaction */);\n    };\n\n    BasicOpcodeBuilder.prototype.pushComponentOperations = function pushComponentOperations() {\n        this.push(62 /* PushComponentOperations */);\n    };\n\n    BasicOpcodeBuilder.prototype.getComponentSelf = function getComponentSelf(state) {\n        this.push(63 /* GetComponentSelf */, state);\n    };\n\n    BasicOpcodeBuilder.prototype.getComponentLayout = function getComponentLayout(state) {\n        this.push(64 /* GetComponentLayout */, state);\n    };\n\n    BasicOpcodeBuilder.prototype.didCreateElement = function didCreateElement(state) {\n        this.push(67 /* DidCreateElement */, state);\n    };\n\n    BasicOpcodeBuilder.prototype.didRenderLayout = function didRenderLayout(state) {\n        this.push(68 /* DidRenderLayout */, state);\n    };\n    // partial\n\n\n    BasicOpcodeBuilder.prototype.getPartialTemplate = function getPartialTemplate() {\n        this.push(69 /* GetPartialTemplate */);\n    };\n\n    BasicOpcodeBuilder.prototype.resolveMaybeLocal = function resolveMaybeLocal(name) {\n        this.push(70 /* ResolveMaybeLocal */, this.string(name));\n    };\n    // debugger\n\n\n    BasicOpcodeBuilder.prototype.debugger = function _debugger(symbols, evalInfo) {\n        this.push(71 /* Debugger */, this.constants.other(symbols), this.constants.array(evalInfo));\n    };\n    // content\n\n\n    BasicOpcodeBuilder.prototype.dynamicContent = function dynamicContent(Opcode) {\n        this.push(25 /* DynamicContent */, this.other(Opcode));\n    };\n\n    BasicOpcodeBuilder.prototype.cautiousAppend = function cautiousAppend() {\n        this.dynamicContent(new content.OptimizedCautiousAppendOpcode());\n    };\n\n    BasicOpcodeBuilder.prototype.trustingAppend = function trustingAppend() {\n        this.dynamicContent(new content.OptimizedTrustingAppendOpcode());\n    };\n    // dom\n\n\n    BasicOpcodeBuilder.prototype.text = function text(_text) {\n        this.push(23 /* Text */, this.constants.string(_text));\n    };\n\n    BasicOpcodeBuilder.prototype.openPrimitiveElement = function openPrimitiveElement(tag) {\n        this.push(26 /* OpenElement */, this.constants.string(tag));\n    };\n\n    BasicOpcodeBuilder.prototype.openElementWithOperations = function openElementWithOperations(tag) {\n        this.push(27 /* OpenElementWithOperations */, this.constants.string(tag));\n    };\n\n    BasicOpcodeBuilder.prototype.openDynamicElement = function openDynamicElement() {\n        this.push(28 /* OpenDynamicElement */);\n    };\n\n    BasicOpcodeBuilder.prototype.flushElement = function flushElement() {\n        this.push(32 /* FlushElement */);\n    };\n\n    BasicOpcodeBuilder.prototype.closeElement = function closeElement() {\n        this.push(33 /* CloseElement */);\n    };\n\n    BasicOpcodeBuilder.prototype.staticAttr = function staticAttr(_name, _namespace, _value) {\n        var name = this.constants.string(_name);\n        var namespace = _namespace ? this.constants.string(_namespace) : 0;\n        var value = this.constants.string(_value);\n        this.push(29 /* StaticAttr */, name, value, namespace);\n    };\n\n    BasicOpcodeBuilder.prototype.dynamicAttrNS = function dynamicAttrNS(_name, _namespace, trusting) {\n        var name = this.constants.string(_name);\n        var namespace = this.constants.string(_namespace);\n        this.push(31 /* DynamicAttrNS */, name, namespace, trusting | 0);\n    };\n\n    BasicOpcodeBuilder.prototype.dynamicAttr = function dynamicAttr(_name, trusting) {\n        var name = this.constants.string(_name);\n        this.push(30 /* DynamicAttr */, name, trusting | 0);\n    };\n\n    BasicOpcodeBuilder.prototype.comment = function comment(_comment) {\n        var comment = this.constants.string(_comment);\n        this.push(24 /* Comment */, comment);\n    };\n\n    BasicOpcodeBuilder.prototype.modifier = function modifier(_definition) {\n        this.push(34 /* Modifier */, this.other(_definition));\n    };\n    // lists\n\n\n    BasicOpcodeBuilder.prototype.putIterator = function putIterator() {\n        this.push(53 /* PutIterator */);\n    };\n\n    BasicOpcodeBuilder.prototype.enterList = function enterList(start) {\n        this.reserve(51 /* EnterList */);\n        this.labels.target(this.pos, 51 /* EnterList */, start);\n    };\n\n    BasicOpcodeBuilder.prototype.exitList = function exitList() {\n        this.push(52 /* ExitList */);\n    };\n\n    BasicOpcodeBuilder.prototype.iterate = function iterate(breaks) {\n        this.reserve(54 /* Iterate */);\n        this.labels.target(this.pos, 54 /* Iterate */, breaks);\n    };\n    // expressions\n\n\n    BasicOpcodeBuilder.prototype.setVariable = function setVariable(symbol) {\n        this.push(4 /* SetVariable */, symbol);\n    };\n\n    BasicOpcodeBuilder.prototype.getVariable = function getVariable(symbol) {\n        this.push(5 /* GetVariable */, symbol);\n    };\n\n    BasicOpcodeBuilder.prototype.getProperty = function getProperty(key) {\n        this.push(6 /* GetProperty */, this.string(key));\n    };\n\n    BasicOpcodeBuilder.prototype.getBlock = function getBlock(symbol) {\n        this.push(8 /* GetBlock */, symbol);\n    };\n\n    BasicOpcodeBuilder.prototype.hasBlock = function hasBlock(symbol) {\n        this.push(9 /* HasBlock */, symbol);\n    };\n\n    BasicOpcodeBuilder.prototype.hasBlockParams = function hasBlockParams(symbol) {\n        this.push(10 /* HasBlockParams */, symbol);\n    };\n\n    BasicOpcodeBuilder.prototype.concat = function concat(size) {\n        this.push(11 /* Concat */, size);\n    };\n\n    BasicOpcodeBuilder.prototype.function = function _function(f) {\n        this.push(2 /* Function */, this.func(f));\n    };\n\n    BasicOpcodeBuilder.prototype.load = function load(register) {\n        this.push(17 /* Load */, register);\n    };\n\n    BasicOpcodeBuilder.prototype.fetch = function fetch(register) {\n        this.push(18 /* Fetch */, register);\n    };\n\n    BasicOpcodeBuilder.prototype.dup = function dup() {\n        var register = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Register.sp;\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n        return this.push(15 /* Dup */, register, offset);\n    };\n\n    BasicOpcodeBuilder.prototype.pop = function pop() {\n        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n        return this.push(16 /* Pop */, count);\n    };\n    // vm\n\n\n    BasicOpcodeBuilder.prototype.pushRemoteElement = function pushRemoteElement() {\n        this.push(35 /* PushRemoteElement */);\n    };\n\n    BasicOpcodeBuilder.prototype.popRemoteElement = function popRemoteElement() {\n        this.push(36 /* PopRemoteElement */);\n    };\n\n    BasicOpcodeBuilder.prototype.label = function label(name) {\n        this.labels.label(name, this.nextPos);\n    };\n\n    BasicOpcodeBuilder.prototype.pushRootScope = function pushRootScope(symbols, bindCallerScope) {\n        this.push(19 /* RootScope */, symbols, bindCallerScope | 0);\n    };\n\n    BasicOpcodeBuilder.prototype.pushChildScope = function pushChildScope() {\n        this.push(20 /* ChildScope */);\n    };\n\n    BasicOpcodeBuilder.prototype.popScope = function popScope() {\n        this.push(21 /* PopScope */);\n    };\n\n    BasicOpcodeBuilder.prototype.returnTo = function returnTo(label) {\n        this.reserve(12 /* Immediate */);\n        this.labels.target(this.pos, 12 /* Immediate */, label);\n        this.load(Register.ra);\n    };\n\n    BasicOpcodeBuilder.prototype.pushDynamicScope = function pushDynamicScope() {\n        this.push(38 /* PushDynamicScope */);\n    };\n\n    BasicOpcodeBuilder.prototype.popDynamicScope = function popDynamicScope() {\n        this.push(39 /* PopDynamicScope */);\n    };\n\n    BasicOpcodeBuilder.prototype.pushImmediate = function pushImmediate(value) {\n        this.push(13 /* Constant */, this.other(value));\n    };\n\n    BasicOpcodeBuilder.prototype.primitive = function primitive(_primitive) {\n        var flag = 0;\n        var primitive = void 0;\n        switch (typeof _primitive) {\n            case 'number':\n                primitive = _primitive;\n                break;\n            case 'string':\n                primitive = this.string(_primitive);\n                flag = 1;\n                break;\n            case 'boolean':\n                primitive = _primitive | 0;\n                flag = 2;\n                break;\n            case 'object':\n                // assume null\n                primitive = 2;\n                flag = 2;\n                break;\n            case 'undefined':\n                primitive = 3;\n                flag = 2;\n                break;\n            default:\n                throw new Error('Invalid primitive passed to pushPrimitive');\n        }\n        this.push(14 /* PrimitiveReference */, flag << 30 | primitive);\n    };\n\n    BasicOpcodeBuilder.prototype.helper = function helper(func) {\n        this.push(1 /* Helper */, this.func(func));\n    };\n\n    BasicOpcodeBuilder.prototype.pushBlock = function pushBlock(block) {\n        this.push(7 /* PushBlock */, this.block(block));\n    };\n\n    BasicOpcodeBuilder.prototype.bindDynamicScope = function bindDynamicScope(_names) {\n        this.push(37 /* BindDynamicScope */, this.names(_names));\n    };\n\n    BasicOpcodeBuilder.prototype.enter = function enter(args) {\n        this.push(48 /* Enter */, args);\n    };\n\n    BasicOpcodeBuilder.prototype.exit = function exit() {\n        this.push(49 /* Exit */);\n    };\n\n    BasicOpcodeBuilder.prototype.return = function _return() {\n        this.push(22 /* Return */);\n    };\n\n    BasicOpcodeBuilder.prototype.pushFrame = function pushFrame() {\n        this.push(46 /* PushFrame */);\n    };\n\n    BasicOpcodeBuilder.prototype.popFrame = function popFrame() {\n        this.push(47 /* PopFrame */);\n    };\n\n    BasicOpcodeBuilder.prototype.compileDynamicBlock = function compileDynamicBlock() {\n        this.push(40 /* CompileDynamicBlock */);\n    };\n\n    BasicOpcodeBuilder.prototype.invokeDynamic = function invokeDynamic(invoker) {\n        this.push(42 /* InvokeDynamic */, this.other(invoker));\n    };\n\n    BasicOpcodeBuilder.prototype.invokeStatic = function invokeStatic(block) {\n        var callerCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var parameters = block.symbolTable.parameters;\n\n        var calleeCount = parameters.length;\n        var count = Math.min(callerCount, calleeCount);\n        this.pushFrame();\n        if (count) {\n            this.pushChildScope();\n            for (var i = 0; i < count; i++) {\n                this.dup(Register.fp, callerCount - i);\n                this.setVariable(parameters[i]);\n            }\n        }\n        var _block = this.constants.block(block);\n        this.push(41 /* InvokeStatic */, _block);\n        if (count) {\n            this.popScope();\n        }\n        this.popFrame();\n    };\n\n    BasicOpcodeBuilder.prototype.test = function test(testFunc) {\n        var _func = void 0;\n        if (testFunc === 'const') {\n            _func = vm.ConstTest;\n        } else if (testFunc === 'simple') {\n            _func = vm.SimpleTest;\n        } else if (testFunc === 'environment') {\n            _func = vm.EnvironmentTest;\n        } else if (typeof testFunc === 'function') {\n            _func = testFunc;\n        } else {\n            throw new Error('unreachable');\n        }\n        var func = this.constants.function(_func);\n        this.push(50 /* Test */, func);\n    };\n\n    BasicOpcodeBuilder.prototype.jump = function jump(target) {\n        this.reserve(43 /* Jump */);\n        this.labels.target(this.pos, 43 /* Jump */, target);\n    };\n\n    BasicOpcodeBuilder.prototype.jumpIf = function jumpIf(target) {\n        this.reserve(44 /* JumpIf */);\n        this.labels.target(this.pos, 44 /* JumpIf */, target);\n    };\n\n    BasicOpcodeBuilder.prototype.jumpUnless = function jumpUnless(target) {\n        this.reserve(45 /* JumpUnless */);\n        this.labels.target(this.pos, 45 /* JumpUnless */, target);\n    };\n\n    BasicOpcodeBuilder.prototype.string = function string(_string) {\n        return this.constants.string(_string);\n    };\n\n    BasicOpcodeBuilder.prototype.names = function names(_names) {\n        var _this = this;\n\n        var names = _names.map(function (n) {\n            return _this.constants.string(n);\n        });\n        return this.constants.array(names);\n    };\n\n    BasicOpcodeBuilder.prototype.symbols = function symbols(_symbols) {\n        return this.constants.array(_symbols);\n    };\n\n    BasicOpcodeBuilder.prototype.other = function other(value) {\n        return this.constants.other(value);\n    };\n\n    BasicOpcodeBuilder.prototype.block = function block(_block2) {\n        return _block2 ? this.constants.block(_block2) : 0;\n    };\n\n    BasicOpcodeBuilder.prototype.func = function func(_func2) {\n        return this.constants.function(_func2);\n    };\n\n    _createClass(BasicOpcodeBuilder, [{\n        key: 'pos',\n        get: function () {\n            return this.program.current;\n        }\n    }, {\n        key: 'nextPos',\n        get: function () {\n            return this.program.next;\n        }\n    }, {\n        key: 'labels',\n        get: function () {\n            return this.labelsStack.current;\n        }\n    }]);\n\n    return BasicOpcodeBuilder;\n}();\n\nexport { BasicOpcodeBuilder };\n\nfunction isCompilableExpression(expr) {\n    return expr && typeof expr['compile'] === 'function';\n}\n\nvar OpcodeBuilder = function (_BasicOpcodeBuilder) {\n    _inherits(OpcodeBuilder, _BasicOpcodeBuilder);\n\n    function OpcodeBuilder(env, meta) {\n        var program = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : env.program;\n\n        _classCallCheck(this, OpcodeBuilder);\n\n        var _this2 = _possibleConstructorReturn(this, _BasicOpcodeBuilder.call(this, env, meta, program));\n\n        _this2.component = new ComponentBuilder(_this2);\n        return _this2;\n    }\n\n    OpcodeBuilder.prototype.compileArgs = function compileArgs(params, hash, synthetic) {\n        var _this3 = this;\n\n        var positional = 0;\n        if (params) {\n            params.forEach(function (p) {\n                return expr(p, _this3);\n            });\n            positional = params.length;\n        }\n        var names = EMPTY_ARRAY;\n        if (hash) {\n            names = hash[0];\n            hash[1].forEach(function (v) {\n                return expr(v, _this3);\n            });\n        }\n        this.pushImmediate(names);\n        this.pushArgs(positional, synthetic);\n    };\n\n    OpcodeBuilder.prototype.compile = function compile(expr) {\n        if (isCompilableExpression(expr)) {\n            return expr.compile(this);\n        } else {\n            return expr;\n        }\n    };\n\n    OpcodeBuilder.prototype.guardedCautiousAppend = function guardedCautiousAppend(expression) {\n        expr(expression, this);\n        this.dynamicContent(new content.GuardedCautiousAppendOpcode());\n    };\n\n    OpcodeBuilder.prototype.guardedTrustingAppend = function guardedTrustingAppend(expression) {\n        expr(expression, this);\n        this.dynamicContent(new content.GuardedTrustingAppendOpcode());\n    };\n\n    OpcodeBuilder.prototype.invokeComponent = function invokeComponent(attrs, params, hash, block) {\n        var inverse = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n        this.initializeComponentState();\n        this.fetch(Register.s0);\n        this.dup(Register.sp, 1);\n        this.load(Register.s0);\n        this.pushBlock(block);\n        this.pushBlock(inverse);\n        this.compileArgs(params, hash, false);\n        this.prepareArgs(Register.s0);\n        this.beginComponentTransaction();\n        this.pushDynamicScope();\n        this.createComponent(Register.s0, true, inverse === null);\n        this.registerComponentDestructor(Register.s0);\n        this.getComponentSelf(Register.s0);\n        this.getComponentLayout(Register.s0);\n        this.invokeDynamic(new InvokeDynamicLayout(attrs && attrs.scan()));\n        this.popFrame();\n        this.popScope();\n        this.popDynamicScope();\n        this.commitComponentTransaction();\n        this.load(Register.s0);\n    };\n\n    OpcodeBuilder.prototype.template = function template(block) {\n        if (!block) return null;\n        return new RawInlineBlock(this.env, this.meta, block.statements, block.parameters);\n    };\n\n    return OpcodeBuilder;\n}(BasicOpcodeBuilder);\n\nexport default OpcodeBuilder;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxBQUFPLGFBQU0sQUFBVyxBQUFDO0FBQ3JDLE9BQU8sS0FBSyxBQUFFLFFBQU0sQUFBTSxBQUFDO0FBRzNCLEFBQU8sU0FBRSxBQUFRLEFBQUUsZ0JBQU0sQUFBZSxBQUFDO0FBRXpDLEFBQU8sU0FBVSxBQUFLLE9BQVUsQUFBSSxNQUFFLEFBQVMsV0FBRSxBQUFXLEFBQUUsbUJBQU0sQUFBZSxBQUFDO0FBY3BGLEFBQU8sU0FBRSxBQUFnQixBQUFFLHdCQUFNLEFBQWdCLEFBQUM7QUFDbEQsQUFBTyxTQUFFLEFBQWMsQUFBcUIsc0JBQU0sQUFBZSxBQUFDO0FBQ2xFLEFBQU8sU0FBRSxBQUFtQixxQkFBRSxBQUFJLEFBQUUsWUFBTSxBQUF3QixBQUFDLEFBY25FOzs7QUFBQTs7O0FBQ0UsYUFBTSxTQUFHLEFBQUksQUFBVSxBQUFDO0FBQ3hCLGFBQU8sVUFBMkQsQUFBRSxBQUFDLEFBZXZFO0FBQUM7O3FCQWJDLEFBQUssdUJBQUMsQUFBWSxNQUFFLEFBQWE7QUFDL0IsQUFBSSxhQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUMsUUFBRyxBQUFLLEFBQUMsQUFDNUI7QUFBQzs7cUJBRUQsQUFBTSx5QkFBQyxBQUFVLElBQUUsQUFBb0IsUUFBRSxBQUFjO0FBQ3JELEFBQUksYUFBQyxBQUFPLFFBQUMsQUFBSSxLQUFDLEVBQUUsQUFBRSxRQUFFLEFBQU0sZ0JBQUUsQUFBTSxBQUFFLEFBQUMsQUFBQyxBQUM1QztBQUFDOztxQkFFRCxBQUFLLHVCQUFDLEFBQWdCO0FBQ3BCLEFBQUcsQUFBQyxBQUFDLEFBQUkseUJBQTBCLEFBQUksS0FBQyxBQUFPLEFBQUM7QUFBQyxBQUFDLGdCQUF2QyxBQUFFO2dCQUFFLEFBQU07Z0JBQUUsQUFBTSxBQUFFOztBQUM3QixBQUFPLG9CQUFDLEFBQUcsSUFB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QUUsQUFBQztBQUNqQyxBQUFJLGFBQUMsQUFBZ0IsQUFBRSxBQUFDO0FBQ3hCLEFBQUksYUFBQyxBQUFlLGdCQUFDLEFBQVEsU0FBQyxBQUFFLElBQUUsQUFBSSxNQUFFLEFBQU8sWUFBSyxBQUFJLEFBQUMsQUFBQztBQUMxRCxBQUFJLGFBQUMsQUFBMkIsNEJBQUMsQUFBUSxTQUFDLEFBQUUsQUFBQyxBQUFDO0FBRTlDLEFBQUksYUFBQyxBQUFnQixpQkFBQyxBQUFRLFNBQUMsQUFBRSxBQUFDLEFBQUM7QUFDbkMsQUFBSSxhQUFDLEFBQWtCLG1CQUFDLEFBQVEsU0FBQyxBQUFFLEFBQUMsQUFBQztBQUNyQyxBQUFJLGFBQUMsQUFBYSxjQUFDLElBQUksQUFBbUIsb0JBQUMsQUFBSyxTQUFJLEFBQUssTUFBQyxBQUFJLEFBQUUsQUFBQyxBQUFDLEFBQUM7QUFDbkUsQUFBSSxhQUFDLEFBQVEsQUFBRSxBQUFDO0FBRWhCLEFBQUksYUFBQyxBQUFRLEFBQUUsQUFBQztBQUNoQixBQUFJLGFBQUMsQUFBZSxBQUFFLEFBQUM7QUFDdkIsQUFBSSxhQUFDLEFBQTBCLEFBQUUsQUFBQztBQUVsQyxBQUFJLGFBQUMsQUFBSSxLQUFDLEFBQVEsU0FBQyxBQUFFLEFBQUMsQUFBQyxBQUN6QjtBQUFDOzs0QkFFRCxBQUFRLDZCQUFDLEFBQStDO0FBQ3RELEFBQUUsQUFBQyxZQUFDLENBQUMsQUFBSyxBQUFDLE9BQUMsQUFBTSxPQUFDLEFBQUksQUFBQztBQUN4QixBQUFNLGVBQUMsSUFBSSxBQUFjLGVBQUMsQUFBSSxLQUFDLEFBQUcsS0FBRSxBQUFJLEtBQUMsQUFBSSxNQUFFLEFBQUssTUFBQyxBQUFVLFlBQUUsQUFBSyxNQUFDLEFBQVUsQUFBQyxBQUFDLEFBQ3JGO0FBQUMsQUFDRjs7O0VBL0UwQyxBQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvbnRlbnQgZnJvbSAnLi9jb250ZW50JztcbmltcG9ydCAqIGFzIHZtIGZyb20gJy4vdm0nO1xuXG5pbXBvcnQgeyBJbnNlcnRpb24gfSBmcm9tICcuLi8uLi91cHNlcnQnO1xuaW1wb3J0IHsgUmVnaXN0ZXIgfSBmcm9tICcuLi8uLi9vcGNvZGVzJztcbmltcG9ydCAqIGFzIFdpcmVGb3JtYXQgZnJvbSAnQGdsaW1tZXIvd2lyZS1mb3JtYXQnO1xuaW1wb3J0IHsgT3B0aW9uLCBTdGFjaywgT3BhcXVlLCBkaWN0LCBmaWxsTnVsbHMsIEVNUFRZX0FSUkFZIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQge1xuICBDb25zdGFudHMsXG4gIENvbnN0YW50U3RyaW5nLFxuICBDb25zdGFudEFycmF5LFxuICBDb25zdGFudE90aGVyLFxuICBDb25zdGFudEJsb2NrLFxuICBDb25zdGFudEZ1bmN0aW9uLFxufSBmcm9tICcuLi8uLi9lbnZpcm9ubWVudC9jb25zdGFudHMnO1xuaW1wb3J0IHsgTW9kaWZpZXJNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vbW9kaWZpZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDb21wb25lbnREZWZpbml0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50L2ludGVyZmFjZXMnO1xuaW1wb3J0IEVudmlyb25tZW50LCB7IFByb2dyYW0gfSBmcm9tICcuLi8uLi9lbnZpcm9ubWVudCc7XG5pbXBvcnQgeyBTeW1ib2xUYWJsZSwgQ29tcGlsYXRpb25NZXRhIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDb21wb25lbnRCdWlsZGVyIGFzIElDb21wb25lbnRCdWlsZGVyIH0gZnJvbSAnLi4vLi4vb3Bjb2RlLWJ1aWxkZXInO1xuaW1wb3J0IHsgQ29tcG9uZW50QnVpbGRlciB9IGZyb20gJy4uLy4uL2NvbXBpbGVyJztcbmltcG9ydCB7IFJhd0lubGluZUJsb2NrLCBDbGllbnRTaWRlLCBCbG9jayB9IGZyb20gJy4uLy4uL3NjYW5uZXInO1xuaW1wb3J0IHsgSW52b2tlRHluYW1pY0xheW91dCwgZXhwciB9IGZyb20gJy4uLy4uL3N5bnRheC9mdW5jdGlvbnMnO1xuXG5pbXBvcnQgeyBPcCB9IGZyb20gJy4uLy4uL29wY29kZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVzSW50bzxFPiB7XG4gIGNvbXBpbGUoYnVpbGRlcjogT3Bjb2RlQnVpbGRlcik6IEU7XG59XG5cbmV4cG9ydCB0eXBlIFJlcHJlc2VudHM8RT4gPSBDb21waWxlc0ludG88RT4gfCBFO1xuXG5leHBvcnQgdHlwZSBMYWJlbCA9IHN0cmluZztcblxudHlwZSBUYXJnZXRPcGNvZGUgPSBPcC5KdW1wIHwgT3AuSnVtcElmIHwgT3AuSnVtcFVubGVzcyB8IE9wLkVudGVyTGlzdCB8IE9wLkl0ZXJhdGUgfCBPcC5JbW1lZGlhdGU7XG5cbmNsYXNzIExhYmVscyB7XG4gIGxhYmVscyA9IGRpY3Q8bnVtYmVyPigpO1xuICB0YXJnZXRzOiB7IGF0OiBudW1iZXIsIFRhcmdldDogVGFyZ2V0T3Bjb2RlLCB0YXJnZXQ6IHN0cmluZyB9W10gPSBbXTtcblxuICBsYWJlbChuYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLmxhYmVsc1tuYW1lXSA9IGluZGV4O1xuICB9XG5cbiAgdGFyZ2V0KGF0OiBudW1iZXIsIFRhcmdldDogVGFyZ2V0T3Bjb2RlLCB0YXJnZXQ6IHN0cmluZykge1xuICAgIHRoaXMudGFyZ2V0cy5wdXNoKHsgYXQsIFRhcmdldCwgdGFyZ2V0IH0pO1xuICB9XG5cbiAgcGF0Y2gob3Bjb2RlczogUHJvZ3JhbSk6IHZvaWQge1xuICAgIGZvciAobGV0IHsgYXQsIFRhcmdldCwgdGFyZ2V0IH0gb2YgdGhpcy50YXJnZXRzKSB7XG4gICAgICBvcGNvZGVzLnNldChhdCwgVGFyZ2V0LCB0aGlzLmxhYmVsc1t0YXJnZXRdKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2ljT3Bjb2RlQnVpbGRlciB7XG4gIHByaXZhdGUgbGFiZWxzU3RhY2sgPSBuZXcgU3RhY2s8TGFiZWxzPigpO1xuICBwdWJsaWMgY29uc3RhbnRzOiBDb25zdGFudHM7XG4gIHB1YmxpYyBzdGFydDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbnY6IEVudmlyb25tZW50LCBwdWJsaWMgbWV0YTogQ29tcGlsYXRpb25NZXRhLCBwdWJsaWMgcHJvZ3JhbTogUHJvZ3JhbSkge1xuICAgIHRoaXMuY29uc3RhbnRzID0gZW52LmNvbnN0YW50cztcbiAgICB0aGlzLnN0YXJ0ID0gcHJvZ3JhbS5uZXh0O1xuICB9XG5cbiAgYWJzdHJhY3QgY29tcGlsZTxFPihleHByOiBSZXByZXNlbnRzPEU+KTogRTtcblxuICBwcml2YXRlIGdldCBwb3MoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvZ3JhbS5jdXJyZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgbmV4dFBvcygpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9ncmFtLm5leHQ7XG4gIH1cblxuICB1cHZhcnM8VCBleHRlbmRzIFtPcGFxdWVdPihjb3VudDogbnVtYmVyKTogVCB7XG4gICAgcmV0dXJuIGZpbGxOdWxscyhjb3VudCkgYXMgVDtcbiAgfVxuXG4gIHJlc2VydmUobmFtZTogT3ApIHtcbiAgICB0aGlzLnB1c2gobmFtZSwgMCwgMCwgMCk7XG4gIH1cblxuICBwdXNoKG5hbWU6IE9wLCBvcDEgPSAwLCBvcDIgPSAwLCBvcDMgPSAwKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvZ3JhbS5wdXNoKG5hbWUsIG9wMSwgb3AyLCBvcDMpO1xuICB9XG5cbiAgZmluYWxpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5wdXNoKE9wLlJldHVybik7XG4gIH1cblxuICAvLyBhcmdzXG5cbiAgcHVzaEFyZ3MocG9zaXRpb25hbDogbnVtYmVyLCBzeW50aGV0aWM6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnB1c2goT3AuUHVzaEFyZ3MsIHBvc2l0aW9uYWwsIChzeW50aGV0aWMgYXMgYW55KXwwKTtcbiAgfVxuXG4gIC8vIGhlbHBlcnNcblxuICBwcml2YXRlIGdldCBsYWJlbHMoKTogTGFiZWxzIHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbHNTdGFjay5jdXJyZW50O1xuICB9XG5cbiAgc3RhcnRMYWJlbHMoKSB7XG4gICAgdGhpcy5sYWJlbHNTdGFjay5wdXNoKG5ldyBMYWJlbHMoKSk7XG4gIH1cblxuICBzdG9wTGFiZWxzKCkge1xuICAgIGxldCBsYWJlbCA9IHRoaXMubGFiZWxzU3RhY2sucG9wKCk7XG4gICAgbGFiZWwucGF0Y2godGhpcy5wcm9ncmFtKTtcbiAgfVxuXG4gIC8vIGNvbXBvbmVudHNcblxuICBwdXNoQ29tcG9uZW50TWFuYWdlcihkZWZpbml0aW9uOiBDb21wb25lbnREZWZpbml0aW9uPE9wYXF1ZT4pIHtcbiAgICB0aGlzLnB1c2goT3AuUHVzaENvbXBvbmVudE1hbmFnZXIsIHRoaXMub3RoZXIoZGVmaW5pdGlvbikpO1xuICB9XG5cbiAgcHVzaER5bmFtaWNDb21wb25lbnRNYW5hZ2VyKCkge1xuICAgIHRoaXMucHVzaChPcC5QdXNoRHluYW1pY0NvbXBvbmVudE1hbmFnZXIpO1xuICB9XG5cbiAgaW5pdGlhbGl6ZUNvbXBvbmVudFN0YXRlKCkge1xuICAgIHRoaXMucHVzaChPcC5Jbml0aWFsaXplQ29tcG9uZW50U3RhdGUpO1xuICB9XG5cbiAgcHJlcGFyZUFyZ3Moc3RhdGU6IFJlZ2lzdGVyKSB7XG4gICAgdGhpcy5wdXNoKE9wLlByZXBhcmVBcmdzLCBzdGF0ZSk7XG4gIH1cblxuICBjcmVhdGVDb21wb25lbnQoc3RhdGU6IFJlZ2lzdGVyLCBoYXNEZWZhdWx0OiBib29sZWFuLCBoYXNJbnZlcnNlOiBib29sZWFuKSB7XG4gICAgbGV0IGZsYWcgPSAoPGFueT5oYXNEZWZhdWx0fDApIHwgKCg8YW55Pmhhc0ludmVyc2V8MCkgPDwgMSk7XG4gICAgdGhpcy5wdXNoKE9wLkNyZWF0ZUNvbXBvbmVudCwgZmxhZywgc3RhdGUpO1xuICB9XG5cbiAgcmVnaXN0ZXJDb21wb25lbnREZXN0cnVjdG9yKHN0YXRlOiBSZWdpc3Rlcikge1xuICAgIHRoaXMucHVzaChPcC5SZWdpc3RlckNvbXBvbmVudERlc3RydWN0b3IsIHN0YXRlKTtcbiAgfVxuXG4gIGJlZ2luQ29tcG9uZW50VHJhbnNhY3Rpb24oKSB7XG4gICAgdGhpcy5wdXNoKE9wLkJlZ2luQ29tcG9uZW50VHJhbnNhY3Rpb24pO1xuICB9XG5cbiAgY29tbWl0Q29tcG9uZW50VHJhbnNhY3Rpb24oKSB7XG4gICAgdGhpcy5wdXNoKE9wLkNvbW1pdENvbXBvbmVudFRyYW5zYWN0aW9uKTtcbiAgfVxuXG4gIHB1c2hDb21wb25lbnRPcGVyYXRpb25zKCkge1xuICAgIHRoaXMucHVzaChPcC5QdXNoQ29tcG9uZW50T3BlcmF0aW9ucyk7XG4gIH1cblxuICBnZXRDb21wb25lbnRTZWxmKHN0YXRlOiBSZWdpc3Rlcikge1xuICAgIHRoaXMucHVzaChPcC5HZXRDb21wb25lbnRTZWxmLCBzdGF0ZSk7XG4gIH1cblxuICBnZXRDb21wb25lbnRMYXlvdXQoc3RhdGU6IFJlZ2lzdGVyICkge1xuICAgIHRoaXMucHVzaChPcC5HZXRDb21wb25lbnRMYXlvdXQsIHN0YXRlKTtcbiAgfVxuXG4gIGRpZENyZWF0ZUVsZW1lbnQoc3RhdGU6IFJlZ2lzdGVyKSB7XG4gICAgdGhpcy5wdXNoKE9wLkRpZENyZWF0ZUVsZW1lbnQsIHN0YXRlKTtcbiAgfVxuXG4gIGRpZFJlbmRlckxheW91dChzdGF0ZTogUmVnaXN0ZXIpIHtcbiAgICB0aGlzLnB1c2goT3AuRGlkUmVuZGVyTGF5b3V0LCBzdGF0ZSk7XG4gIH1cblxuICAvLyBwYXJ0aWFsXG5cbiAgZ2V0UGFydGlhbFRlbXBsYXRlKCkge1xuICAgIHRoaXMucHVzaChPcC5HZXRQYXJ0aWFsVGVtcGxhdGUpO1xuICB9XG5cbiAgcmVzb2x2ZU1heWJlTG9jYWwobmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5wdXNoKE9wLlJlc29sdmVNYXliZUxvY2FsLCB0aGlzLnN0cmluZyhuYW1lKSk7XG4gIH1cblxuICAvLyBkZWJ1Z2dlclxuXG4gIGRlYnVnZ2VyKHN5bWJvbHM6IHN0cmluZ1tdLCBldmFsSW5mbzogbnVtYmVyW10pIHtcbiAgICB0aGlzLnB1c2goT3AuRGVidWdnZXIsIHRoaXMuY29uc3RhbnRzLm90aGVyKHN5bWJvbHMpLCB0aGlzLmNvbnN0YW50cy5hcnJheShldmFsSW5mbykpO1xuICB9XG5cbiAgLy8gY29udGVudFxuXG4gIGR5bmFtaWNDb250ZW50KE9wY29kZTogY29udGVudC5BcHBlbmREeW5hbWljT3Bjb2RlPEluc2VydGlvbj4pIHtcbiAgICB0aGlzLnB1c2goT3AuRHluYW1pY0NvbnRlbnQsIHRoaXMub3RoZXIoT3Bjb2RlKSk7XG4gIH1cblxuICBjYXV0aW91c0FwcGVuZCgpIHtcbiAgICB0aGlzLmR5bmFtaWNDb250ZW50KG5ldyBjb250ZW50Lk9wdGltaXplZENhdXRpb3VzQXBwZW5kT3Bjb2RlKCkpO1xuICB9XG5cbiAgdHJ1c3RpbmdBcHBlbmQoKSB7XG4gICAgdGhpcy5keW5hbWljQ29udGVudChuZXcgY29udGVudC5PcHRpbWl6ZWRUcnVzdGluZ0FwcGVuZE9wY29kZSgpKTtcbiAgfVxuXG4gIC8vIGRvbVxuXG4gIHRleHQodGV4dDogc3RyaW5nKSB7XG4gICAgdGhpcy5wdXNoKE9wLlRleHQsIHRoaXMuY29uc3RhbnRzLnN0cmluZyh0ZXh0KSk7XG4gIH1cblxuICBvcGVuUHJpbWl0aXZlRWxlbWVudCh0YWc6IHN0cmluZykge1xuICAgIHRoaXMucHVzaChPcC5PcGVuRWxlbWVudCwgdGhpcy5jb25zdGFudHMuc3RyaW5nKHRhZykpO1xuICB9XG5cbiAgb3BlbkVsZW1lbnRXaXRoT3BlcmF0aW9ucyh0YWc6IHN0cmluZykge1xuICAgIHRoaXMucHVzaChPcC5PcGVuRWxlbWVudFdpdGhPcGVyYXRpb25zLCB0aGlzLmNvbnN0YW50cy5zdHJpbmcodGFnKSk7XG4gIH1cblxuICBvcGVuRHluYW1pY0VsZW1lbnQoKSB7XG4gICAgdGhpcy5wdXNoKE9wLk9wZW5EeW5hbWljRWxlbWVudCk7XG4gIH1cblxuICBmbHVzaEVsZW1lbnQoKSB7XG4gICAgdGhpcy5wdXNoKE9wLkZsdXNoRWxlbWVudCk7XG4gIH1cblxuICBjbG9zZUVsZW1lbnQoKSB7XG4gICAgdGhpcy5wdXNoKE9wLkNsb3NlRWxlbWVudCk7XG4gIH1cblxuICBzdGF0aWNBdHRyKF9uYW1lOiBzdHJpbmcsIF9uYW1lc3BhY2U6IE9wdGlvbjxzdHJpbmc+LCBfdmFsdWU6IHN0cmluZykge1xuICAgIGxldCBuYW1lID0gdGhpcy5jb25zdGFudHMuc3RyaW5nKF9uYW1lKTtcbiAgICBsZXQgbmFtZXNwYWNlID0gX25hbWVzcGFjZSA/IHRoaXMuY29uc3RhbnRzLnN0cmluZyhfbmFtZXNwYWNlKSA6IDA7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5jb25zdGFudHMuc3RyaW5nKF92YWx1ZSk7XG5cbiAgICB0aGlzLnB1c2goT3AuU3RhdGljQXR0ciwgbmFtZSwgdmFsdWUsIG5hbWVzcGFjZSk7XG4gIH1cblxuICBkeW5hbWljQXR0ck5TKF9uYW1lOiBzdHJpbmcsIF9uYW1lc3BhY2U6IHN0cmluZywgdHJ1c3Rpbmc6IGJvb2xlYW4pIHtcbiAgICBsZXQgbmFtZSA9IHRoaXMuY29uc3RhbnRzLnN0cmluZyhfbmFtZSk7XG4gICAgbGV0IG5hbWVzcGFjZSA9IHRoaXMuY29uc3RhbnRzLnN0cmluZyhfbmFtZXNwYWNlKTtcblxuICAgIHRoaXMucHVzaChPcC5EeW5hbWljQXR0ck5TLCBuYW1lLCBuYW1lc3BhY2UsICh0cnVzdGluZyBhcyBhbnkpfDApO1xuICB9XG5cbiAgZHluYW1pY0F0dHIoX25hbWU6IHN0cmluZywgdHJ1c3Rpbmc6IGJvb2xlYW4pIHtcbiAgICBsZXQgbmFtZSA9IHRoaXMuY29uc3RhbnRzLnN0cmluZyhfbmFtZSk7XG4gICAgdGhpcy5wdXNoKE9wLkR5bmFtaWNBdHRyLCBuYW1lLCAodHJ1c3RpbmcgYXMgYW55KXwwKTtcbiAgfVxuXG4gIGNvbW1lbnQoX2NvbW1lbnQ6IHN0cmluZykge1xuICAgIGxldCBjb21tZW50ID0gdGhpcy5jb25zdGFudHMuc3RyaW5nKF9jb21tZW50KTtcbiAgICB0aGlzLnB1c2goT3AuQ29tbWVudCwgY29tbWVudCk7XG4gIH1cblxuICBtb2RpZmllcihfZGVmaW5pdGlvbjogTW9kaWZpZXJNYW5hZ2VyPE9wYXF1ZT4pIHtcbiAgICB0aGlzLnB1c2goT3AuTW9kaWZpZXIsIHRoaXMub3RoZXIoX2RlZmluaXRpb24pKTtcbiAgfVxuXG4gIC8vIGxpc3RzXG5cbiAgcHV0SXRlcmF0b3IoKSB7XG4gICAgdGhpcy5wdXNoKE9wLlB1dEl0ZXJhdG9yKTtcbiAgfVxuXG4gIGVudGVyTGlzdChzdGFydDogc3RyaW5nKSB7XG4gICAgdGhpcy5yZXNlcnZlKE9wLkVudGVyTGlzdCk7XG4gICAgdGhpcy5sYWJlbHMudGFyZ2V0KHRoaXMucG9zLCBPcC5FbnRlckxpc3QsIHN0YXJ0KTtcbiAgfVxuXG4gIGV4aXRMaXN0KCkge1xuICAgIHRoaXMucHVzaChPcC5FeGl0TGlzdCk7XG4gIH1cblxuICBpdGVyYXRlKGJyZWFrczogc3RyaW5nKSB7XG4gICAgdGhpcy5yZXNlcnZlKE9wLkl0ZXJhdGUpO1xuICAgIHRoaXMubGFiZWxzLnRhcmdldCh0aGlzLnBvcywgT3AuSXRlcmF0ZSwgYnJlYWtzKTtcbiAgfVxuXG4gIC8vIGV4cHJlc3Npb25zXG5cbiAgc2V0VmFyaWFibGUoc3ltYm9sOiBudW1iZXIpIHtcbiAgICB0aGlzLnB1c2goT3AuU2V0VmFyaWFibGUsIHN5bWJvbCk7XG4gIH1cblxuICBnZXRWYXJpYWJsZShzeW1ib2w6IG51bWJlcikge1xuICAgIHRoaXMucHVzaChPcC5HZXRWYXJpYWJsZSwgc3ltYm9sKTtcbiAgfVxuXG4gIGdldFByb3BlcnR5KGtleTogc3RyaW5nKSB7XG4gICAgdGhpcy5wdXNoKE9wLkdldFByb3BlcnR5LCB0aGlzLnN0cmluZyhrZXkpKTtcbiAgfVxuXG4gIGdldEJsb2NrKHN5bWJvbDogbnVtYmVyKSB7XG4gICAgdGhpcy5wdXNoKE9wLkdldEJsb2NrLCBzeW1ib2wpO1xuICB9XG5cbiAgaGFzQmxvY2soc3ltYm9sOiBudW1iZXIpIHtcbiAgICB0aGlzLnB1c2goT3AuSGFzQmxvY2ssIHN5bWJvbCk7XG4gIH1cblxuICBoYXNCbG9ja1BhcmFtcyhzeW1ib2w6IG51bWJlcikge1xuICAgIHRoaXMucHVzaChPcC5IYXNCbG9ja1BhcmFtcywgc3ltYm9sKTtcbiAgfVxuXG4gIGNvbmNhdChzaXplOiBudW1iZXIpIHtcbiAgICB0aGlzLnB1c2goT3AuQ29uY2F0LCBzaXplKTtcbiAgfVxuXG4gIGZ1bmN0aW9uKGY6IENsaWVudFNpZGUuRnVuY3Rpb25FeHByZXNzaW9uQ2FsbGJhY2s8T3BhcXVlPikge1xuICAgIHRoaXMucHVzaChPcC5GdW5jdGlvbiwgdGhpcy5mdW5jKGYpKTtcbiAgfVxuXG4gIGxvYWQocmVnaXN0ZXI6IFJlZ2lzdGVyKSB7XG4gICAgdGhpcy5wdXNoKE9wLkxvYWQsIHJlZ2lzdGVyKTtcbiAgfVxuXG4gIGZldGNoKHJlZ2lzdGVyOiBSZWdpc3Rlcikge1xuICAgIHRoaXMucHVzaChPcC5GZXRjaCwgcmVnaXN0ZXIpO1xuICB9XG5cbiAgZHVwKHJlZ2lzdGVyID0gUmVnaXN0ZXIuc3AsIG9mZnNldCA9IDApIHtcbiAgICByZXR1cm4gdGhpcy5wdXNoKE9wLkR1cCwgcmVnaXN0ZXIsIG9mZnNldCk7XG4gIH1cblxuICBwb3AoY291bnQgPSAxKSB7XG4gICAgcmV0dXJuIHRoaXMucHVzaChPcC5Qb3AsIGNvdW50KTtcbiAgfVxuXG4gIC8vIHZtXG5cbiAgcHVzaFJlbW90ZUVsZW1lbnQoKSB7XG4gICAgdGhpcy5wdXNoKE9wLlB1c2hSZW1vdGVFbGVtZW50KTtcbiAgfVxuXG4gIHBvcFJlbW90ZUVsZW1lbnQoKSB7XG4gICAgdGhpcy5wdXNoKE9wLlBvcFJlbW90ZUVsZW1lbnQpO1xuICB9XG5cbiAgbGFiZWwobmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5sYWJlbHMubGFiZWwobmFtZSwgdGhpcy5uZXh0UG9zKTtcbiAgfVxuXG4gIHB1c2hSb290U2NvcGUoc3ltYm9sczogbnVtYmVyLCBiaW5kQ2FsbGVyU2NvcGU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnB1c2goT3AuUm9vdFNjb3BlLCBzeW1ib2xzLCA8YW55PmJpbmRDYWxsZXJTY29wZXwwKTtcbiAgfVxuXG4gIHB1c2hDaGlsZFNjb3BlKCkge1xuICAgIHRoaXMucHVzaChPcC5DaGlsZFNjb3BlKTtcbiAgfVxuXG4gIHBvcFNjb3BlKCkge1xuICAgIHRoaXMucHVzaChPcC5Qb3BTY29wZSk7XG4gIH1cblxuICByZXR1cm5UbyhsYWJlbDogc3RyaW5nKSB7XG4gICAgdGhpcy5yZXNlcnZlKE9wLkltbWVkaWF0ZSk7XG4gICAgdGhpcy5sYWJlbHMudGFyZ2V0KHRoaXMucG9zLCBPcC5JbW1lZGlhdGUsIGxhYmVsKTtcbiAgICB0aGlzLmxvYWQoUmVnaXN0ZXIucmEpO1xuICB9XG5cbiAgcHVzaER5bmFtaWNTY29wZSgpIHtcbiAgICB0aGlzLnB1c2goT3AuUHVzaER5bmFtaWNTY29wZSk7XG4gIH1cblxuICBwb3BEeW5hbWljU2NvcGUoKSB7XG4gICAgdGhpcy5wdXNoKE9wLlBvcER5bmFtaWNTY29wZSk7XG4gIH1cblxuICBwdXNoSW1tZWRpYXRlPFQ+KHZhbHVlOiBUKSB7XG4gICAgdGhpcy5wdXNoKE9wLkNvbnN0YW50LCB0aGlzLm90aGVyKHZhbHVlKSk7XG4gIH1cblxuICBwcmltaXRpdmUoX3ByaW1pdGl2ZTogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZCB8IGJvb2xlYW4pIHtcbiAgICBsZXQgZmxhZzogMCB8IDEgfCAyID0gMDtcbiAgICBsZXQgcHJpbWl0aXZlOiBudW1iZXI7XG4gICAgc3dpdGNoICh0eXBlb2YgX3ByaW1pdGl2ZSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgcHJpbWl0aXZlID0gX3ByaW1pdGl2ZSBhcyBudW1iZXI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcHJpbWl0aXZlID0gdGhpcy5zdHJpbmcoX3ByaW1pdGl2ZSBhcyBzdHJpbmcpO1xuICAgICAgICBmbGFnID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgcHJpbWl0aXZlID0gKF9wcmltaXRpdmUgYXMgYW55KSB8IDA7XG4gICAgICAgIGZsYWcgPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIC8vIGFzc3VtZSBudWxsXG4gICAgICAgIHByaW1pdGl2ZSA9IDI7XG4gICAgICAgIGZsYWcgPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHByaW1pdGl2ZSA9IDM7XG4gICAgICAgIGZsYWcgPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwcmltaXRpdmUgcGFzc2VkIHRvIHB1c2hQcmltaXRpdmUnKTtcbiAgICB9XG5cbiAgICB0aGlzLnB1c2goT3AuUHJpbWl0aXZlUmVmZXJlbmNlLCAoZmxhZyA8PCAzMCkgfCBwcmltaXRpdmUpO1xuICB9XG5cbiAgaGVscGVyKGZ1bmM6IEZ1bmN0aW9uKSB7XG4gICAgdGhpcy5wdXNoKE9wLkhlbHBlciwgdGhpcy5mdW5jKGZ1bmMpKTtcbiAgfVxuXG4gIHB1c2hCbG9jayhibG9jazogT3B0aW9uPEJsb2NrPikge1xuICAgIHRoaXMucHVzaChPcC5QdXNoQmxvY2ssIHRoaXMuYmxvY2soYmxvY2spKTtcbiAgfVxuXG4gIGJpbmREeW5hbWljU2NvcGUoX25hbWVzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMucHVzaChPcC5CaW5kRHluYW1pY1Njb3BlLCB0aGlzLm5hbWVzKF9uYW1lcykpO1xuICB9XG5cbiAgZW50ZXIoYXJnczogbnVtYmVyKSB7XG4gICAgdGhpcy5wdXNoKE9wLkVudGVyLCBhcmdzKTtcbiAgfVxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5wdXNoKE9wLkV4aXQpO1xuICB9XG5cbiAgcmV0dXJuKCkge1xuICAgIHRoaXMucHVzaChPcC5SZXR1cm4pO1xuICB9XG5cbiAgcHVzaEZyYW1lKCkge1xuICAgIHRoaXMucHVzaChPcC5QdXNoRnJhbWUpO1xuICB9XG5cbiAgcG9wRnJhbWUoKSB7XG4gICAgdGhpcy5wdXNoKE9wLlBvcEZyYW1lKTtcbiAgfVxuXG4gIGNvbXBpbGVEeW5hbWljQmxvY2soKTogdm9pZCB7XG4gICAgdGhpcy5wdXNoKE9wLkNvbXBpbGVEeW5hbWljQmxvY2spO1xuICB9XG5cbiAgaW52b2tlRHluYW1pYyhpbnZva2VyOiB2bS5EeW5hbWljSW52b2tlcjxTeW1ib2xUYWJsZT4pOiB2b2lkIHtcbiAgICB0aGlzLnB1c2goT3AuSW52b2tlRHluYW1pYywgdGhpcy5vdGhlcihpbnZva2VyKSk7XG4gIH1cblxuICBpbnZva2VTdGF0aWMoYmxvY2s6IEJsb2NrLCBjYWxsZXJDb3VudCA9IDApOiB2b2lkIHtcbiAgICBsZXQgeyBwYXJhbWV0ZXJzIH0gPSBibG9jay5zeW1ib2xUYWJsZTtcbiAgICBsZXQgY2FsbGVlQ291bnQgPSBwYXJhbWV0ZXJzLmxlbmd0aDtcbiAgICBsZXQgY291bnQgPSBNYXRoLm1pbihjYWxsZXJDb3VudCwgY2FsbGVlQ291bnQpO1xuXG4gICAgdGhpcy5wdXNoRnJhbWUoKTtcblxuICAgIGlmIChjb3VudCkge1xuICAgICAgdGhpcy5wdXNoQ2hpbGRTY29wZSgpO1xuXG4gICAgICBmb3IgKGxldCBpPTA7IGk8Y291bnQ7IGkrKykge1xuICAgICAgICB0aGlzLmR1cChSZWdpc3Rlci5mcCwgY2FsbGVyQ291bnQgLSBpKTtcbiAgICAgICAgdGhpcy5zZXRWYXJpYWJsZShwYXJhbWV0ZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgX2Jsb2NrID0gdGhpcy5jb25zdGFudHMuYmxvY2soYmxvY2spO1xuICAgIHRoaXMucHVzaChPcC5JbnZva2VTdGF0aWMsIF9ibG9jayk7XG5cbiAgICBpZiAoY291bnQpIHtcbiAgICAgIHRoaXMucG9wU2NvcGUoKTtcbiAgICB9XG5cbiAgICB0aGlzLnBvcEZyYW1lKCk7XG4gIH1cblxuICB0ZXN0KHRlc3RGdW5jOiAnY29uc3QnIHwgJ3NpbXBsZScgfCAnZW52aXJvbm1lbnQnIHwgdm0uVGVzdEZ1bmN0aW9uKSB7XG4gICAgbGV0IF9mdW5jOiB2bS5UZXN0RnVuY3Rpb247XG5cbiAgICBpZiAodGVzdEZ1bmMgPT09ICdjb25zdCcpIHtcbiAgICAgIF9mdW5jID0gdm0uQ29uc3RUZXN0O1xuICAgIH0gZWxzZSBpZiAodGVzdEZ1bmMgPT09ICdzaW1wbGUnKSB7XG4gICAgICBfZnVuYyA9IHZtLlNpbXBsZVRlc3Q7XG4gICAgfSBlbHNlIGlmICh0ZXN0RnVuYyA9PT0gJ2Vudmlyb25tZW50Jykge1xuICAgICAgX2Z1bmMgPSB2bS5FbnZpcm9ubWVudFRlc3Q7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGVzdEZ1bmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIF9mdW5jID0gdGVzdEZ1bmM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWFjaGFibGUnKTtcbiAgICB9XG5cbiAgICBsZXQgZnVuYyA9IHRoaXMuY29uc3RhbnRzLmZ1bmN0aW9uKF9mdW5jKTtcbiAgICB0aGlzLnB1c2goT3AuVGVzdCwgZnVuYyk7XG4gIH1cblxuICBqdW1wKHRhcmdldDogc3RyaW5nKSB7XG4gICAgdGhpcy5yZXNlcnZlKE9wLkp1bXApO1xuICAgIHRoaXMubGFiZWxzLnRhcmdldCh0aGlzLnBvcywgT3AuSnVtcCwgdGFyZ2V0KTtcbiAgfVxuXG4gIGp1bXBJZih0YXJnZXQ6IHN0cmluZykge1xuICAgIHRoaXMucmVzZXJ2ZShPcC5KdW1wSWYpO1xuICAgIHRoaXMubGFiZWxzLnRhcmdldCh0aGlzLnBvcywgT3AuSnVtcElmLCB0YXJnZXQpO1xuICB9XG5cbiAganVtcFVubGVzcyh0YXJnZXQ6IHN0cmluZykge1xuICAgIHRoaXMucmVzZXJ2ZShPcC5KdW1wVW5sZXNzKTtcbiAgICB0aGlzLmxhYmVscy50YXJnZXQodGhpcy5wb3MsIE9wLkp1bXBVbmxlc3MsIHRhcmdldCk7XG4gIH1cblxuICBzdHJpbmcoX3N0cmluZzogc3RyaW5nKTogQ29uc3RhbnRTdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbnN0YW50cy5zdHJpbmcoX3N0cmluZyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgbmFtZXMoX25hbWVzOiBzdHJpbmdbXSk6IENvbnN0YW50QXJyYXkge1xuICAgIGxldCBuYW1lcyA9IF9uYW1lcy5tYXAobiA9PiB0aGlzLmNvbnN0YW50cy5zdHJpbmcobikpO1xuICAgIHJldHVybiB0aGlzLmNvbnN0YW50cy5hcnJheShuYW1lcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3ltYm9scyhzeW1ib2xzOiBudW1iZXJbXSk6IENvbnN0YW50QXJyYXkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0YW50cy5hcnJheShzeW1ib2xzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvdGhlcih2YWx1ZTogT3BhcXVlKTogQ29uc3RhbnRPdGhlciB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RhbnRzLm90aGVyKHZhbHVlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBibG9jayhibG9jazogT3B0aW9uPEJsb2NrPik6IENvbnN0YW50QmxvY2sge1xuICAgIHJldHVybiBibG9jayA/IHRoaXMuY29uc3RhbnRzLmJsb2NrKGJsb2NrKSA6IDA7XG4gIH1cblxuICBwcm90ZWN0ZWQgZnVuYyhmdW5jOiBGdW5jdGlvbik6IENvbnN0YW50RnVuY3Rpb24ge1xuICAgIHJldHVybiB0aGlzLmNvbnN0YW50cy5mdW5jdGlvbihmdW5jKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0NvbXBpbGFibGVFeHByZXNzaW9uPEU+KGV4cHI6IFJlcHJlc2VudHM8RT4pOiBleHByIGlzIENvbXBpbGVzSW50bzxFPiB7XG4gIHJldHVybiBleHByICYmIHR5cGVvZiBleHByWydjb21waWxlJ10gPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wY29kZUJ1aWxkZXIgZXh0ZW5kcyBCYXNpY09wY29kZUJ1aWxkZXIge1xuICBwdWJsaWMgY29tcG9uZW50OiBJQ29tcG9uZW50QnVpbGRlcjtcblxuICBjb25zdHJ1Y3RvcihlbnY6IEVudmlyb25tZW50LCBtZXRhOiBDb21waWxhdGlvbk1ldGEsIHByb2dyYW06IFByb2dyYW0gPSBlbnYucHJvZ3JhbSkge1xuICAgIHN1cGVyKGVudiwgbWV0YSwgcHJvZ3JhbSk7XG4gICAgdGhpcy5jb21wb25lbnQgPSBuZXcgQ29tcG9uZW50QnVpbGRlcih0aGlzKTtcbiAgfVxuXG4gIGNvbXBpbGVBcmdzKHBhcmFtczogT3B0aW9uPFdpcmVGb3JtYXQuQ29yZS5QYXJhbXM+LCBoYXNoOiBPcHRpb248V2lyZUZvcm1hdC5Db3JlLkhhc2g+LCBzeW50aGV0aWM6IGJvb2xlYW4pIHtcbiAgICBsZXQgcG9zaXRpb25hbCA9IDA7XG5cbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICBwYXJhbXMuZm9yRWFjaChwID0+IGV4cHIocCwgdGhpcykpO1xuICAgICAgcG9zaXRpb25hbCA9IHBhcmFtcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgbGV0IG5hbWVzID0gRU1QVFlfQVJSQVk7XG5cbiAgICBpZiAoaGFzaCkge1xuICAgICAgbmFtZXMgPSBoYXNoWzBdO1xuICAgICAgaGFzaFsxXS5mb3JFYWNoKHYgPT4gZXhwcih2LCB0aGlzKSk7XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoSW1tZWRpYXRlKG5hbWVzKTtcbiAgICB0aGlzLnB1c2hBcmdzKHBvc2l0aW9uYWwsIHN5bnRoZXRpYyk7XG4gIH1cblxuICBjb21waWxlPEU+KGV4cHI6IFJlcHJlc2VudHM8RT4pOiBFIHtcbiAgICBpZiAoaXNDb21waWxhYmxlRXhwcmVzc2lvbihleHByKSkge1xuICAgICAgcmV0dXJuIGV4cHIuY29tcGlsZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGV4cHI7XG4gICAgfVxuICB9XG5cbiAgZ3VhcmRlZENhdXRpb3VzQXBwZW5kKGV4cHJlc3Npb246IFdpcmVGb3JtYXQuRXhwcmVzc2lvbikge1xuICAgIGV4cHIoZXhwcmVzc2lvbiwgdGhpcyk7XG4gICAgdGhpcy5keW5hbWljQ29udGVudChuZXcgY29udGVudC5HdWFyZGVkQ2F1dGlvdXNBcHBlbmRPcGNvZGUoKSk7XG4gIH1cblxuICBndWFyZGVkVHJ1c3RpbmdBcHBlbmQoZXhwcmVzc2lvbjogV2lyZUZvcm1hdC5FeHByZXNzaW9uKSB7XG4gICAgZXhwcihleHByZXNzaW9uLCB0aGlzKTtcbiAgICB0aGlzLmR5bmFtaWNDb250ZW50KG5ldyBjb250ZW50Lkd1YXJkZWRUcnVzdGluZ0FwcGVuZE9wY29kZSgpKTtcbiAgfVxuXG4gIGludm9rZUNvbXBvbmVudChhdHRyczogT3B0aW9uPFJhd0lubGluZUJsb2NrPiwgcGFyYW1zOiBPcHRpb248V2lyZUZvcm1hdC5Db3JlLlBhcmFtcz4sIGhhc2g6IE9wdGlvbjxXaXJlRm9ybWF0LkNvcmUuSGFzaD4sIGJsb2NrOiBPcHRpb248QmxvY2s+LCBpbnZlcnNlOiBPcHRpb248QmxvY2s+ID0gbnVsbCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZUNvbXBvbmVudFN0YXRlKCk7XG5cbiAgICB0aGlzLmZldGNoKFJlZ2lzdGVyLnMwKTtcbiAgICB0aGlzLmR1cChSZWdpc3Rlci5zcCwgMSk7XG4gICAgdGhpcy5sb2FkKFJlZ2lzdGVyLnMwKTtcblxuICAgIHRoaXMucHVzaEJsb2NrKGJsb2NrKTtcbiAgICB0aGlzLnB1c2hCbG9jayhpbnZlcnNlKTtcblxuICAgIHRoaXMuY29tcGlsZUFyZ3MocGFyYW1zLCBoYXNoLCBmYWxzZSk7XG4gICAgdGhpcy5wcmVwYXJlQXJncyhSZWdpc3Rlci5zMCk7XG5cbiAgICB0aGlzLmJlZ2luQ29tcG9uZW50VHJhbnNhY3Rpb24oKTtcbiAgICB0aGlzLnB1c2hEeW5hbWljU2NvcGUoKTtcbiAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudChSZWdpc3Rlci5zMCwgdHJ1ZSwgaW52ZXJzZSA9PT0gbnVsbCk7XG4gICAgdGhpcy5yZWdpc3RlckNvbXBvbmVudERlc3RydWN0b3IoUmVnaXN0ZXIuczApO1xuXG4gICAgdGhpcy5nZXRDb21wb25lbnRTZWxmKFJlZ2lzdGVyLnMwKTtcbiAgICB0aGlzLmdldENvbXBvbmVudExheW91dChSZWdpc3Rlci5zMCk7XG4gICAgdGhpcy5pbnZva2VEeW5hbWljKG5ldyBJbnZva2VEeW5hbWljTGF5b3V0KGF0dHJzICYmIGF0dHJzLnNjYW4oKSkpO1xuICAgIHRoaXMucG9wRnJhbWUoKTtcblxuICAgIHRoaXMucG9wU2NvcGUoKTtcbiAgICB0aGlzLnBvcER5bmFtaWNTY29wZSgpO1xuICAgIHRoaXMuY29tbWl0Q29tcG9uZW50VHJhbnNhY3Rpb24oKTtcblxuICAgIHRoaXMubG9hZChSZWdpc3Rlci5zMCk7XG4gIH1cblxuICB0ZW1wbGF0ZShibG9jazogT3B0aW9uPFdpcmVGb3JtYXQuU2VyaWFsaXplZElubGluZUJsb2NrPik6IE9wdGlvbjxSYXdJbmxpbmVCbG9jaz4ge1xuICAgIGlmICghYmxvY2spIHJldHVybiBudWxsO1xuICAgIHJldHVybiBuZXcgUmF3SW5saW5lQmxvY2sodGhpcy5lbnYsIHRoaXMubWV0YSwgYmxvY2suc3RhdGVtZW50cywgYmxvY2sucGFyYW1ldGVycyk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgQmxvY2tDYWxsYmFjayA9IChkc2w6IE9wY29kZUJ1aWxkZXIsIEJFR0lOOiBMYWJlbCwgRU5EOiBMYWJlbCkgPT4gdm9pZDtcbiJdfQ==","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { CompiledDynamicTemplate } from './compiled/blocks';\nimport { Ops } from '@glimmer/wire-format';\nimport { Register } from './opcodes';\nimport { ATTRS_BLOCK, ClientSide, compileStatement } from './scanner';\nimport { expr } from './syntax/functions';\nimport OpcodeBuilderDSL from './compiled/opcodes/builder';\nexport function compileLayout(compilable, env) {\n    var builder = new ComponentLayoutBuilder(env);\n    compilable.compile(builder);\n    return builder.compile();\n}\n\nvar ComponentLayoutBuilder = function () {\n    function ComponentLayoutBuilder(env) {\n        _classCallCheck(this, ComponentLayoutBuilder);\n\n        this.env = env;\n    }\n\n    ComponentLayoutBuilder.prototype.wrapLayout = function wrapLayout(layout) {\n        this.inner = new WrappedBuilder(this.env, layout);\n    };\n\n    ComponentLayoutBuilder.prototype.fromLayout = function fromLayout(layout) {\n        this.inner = new UnwrappedBuilder(this.env, layout);\n    };\n\n    ComponentLayoutBuilder.prototype.compile = function compile() {\n        return this.inner.compile();\n    };\n\n    _createClass(ComponentLayoutBuilder, [{\n        key: 'tag',\n        get: function () {\n            return this.inner.tag;\n        }\n    }, {\n        key: 'attrs',\n        get: function () {\n            return this.inner.attrs;\n        }\n    }]);\n\n    return ComponentLayoutBuilder;\n}();\n\nvar WrappedBuilder = function () {\n    function WrappedBuilder(env, layout) {\n        _classCallCheck(this, WrappedBuilder);\n\n        this.env = env;\n        this.layout = layout;\n        this.tag = new ComponentTagBuilder();\n        this.attrs = new ComponentAttrsBuilder();\n    }\n\n    WrappedBuilder.prototype.compile = function compile() {\n        //========DYNAMIC\n        //        PutValue(TagExpr)\n        //        Test\n        //        JumpUnless(BODY)\n        //        OpenDynamicPrimitiveElement\n        //        DidCreateElement\n        //        ...attr statements...\n        //        FlushElement\n        // BODY:  Noop\n        //        ...body statements...\n        //        PutValue(TagExpr)\n        //        Test\n        //        JumpUnless(END)\n        //        CloseElement\n        // END:   Noop\n        //        DidRenderLayout\n        //        Exit\n        //\n        //========STATIC\n        //        OpenPrimitiveElementOpcode\n        //        DidCreateElement\n        //        ...attr statements...\n        //        FlushElement\n        //        ...body statements...\n        //        CloseElement\n        //        DidRenderLayout\n        //        Exit\n        var env = this.env,\n            layout = this.layout;\n\n        var meta = { templateMeta: layout.meta, symbols: layout.symbols, asPartial: false };\n        var dynamicTag = this.tag.getDynamic();\n        var staticTag = this.tag.getStatic();\n        var b = builder(env, meta);\n        b.startLabels();\n        if (dynamicTag) {\n            b.fetch(Register.s1);\n            expr(dynamicTag, b);\n            b.dup();\n            b.load(Register.s1);\n            b.test('simple');\n            b.jumpUnless('BODY');\n            b.fetch(Register.s1);\n            b.pushComponentOperations();\n            b.openDynamicElement();\n        } else if (staticTag) {\n            b.pushComponentOperations();\n            b.openElementWithOperations(staticTag);\n        }\n        if (dynamicTag || staticTag) {\n            b.didCreateElement(Register.s0);\n            var attrs = this.attrs['buffer'];\n            for (var i = 0; i < attrs.length; i++) {\n                compileStatement(attrs[i], b);\n            }\n            b.flushElement();\n        }\n        b.label('BODY');\n        b.invokeStatic(layout.asBlock());\n        if (dynamicTag) {\n            b.fetch(Register.s1);\n            b.test('simple');\n            b.jumpUnless('END');\n            b.closeElement();\n        } else if (staticTag) {\n            b.closeElement();\n        }\n        b.label('END');\n        b.didRenderLayout(Register.s0);\n        if (dynamicTag) {\n            b.load(Register.s1);\n        }\n        b.stopLabels();\n        var start = b.start;\n        var end = b.finalize();\n        return new CompiledDynamicTemplate(start, end, {\n            meta: meta,\n            hasEval: layout.hasEval,\n            symbols: layout.symbols.concat([ATTRS_BLOCK])\n        });\n    };\n\n    return WrappedBuilder;\n}();\n\nvar UnwrappedBuilder = function () {\n    function UnwrappedBuilder(env, layout) {\n        _classCallCheck(this, UnwrappedBuilder);\n\n        this.env = env;\n        this.layout = layout;\n        this.attrs = new ComponentAttrsBuilder();\n    }\n\n    UnwrappedBuilder.prototype.compile = function compile() {\n        var env = this.env,\n            layout = this.layout;\n\n        return layout.asLayout(this.attrs['buffer']).compileDynamic(env);\n    };\n\n    _createClass(UnwrappedBuilder, [{\n        key: 'tag',\n        get: function () {\n            throw new Error('BUG: Cannot call `tag` on an UnwrappedBuilder');\n        }\n    }]);\n\n    return UnwrappedBuilder;\n}();\n\nvar ComponentTagBuilder = function () {\n    function ComponentTagBuilder() {\n        _classCallCheck(this, ComponentTagBuilder);\n\n        this.isDynamic = null;\n        this.isStatic = null;\n        this.staticTagName = null;\n        this.dynamicTagName = null;\n    }\n\n    ComponentTagBuilder.prototype.getDynamic = function getDynamic() {\n        if (this.isDynamic) {\n            return this.dynamicTagName;\n        }\n    };\n\n    ComponentTagBuilder.prototype.getStatic = function getStatic() {\n        if (this.isStatic) {\n            return this.staticTagName;\n        }\n    };\n\n    ComponentTagBuilder.prototype.static = function _static(tagName) {\n        this.isStatic = true;\n        this.staticTagName = tagName;\n    };\n\n    ComponentTagBuilder.prototype.dynamic = function dynamic(tagName) {\n        this.isDynamic = true;\n        this.dynamicTagName = [Ops.ClientSideExpression, ClientSide.Ops.FunctionExpression, tagName];\n    };\n\n    return ComponentTagBuilder;\n}();\n\nvar ComponentAttrsBuilder = function () {\n    function ComponentAttrsBuilder() {\n        _classCallCheck(this, ComponentAttrsBuilder);\n\n        this.buffer = [];\n    }\n\n    ComponentAttrsBuilder.prototype.static = function _static(name, value) {\n        this.buffer.push([Ops.StaticAttr, name, value, null]);\n    };\n\n    ComponentAttrsBuilder.prototype.dynamic = function dynamic(name, value) {\n        this.buffer.push([Ops.DynamicAttr, name, [Ops.ClientSideExpression, ClientSide.Ops.FunctionExpression, value], null]);\n    };\n\n    return ComponentAttrsBuilder;\n}();\n\nexport var ComponentBuilder = function () {\n    function ComponentBuilder(builder) {\n        _classCallCheck(this, ComponentBuilder);\n\n        this.builder = builder;\n        this.env = builder.env;\n    }\n\n    ComponentBuilder.prototype.static = function _static(definition, args) {\n        var params = args[0],\n            hash = args[1],\n            _default = args[2],\n            inverse = args[3];\n        var builder = this.builder;\n\n        builder.pushComponentManager(definition);\n        builder.invokeComponent(null, params, hash, _default, inverse);\n    };\n\n    ComponentBuilder.prototype.dynamic = function dynamic(definitionArgs, getDefinition, args) {\n        var params = args[0],\n            hash = args[1],\n            block = args[2],\n            inverse = args[3];\n        var builder = this.builder;\n\n        if (!definitionArgs || definitionArgs.length === 0) {\n            throw new Error(\"Dynamic syntax without an argument\");\n        }\n        var meta = this.builder.meta.templateMeta;\n        function helper(vm, args) {\n            return getDefinition(vm, args, meta);\n        }\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        builder.compileArgs(definitionArgs[0], definitionArgs[1], true);\n        builder.helper(helper);\n        builder.dup();\n        builder.test('simple');\n        builder.enter(2);\n        builder.jumpUnless('ELSE');\n        builder.pushDynamicComponentManager();\n        builder.invokeComponent(null, params, hash, block, inverse);\n        builder.label('ELSE');\n        builder.exit();\n        builder.return();\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    };\n\n    return ComponentBuilder;\n}();\nexport function builder(env, meta) {\n    return new OpcodeBuilderDSL(env, meta);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { CompiledDynamicTemplate, CompiledStaticTemplate } from './compiled/blocks';\nimport { builder } from './compiler';\nimport { EMPTY_ARRAY } from '@glimmer/util';\nimport * as WireFormat from '@glimmer/wire-format';\nimport { STATEMENTS } from './syntax/functions';\nexport function compileStatement(statement, builder) {\n    STATEMENTS.compile(statement, builder);\n}\nexport var CompilableTemplate = function () {\n    function CompilableTemplate(statements, symbolTable) {\n        _classCallCheck(this, CompilableTemplate);\n\n        this.statements = statements;\n        this.symbolTable = symbolTable;\n        this.compiledStatic = null;\n        this.compiledDynamic = null;\n    }\n\n    CompilableTemplate.prototype.compileStatic = function compileStatic(env) {\n        var compiledStatic = this.compiledStatic;\n\n        if (!compiledStatic) {\n            var _builder = compileStatements(this.statements, this.symbolTable.meta, env);\n            var start = _builder.start;\n            var end = _builder.finalize();\n            compiledStatic = this.compiledStatic = new CompiledStaticTemplate(start, end);\n        }\n        return compiledStatic;\n    };\n\n    CompilableTemplate.prototype.compileDynamic = function compileDynamic(env) {\n        var compiledDynamic = this.compiledDynamic;\n\n        if (!compiledDynamic) {\n            var staticBlock = this.compileStatic(env);\n            compiledDynamic = new CompiledDynamicTemplate(staticBlock.start, staticBlock.end, this.symbolTable);\n        }\n        return compiledDynamic;\n    };\n\n    return CompilableTemplate;\n}();\nfunction compileStatements(statements, meta, env) {\n    var b = builder(env, meta);\n    for (var statement of statements) {\n        compileStatement(statement, b);\n    }\n    return b;\n}\nexport var ATTRS_BLOCK = '&attrs';\nexport function layout(prelude, head, body, symbolTable) {\n    var _prelude$pop = prelude.pop(),\n        tag = _prelude$pop[1];\n\n    prelude.push([Ops.ClientSideStatement, ClientSide.Ops.OpenComponentElement, tag]);\n    prelude.push([Ops.ClientSideStatement, ClientSide.Ops.DidCreateElement]);\n    var attrsSymbol = symbolTable.symbols.length + 1;\n    symbolTable.symbols.push(ATTRS_BLOCK);\n    var statements = prelude.concat([[Ops.Yield, attrsSymbol, EMPTY_ARRAY]]).concat(head).concat(body).concat([[Ops.ClientSideStatement, ClientSide.Ops.DidRenderLayout]]);\n    return new CompilableTemplate(statements, symbolTable);\n}\n\nvar Scanner = function () {\n    function Scanner(block, env) {\n        _classCallCheck(this, Scanner);\n\n        this.block = block;\n        this.env = env;\n    }\n\n    Scanner.prototype.scanEntryPoint = function scanEntryPoint(meta) {\n        var block = this.block,\n            env = this.env;\n\n        var statements = void 0;\n        if (block.prelude && block.head) {\n            statements = block.prelude.concat(block.head).concat(block.statements);\n        } else {\n            statements = block.statements;\n        }\n        return new RawProgram(env, meta, statements, block.symbols, block.hasEval).scan();\n    };\n\n    Scanner.prototype.scanBlock = function scanBlock(meta) {\n        var block = this.block,\n            env = this.env;\n\n        var statements = void 0;\n        if (block.prelude && block.head) {\n            statements = block.prelude.concat(block.head).concat(block.statements);\n        } else {\n            statements = block.statements;\n        }\n        return new RawInlineBlock(env, meta, statements, EMPTY_ARRAY).scan();\n    };\n\n    Scanner.prototype.scanLayout = function scanLayout(meta, attrs) {\n        var block = this.block;\n        var symbols = block.symbols,\n            hasEval = block.hasEval;\n\n        if (!block.prelude || !block.head) {\n            throw new Error('A layout must have a top-level element');\n        }\n        var symbolTable = { meta: meta, hasEval: hasEval, symbols: symbols };\n\n        var _scanBlock = scanBlock({ statements: block.prelude, parameters: EMPTY_ARRAY }, meta, this.env),\n            prelude = _scanBlock.statements;\n\n        var _scanBlock2 = scanBlock({ statements: [].concat(attrs, block.head), parameters: EMPTY_ARRAY }, meta, this.env),\n            head = _scanBlock2.statements;\n\n        var _scanBlock3 = scanBlock({ statements: block.statements, parameters: EMPTY_ARRAY }, meta, this.env),\n            body = _scanBlock3.statements;\n\n        return layout(prelude, head, body, symbolTable);\n    };\n\n    return Scanner;\n}();\n\nexport default Scanner;\n\nexport function scanBlock(block, meta, env) {\n    return new RawInlineBlock(env, meta, block.statements, EMPTY_ARRAY).scan();\n}\nexport var ClientSide;\n(function (ClientSide) {\n    var Ops;\n    (function (Ops) {\n        Ops[Ops[\"OpenComponentElement\"] = 0] = \"OpenComponentElement\";\n        Ops[Ops[\"DidCreateElement\"] = 1] = \"DidCreateElement\";\n        Ops[Ops[\"DidRenderLayout\"] = 2] = \"DidRenderLayout\";\n        Ops[Ops[\"OptimizedAppend\"] = 3] = \"OptimizedAppend\";\n        Ops[Ops[\"UnoptimizedAppend\"] = 4] = \"UnoptimizedAppend\";\n        Ops[Ops[\"StaticPartial\"] = 5] = \"StaticPartial\";\n        Ops[Ops[\"DynamicPartial\"] = 6] = \"DynamicPartial\";\n        Ops[Ops[\"NestedBlock\"] = 7] = \"NestedBlock\";\n        Ops[Ops[\"ScannedBlock\"] = 8] = \"ScannedBlock\";\n        Ops[Ops[\"FunctionExpression\"] = 9] = \"FunctionExpression\";\n    })(Ops = ClientSide.Ops || (ClientSide.Ops = {}));\n    function is(variant) {\n        return function (value) {\n            return value[0] === WireFormat.Ops.ClientSideExpression || value[0] === WireFormat.Ops.ClientSideStatement && value[1] === variant;\n        };\n    }\n    ClientSide.is = is;\n})(ClientSide || (ClientSide = {}));\nvar Ops = WireFormat.Ops;\n\nexport var RawBlock = function () {\n    function RawBlock(env, meta, statements) {\n        _classCallCheck(this, RawBlock);\n\n        this.env = env;\n        this.meta = meta;\n        this.statements = statements;\n    }\n\n    RawBlock.prototype.scanStatements = function scanStatements() {\n        var buffer = [];\n        var statements = this.statements;\n        for (var statement of statements) {\n            buffer.push(statement);\n        }\n        return buffer;\n    };\n\n    RawBlock.prototype.child = function child(block) {\n        if (!block) return null;\n        return new RawInlineBlock(this.env, this.meta, block.statements, block.parameters);\n    };\n\n    return RawBlock;\n}();\nexport var RawInlineBlock = function (_RawBlock) {\n    _inherits(RawInlineBlock, _RawBlock);\n\n    function RawInlineBlock(env, meta, statements, parameters) {\n        _classCallCheck(this, RawInlineBlock);\n\n        var _this = _possibleConstructorReturn(this, _RawBlock.call(this, env, meta, statements));\n\n        _this.parameters = parameters;\n        return _this;\n    }\n\n    RawInlineBlock.prototype.scan = function scan() {\n        var statements = this.scanStatements();\n        return new CompilableTemplate(statements, { parameters: this.parameters, meta: this.meta });\n    };\n\n    return RawInlineBlock;\n}(RawBlock);\nexport var RawProgram = function (_RawBlock2) {\n    _inherits(RawProgram, _RawBlock2);\n\n    function RawProgram(env, meta, statements, symbols, hasEval) {\n        _classCallCheck(this, RawProgram);\n\n        var _this2 = _possibleConstructorReturn(this, _RawBlock2.call(this, env, meta, statements));\n\n        _this2.symbols = symbols;\n        _this2.hasEval = hasEval;\n        return _this2;\n    }\n\n    RawProgram.prototype.scan = function scan() {\n        var statements = this.scanStatements();\n        return new CompilableTemplate(statements, { symbols: this.symbols, hasEval: this.hasEval, meta: this.meta });\n    };\n\n    return RawProgram;\n}(RawBlock);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport * as WireFormat from '@glimmer/wire-format';\nimport { Register } from '../opcodes';\nimport { ATTRS_BLOCK, ClientSide, RawInlineBlock } from '../scanner';\nimport { EMPTY_ARRAY, dict } from '@glimmer/util';\nimport { map } from '@glimmer/reference';\nvar Ops = WireFormat.Ops;\nexport var Compilers = function () {\n    function Compilers() {\n        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        _classCallCheck(this, Compilers);\n\n        this.offset = offset;\n        this.names = dict();\n        this.funcs = [];\n    }\n\n    Compilers.prototype.add = function add(name, func) {\n        this.funcs.push(func);\n        this.names[name] = this.funcs.length - 1;\n    };\n\n    Compilers.prototype.compile = function compile(sexp, builder) {\n        var name = sexp[this.offset];\n        var index = this.names[name];\n        var func = this.funcs[index];\n        func(sexp, builder);\n    };\n\n    return Compilers;\n}();\nexport var STATEMENTS = new Compilers();\nexport var CLIENT_SIDE = new Compilers(1);\nSTATEMENTS.add(Ops.Text, function (sexp, builder) {\n    builder.text(sexp[1]);\n});\nSTATEMENTS.add(Ops.Comment, function (sexp, builder) {\n    builder.comment(sexp[1]);\n});\nSTATEMENTS.add(Ops.CloseElement, function (_sexp, builder) {\n    builder.closeElement();\n});\nSTATEMENTS.add(Ops.FlushElement, function (_sexp, builder) {\n    builder.flushElement();\n});\nSTATEMENTS.add(Ops.Modifier, function (sexp, builder) {\n    var env = builder.env,\n        meta = builder.meta;\n    var name = sexp[1],\n        params = sexp[2],\n        hash = sexp[3];\n\n    if (env.hasModifier(name, meta.templateMeta)) {\n        builder.compileArgs(params, hash, true);\n        builder.modifier(env.lookupModifier(name, meta.templateMeta));\n    } else {\n        throw new Error('Compile Error ' + name + ' is not a modifier: Helpers may not be used in the element form.');\n    }\n});\nSTATEMENTS.add(Ops.StaticAttr, function (sexp, builder) {\n    var name = sexp[1],\n        value = sexp[2],\n        namespace = sexp[3];\n\n    builder.staticAttr(name, namespace, value);\n});\nSTATEMENTS.add(Ops.DynamicAttr, function (sexp, builder) {\n    dynamicAttr(sexp, false, builder);\n});\nSTATEMENTS.add(Ops.TrustingAttr, function (sexp, builder) {\n    dynamicAttr(sexp, true, builder);\n});\nfunction dynamicAttr(sexp, trusting, builder) {\n    var name = sexp[1],\n        value = sexp[2],\n        namespace = sexp[3];\n\n    expr(value, builder);\n    if (namespace) {\n        builder.dynamicAttrNS(name, namespace, trusting);\n    } else {\n        builder.dynamicAttr(name, trusting);\n    }\n}\nSTATEMENTS.add(Ops.OpenElement, function (sexp, builder) {\n    builder.openPrimitiveElement(sexp[1]);\n});\nCLIENT_SIDE.add(ClientSide.Ops.OpenComponentElement, function (sexp, builder) {\n    builder.pushComponentOperations();\n    builder.openElementWithOperations(sexp[2]);\n});\nCLIENT_SIDE.add(ClientSide.Ops.DidCreateElement, function (_sexp, builder) {\n    builder.didCreateElement(Register.s0);\n});\nCLIENT_SIDE.add(ClientSide.Ops.DidRenderLayout, function (_sexp, builder) {\n    builder.didRenderLayout(Register.s0);\n});\nSTATEMENTS.add(Ops.Append, function (sexp, builder) {\n    var value = sexp[1],\n        trusting = sexp[2];\n\n    var _builder$env$macros = builder.env.macros(),\n        inlines = _builder$env$macros.inlines;\n\n    var returned = inlines.compile(sexp, builder) || value;\n    if (returned === true) return;\n    expr(value, builder);\n    if (trusting) {\n        builder.trustingAppend();\n    } else {\n        builder.cautiousAppend();\n    }\n});\n// CLIENT_SIDE.add(ClientSide.Ops.UnoptimizedAppend, (sexp: ClientSide.UnoptimizedAppend, builder) => {\n//   let [,, value, trustingMorph] = sexp;\n//   let { inlines } = builder.env.macros();\n//   let returned = inlines.compile(sexp, builder) || value;\n//   if (returned === true) return;\n//   if (trustingMorph) {\n//     builder.guardedTrustingAppend(returned[1]);\n//   } else {\n//     builder.guardedCautiousAppend(returned[1]);\n//   }\n// });\nSTATEMENTS.add(Ops.Block, function (sexp, builder) {\n    var name = sexp[1],\n        params = sexp[2],\n        hash = sexp[3],\n        _template = sexp[4],\n        _inverse = sexp[5];\n\n    var template = builder.template(_template);\n    var inverse = builder.template(_inverse);\n    var templateBlock = template && template.scan();\n    var inverseBlock = inverse && inverse.scan();\n\n    var _builder$env$macros2 = builder.env.macros(),\n        blocks = _builder$env$macros2.blocks;\n\n    blocks.compile(name, params, hash, templateBlock, inverseBlock, builder);\n});\nexport var InvokeDynamicLayout = function () {\n    function InvokeDynamicLayout(attrs) {\n        _classCallCheck(this, InvokeDynamicLayout);\n\n        this.attrs = attrs;\n    }\n\n    InvokeDynamicLayout.prototype.invoke = function invoke(vm, layout) {\n        var _layout$symbolTable = layout.symbolTable,\n            symbols = _layout$symbolTable.symbols,\n            hasEval = _layout$symbolTable.hasEval;\n\n        var stack = vm.stack;\n        var scope = vm.pushRootScope(symbols.length + 1, true);\n        scope.bindSelf(stack.pop());\n        scope.bindBlock(symbols.indexOf(ATTRS_BLOCK) + 1, this.attrs);\n        var lookup = null;\n        var $eval = -1;\n        if (hasEval) {\n            $eval = symbols.indexOf('$eval') + 1;\n            lookup = dict();\n        }\n        var callerNames = stack.pop();\n        for (var i = callerNames.length - 1; i >= 0; i--) {\n            var symbol = symbols.indexOf(callerNames[i]);\n            var value = stack.pop();\n            if (symbol !== -1) scope.bindSymbol(symbol + 1, value);\n            if (hasEval) lookup[callerNames[i]] = value;\n        }\n        var inverseSymbol = symbols.indexOf('&inverse');\n        var inverse = stack.pop();\n        if (inverseSymbol !== -1) {\n            scope.bindBlock(inverseSymbol + 1, inverse);\n        }\n        if (lookup) lookup['&inverse'] = inverse;\n        var defaultSymbol = symbols.indexOf('&default');\n        var defaultBlock = stack.pop();\n        if (defaultSymbol !== -1) {\n            scope.bindBlock(defaultSymbol + 1, defaultBlock);\n        }\n        if (lookup) lookup['&default'] = defaultBlock;\n        if (lookup) scope.bindEvalScope(lookup);\n        vm.pushFrame();\n        vm.call(layout.start);\n    };\n\n    return InvokeDynamicLayout;\n}();\nSTATEMENTS.add(Ops.Component, function (sexp, builder) {\n    var tag = sexp[1],\n        attrs = sexp[2],\n        args = sexp[3],\n        block = sexp[4];\n\n    if (builder.env.hasComponentDefinition(tag, builder.meta.templateMeta)) {\n        var child = builder.template(block);\n        var attrsBlock = new RawInlineBlock(builder.env, builder.meta, attrs, EMPTY_ARRAY);\n        var definition = builder.env.getComponentDefinition(tag, builder.meta.templateMeta);\n        builder.pushComponentManager(definition);\n        builder.invokeComponent(attrsBlock, null, args, child && child.scan());\n    } else if (block && block.parameters.length) {\n        throw new Error('Compile Error: Cannot find component ' + tag);\n    } else {\n        builder.openPrimitiveElement(tag);\n        attrs.forEach(function (attr) {\n            return STATEMENTS.compile(attr, builder);\n        });\n        builder.flushElement();\n        if (block) block.statements.forEach(function (s) {\n            return STATEMENTS.compile(s, builder);\n        });\n        builder.closeElement();\n    }\n});\nexport var PartialInvoker = function () {\n    function PartialInvoker(outerSymbols, evalInfo) {\n        _classCallCheck(this, PartialInvoker);\n\n        this.outerSymbols = outerSymbols;\n        this.evalInfo = evalInfo;\n    }\n\n    PartialInvoker.prototype.invoke = function invoke(vm, _partial) {\n        var partial = _partial;\n        var partialSymbols = partial.symbolTable.symbols;\n        var outerScope = vm.scope();\n        var partialScope = vm.pushRootScope(partialSymbols.length, false);\n        partialScope.bindCallerScope(outerScope.getCallerScope());\n        partialScope.bindEvalScope(outerScope.getEvalScope());\n        partialScope.bindSelf(outerScope.getSelf());\n        var evalInfo = this.evalInfo,\n            outerSymbols = this.outerSymbols;\n\n        var locals = dict();\n        evalInfo.forEach(function (slot) {\n            var name = outerSymbols[slot - 1];\n            var ref = outerScope.getSymbol(slot);\n            locals[name] = ref;\n        });\n        var evalScope = outerScope.getEvalScope();\n        partialSymbols.forEach(function (name, i) {\n            var symbol = i + 1;\n            var value = evalScope[name];\n            if (value !== undefined) partialScope.bind(symbol, value);\n        });\n        partialScope.bindPartialMap(locals);\n        vm.pushFrame();\n        vm.call(partial.start);\n    };\n\n    return PartialInvoker;\n}();\nSTATEMENTS.add(Ops.Partial, function (sexp, builder) {\n    var name = sexp[1],\n        evalInfo = sexp[2];\n    var _builder$meta = builder.meta,\n        templateMeta = _builder$meta.templateMeta,\n        symbols = _builder$meta.symbols;\n\n    function helper(vm, args) {\n        var env = vm.env;\n\n        var nameRef = args.positional.at(0);\n        return map(nameRef, function (name) {\n            if (typeof name === 'string' && name) {\n                if (!env.hasPartial(name, templateMeta)) {\n                    throw new Error('Could not find a partial named \"' + name + '\"');\n                }\n                return env.lookupPartial(name, templateMeta);\n            } else if (name) {\n                throw new Error('Could not find a partial named \"' + String(name) + '\"');\n            } else {\n                return null;\n            }\n        });\n    }\n    builder.startLabels();\n    builder.pushFrame();\n    builder.returnTo('END');\n    expr(name, builder);\n    builder.pushImmediate(EMPTY_ARRAY);\n    builder.pushArgs(1, true);\n    builder.helper(helper);\n    builder.dup();\n    builder.test('simple');\n    builder.enter(2);\n    builder.jumpUnless('ELSE');\n    builder.getPartialTemplate();\n    builder.compileDynamicBlock();\n    builder.invokeDynamic(new PartialInvoker(symbols, evalInfo));\n    builder.popScope();\n    builder.popFrame();\n    builder.label('ELSE');\n    builder.exit();\n    builder.return();\n    builder.label('END');\n    builder.popFrame();\n    builder.stopLabels();\n});\n\nvar InvokeDynamicYield = function () {\n    function InvokeDynamicYield(callerCount) {\n        _classCallCheck(this, InvokeDynamicYield);\n\n        this.callerCount = callerCount;\n    }\n\n    InvokeDynamicYield.prototype.invoke = function invoke(vm, block) {\n        var callerCount = this.callerCount;\n\n        var stack = vm.stack;\n        if (!block) {\n            // To balance the pop{Frame,Scope}\n            vm.pushFrame();\n            vm.pushCallerScope();\n            return;\n        }\n        var table = block.symbolTable;\n        var locals = table.parameters; // always present in inline blocks\n        var calleeCount = locals ? locals.length : 0;\n        var count = Math.min(callerCount, calleeCount);\n        vm.pushFrame();\n        vm.pushCallerScope(calleeCount > 0);\n        var scope = vm.scope();\n        for (var i = 0; i < count; i++) {\n            scope.bindSymbol(locals[i], stack.fromBase(callerCount - i));\n        }\n        vm.call(block.start);\n    };\n\n    return InvokeDynamicYield;\n}();\n\nSTATEMENTS.add(Ops.Yield, function (sexp, builder) {\n    var to = sexp[1],\n        params = sexp[2];\n\n    var count = compileList(params, builder);\n    builder.getBlock(to);\n    builder.compileDynamicBlock();\n    builder.invokeDynamic(new InvokeDynamicYield(count));\n    builder.popScope();\n    builder.popFrame();\n    if (count) {\n        builder.pop(count);\n    }\n});\nSTATEMENTS.add(Ops.Debugger, function (sexp, builder) {\n    var evalInfo = sexp[1];\n\n    builder.debugger(builder.meta.symbols, evalInfo);\n});\nSTATEMENTS.add(Ops.ClientSideStatement, function (sexp, builder) {\n    CLIENT_SIDE.compile(sexp, builder);\n});\nvar EXPRESSIONS = new Compilers();\nvar CLIENT_SIDE_EXPRS = new Compilers(1);\nexport function expr(expression, builder) {\n    if (Array.isArray(expression)) {\n        EXPRESSIONS.compile(expression, builder);\n    } else {\n        builder.primitive(expression);\n    }\n}\nEXPRESSIONS.add(Ops.Unknown, function (sexp, builder) {\n    var name = sexp[1];\n    if (builder.env.hasHelper(name, builder.meta.templateMeta)) {\n        EXPRESSIONS.compile([Ops.Helper, name, EMPTY_ARRAY, null], builder);\n    } else if (builder.meta.asPartial) {\n        builder.resolveMaybeLocal(name);\n    } else {\n        builder.getVariable(0);\n        builder.getProperty(name);\n    }\n});\nEXPRESSIONS.add(Ops.Concat, function (sexp, builder) {\n    var parts = sexp[1];\n    parts.forEach(function (p) {\n        return expr(p, builder);\n    });\n    builder.concat(parts.length);\n});\nCLIENT_SIDE_EXPRS.add(ClientSide.Ops.FunctionExpression, function (sexp, builder) {\n    builder.function(sexp[2]);\n});\nEXPRESSIONS.add(Ops.Helper, function (sexp, builder) {\n    var env = builder.env,\n        meta = builder.meta;\n    var name = sexp[1],\n        params = sexp[2],\n        hash = sexp[3];\n\n    if (env.hasHelper(name, meta.templateMeta)) {\n        builder.compileArgs(params, hash, true);\n        builder.helper(env.lookupHelper(name, meta.templateMeta));\n    } else {\n        throw new Error('Compile Error: ' + name + ' is not a helper');\n    }\n});\nEXPRESSIONS.add(Ops.Get, function (sexp, builder) {\n    var head = sexp[1],\n        path = sexp[2];\n\n    builder.getVariable(head);\n    path.forEach(function (p) {\n        return builder.getProperty(p);\n    });\n});\nEXPRESSIONS.add(Ops.MaybeLocal, function (sexp, builder) {\n    var path = sexp[1];\n\n    if (builder.meta.asPartial) {\n        var head = path[0];\n        path = path.slice(1);\n        builder.resolveMaybeLocal(head);\n    } else {\n        builder.getVariable(0);\n    }\n    path.forEach(function (p) {\n        return builder.getProperty(p);\n    });\n});\nEXPRESSIONS.add(Ops.Undefined, function (_sexp, builder) {\n    return builder.primitive(undefined);\n});\nEXPRESSIONS.add(Ops.HasBlock, function (sexp, builder) {\n    builder.hasBlock(sexp[1]);\n});\nEXPRESSIONS.add(Ops.HasBlockParams, function (sexp, builder) {\n    builder.hasBlockParams(sexp[1]);\n});\nEXPRESSIONS.add(Ops.ClientSideExpression, function (sexp, builder) {\n    CLIENT_SIDE_EXPRS.compile(sexp, builder);\n});\nexport function compileList(params, builder) {\n    if (!params) return 0;\n    params.forEach(function (p) {\n        return expr(p, builder);\n    });\n    return params.length;\n}\nexport var Blocks = function () {\n    function Blocks() {\n        _classCallCheck(this, Blocks);\n\n        this.names = dict();\n        this.funcs = [];\n    }\n\n    Blocks.prototype.add = function add(name, func) {\n        this.funcs.push(func);\n        this.names[name] = this.funcs.length - 1;\n    };\n\n    Blocks.prototype.addMissing = function addMissing(func) {\n        this.missing = func;\n    };\n\n    Blocks.prototype.compile = function compile(name, params, hash, template, inverse, builder) {\n        var index = this.names[name];\n        if (index === undefined) {\n            var func = this.missing;\n            var handled = func(name, params, hash, template, inverse, builder);\n        } else {\n            var _func = this.funcs[index];\n            _func(params, hash, template, inverse, builder);\n        }\n    };\n\n    return Blocks;\n}();\nexport var BLOCKS = new Blocks();\nexport var Inlines = function () {\n    function Inlines() {\n        _classCallCheck(this, Inlines);\n\n        this.names = dict();\n        this.funcs = [];\n    }\n\n    Inlines.prototype.add = function add(name, func) {\n        this.funcs.push(func);\n        this.names[name] = this.funcs.length - 1;\n    };\n\n    Inlines.prototype.addMissing = function addMissing(func) {\n        this.missing = func;\n    };\n\n    Inlines.prototype.compile = function compile(sexp, builder) {\n        var value = sexp[1];\n        // TODO: Fix this so that expression macros can return\n        // things like components, so that {{component foo}}\n        // is the same as {{(component foo)}}\n        if (!Array.isArray(value)) return ['expr', value];\n        var name = void 0;\n        var params = void 0;\n        var hash = void 0;\n        if (value[0] === Ops.Helper) {\n            name = value[1];\n            params = value[2];\n            hash = value[3];\n        } else if (value[0] === Ops.Unknown) {\n            name = value[1];\n            params = hash = null;\n        } else {\n            return ['expr', value];\n        }\n        var index = this.names[name];\n        if (index === undefined && this.missing) {\n            var func = this.missing;\n            var returned = func(name, params, hash, builder);\n            return returned === false ? ['expr', value] : returned;\n        } else if (index !== undefined) {\n            var _func2 = this.funcs[index];\n            var _returned = _func2(name, params, hash, builder);\n            return _returned === false ? ['expr', value] : _returned;\n        } else {\n            return ['expr', value];\n        }\n    };\n\n    return Inlines;\n}();\nexport var INLINES = new Inlines();\npopulateBuiltins(BLOCKS, INLINES);\nexport function populateBuiltins() {\n    var blocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Blocks();\n    var inlines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Inlines();\n\n    blocks.add('if', function (params, _hash, template, inverse, builder) {\n        //        PutArgs\n        //        Test(Environment)\n        //        Enter(BEGIN, END)\n        // BEGIN: Noop\n        //        JumpUnless(ELSE)\n        //        Evaluate(default)\n        //        Jump(END)\n        // ELSE:  Noop\n        //        Evalulate(inverse)\n        // END:   Noop\n        //        Exit\n        if (!params || params.length !== 1) {\n            throw new Error('SYNTAX ERROR: #if requires a single argument');\n        }\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        expr(params[0], builder);\n        builder.test('environment');\n        builder.enter(1);\n        builder.jumpUnless('ELSE');\n        builder.invokeStatic(template);\n        if (inverse) {\n            builder.jump('EXIT');\n            builder.label('ELSE');\n            builder.invokeStatic(inverse);\n            builder.label('EXIT');\n            builder.exit();\n            builder.return();\n        } else {\n            builder.label('ELSE');\n            builder.exit();\n            builder.return();\n        }\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n    blocks.add('unless', function (params, _hash, template, inverse, builder) {\n        //        PutArgs\n        //        Test(Environment)\n        //        Enter(BEGIN, END)\n        // BEGIN: Noop\n        //        JumpUnless(ELSE)\n        //        Evaluate(default)\n        //        Jump(END)\n        // ELSE:  Noop\n        //        Evalulate(inverse)\n        // END:   Noop\n        //        Exit\n        if (!params || params.length !== 1) {\n            throw new Error('SYNTAX ERROR: #unless requires a single argument');\n        }\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        expr(params[0], builder);\n        builder.test('environment');\n        builder.enter(1);\n        builder.jumpIf('ELSE');\n        builder.invokeStatic(template);\n        if (inverse) {\n            builder.jump('EXIT');\n            builder.label('ELSE');\n            builder.invokeStatic(inverse);\n            builder.label('EXIT');\n            builder.exit();\n            builder.return();\n        } else {\n            builder.label('ELSE');\n            builder.exit();\n            builder.return();\n        }\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n    blocks.add('with', function (params, _hash, template, inverse, builder) {\n        //        PutArgs\n        //        Test(Environment)\n        //        Enter(BEGIN, END)\n        // BEGIN: Noop\n        //        JumpUnless(ELSE)\n        //        Evaluate(default)\n        //        Jump(END)\n        // ELSE:  Noop\n        //        Evalulate(inverse)\n        // END:   Noop\n        //        Exit\n        if (!params || params.length !== 1) {\n            throw new Error('SYNTAX ERROR: #with requires a single argument');\n        }\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        expr(params[0], builder);\n        builder.dup();\n        builder.test('environment');\n        builder.enter(2);\n        builder.jumpUnless('ELSE');\n        builder.invokeStatic(template, 1);\n        if (inverse) {\n            builder.jump('EXIT');\n            builder.label('ELSE');\n            builder.invokeStatic(inverse);\n            builder.label('EXIT');\n            builder.exit();\n            builder.return();\n        } else {\n            builder.label('ELSE');\n            builder.exit();\n            builder.return();\n        }\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n    blocks.add('each', function (params, hash, template, inverse, builder) {\n        //         Enter(BEGIN, END)\n        // BEGIN:  Noop\n        //         PutArgs\n        //         PutIterable\n        //         JumpUnless(ELSE)\n        //         EnterList(BEGIN2, END2)\n        // ITER:   Noop\n        //         NextIter(BREAK)\n        // BEGIN2: Noop\n        //         PushChildScope\n        //         Evaluate(default)\n        //         PopScope\n        // END2:   Noop\n        //         Exit\n        //         Jump(ITER)\n        // BREAK:  Noop\n        //         ExitList\n        //         Jump(END)\n        // ELSE:   Noop\n        //         Evalulate(inverse)\n        // END:    Noop\n        //         Exit\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        if (hash && hash[0][0] === 'key') {\n            expr(hash[1][0], builder);\n        } else {\n            throw new Error('Compile error: #each without key');\n        }\n        expr(params[0], builder);\n        builder.enter(2);\n        builder.putIterator();\n        builder.jumpUnless('ELSE');\n        builder.pushFrame();\n        builder.returnTo('ITER');\n        builder.dup(Register.fp, 1);\n        builder.enterList('BODY');\n        builder.label('ITER');\n        builder.iterate('BREAK');\n        builder.label('BODY');\n        builder.invokeStatic(template, 2);\n        builder.pop(2);\n        builder.exit();\n        builder.return();\n        builder.label('BREAK');\n        builder.exitList();\n        builder.popFrame();\n        if (inverse) {\n            builder.jump('EXIT');\n            builder.label('ELSE');\n            builder.invokeStatic(inverse);\n            builder.label('EXIT');\n            builder.exit();\n            builder.return();\n        } else {\n            builder.label('ELSE');\n            builder.exit();\n            builder.return();\n        }\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n    blocks.add('-in-element', function (params, hash, template, _inverse, builder) {\n        if (!params || params.length !== 1) {\n            throw new Error('SYNTAX ERROR: #-in-element requires a single argument');\n        }\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        if (hash && hash[0].length) {\n            var keys = hash[0],\n                values = hash[1];\n\n            if (keys.length === 1 && keys[0] === 'nextSibling') {\n                expr(values[0], builder);\n            } else {\n                throw new Error('SYNTAX ERROR: #-in-element does not take a `' + keys[0] + '` option');\n            }\n        } else {\n            expr(null, builder);\n        }\n        expr(params[0], builder);\n        builder.dup();\n        builder.test('simple');\n        builder.enter(3);\n        builder.jumpUnless('ELSE');\n        builder.pushRemoteElement();\n        builder.invokeStatic(template);\n        builder.popRemoteElement();\n        builder.label('ELSE');\n        builder.exit();\n        builder.return();\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n    blocks.add('-with-dynamic-vars', function (_params, hash, template, _inverse, builder) {\n        if (hash) {\n            var names = hash[0],\n                expressions = hash[1];\n\n            compileList(expressions, builder);\n            builder.pushDynamicScope();\n            builder.bindDynamicScope(names);\n            builder.invokeStatic(template);\n            builder.popDynamicScope();\n        } else {\n            builder.invokeStatic(template);\n        }\n    });\n    return { blocks: blocks, inlines: inlines };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { NULL_REFERENCE, UNDEFINED_REFERENCE } from '../references';\n\nvar Constants = function () {\n    function Constants() {\n        _classCallCheck(this, Constants);\n\n        // `0` means NULL\n        this.references = [];\n        this.strings = [];\n        this.expressions = [];\n        this.arrays = [];\n        this.blocks = [];\n        this.functions = [];\n        this.others = [];\n        this.NULL_REFERENCE = this.reference(NULL_REFERENCE);\n        this.UNDEFINED_REFERENCE = this.reference(UNDEFINED_REFERENCE);\n    }\n\n    Constants.prototype.getReference = function getReference(value) {\n        return this.references[value - 1];\n    };\n\n    Constants.prototype.reference = function reference(value) {\n        var index = this.references.length;\n        this.references.push(value);\n        return index + 1;\n    };\n\n    Constants.prototype.getString = function getString(value) {\n        return this.strings[value - 1];\n    };\n\n    Constants.prototype.string = function string(value) {\n        var index = this.strings.length;\n        this.strings.push(value);\n        return index + 1;\n    };\n\n    Constants.prototype.getExpression = function getExpression(value) {\n        return this.expressions[value - 1];\n    };\n\n    Constants.prototype.getArray = function getArray(value) {\n        return this.arrays[value - 1];\n    };\n\n    Constants.prototype.getNames = function getNames(value) {\n        var _this = this;\n\n        return this.getArray(value).map(function (n) {\n            return _this.getString(n);\n        });\n    };\n\n    Constants.prototype.array = function array(values) {\n        var index = this.arrays.length;\n        this.arrays.push(values);\n        return index + 1;\n    };\n\n    Constants.prototype.getBlock = function getBlock(value) {\n        return this.blocks[value - 1];\n    };\n\n    Constants.prototype.block = function block(_block) {\n        var index = this.blocks.length;\n        this.blocks.push(_block);\n        return index + 1;\n    };\n\n    Constants.prototype.getFunction = function getFunction(value) {\n        return this.functions[value - 1];\n    };\n\n    Constants.prototype.function = function _function(f) {\n        var index = this.functions.length;\n        this.functions.push(f);\n        return index + 1;\n    };\n\n    Constants.prototype.getOther = function getOther(value) {\n        return this.others[value - 1];\n    };\n\n    Constants.prototype.other = function other(_other) {\n        var index = this.others.length;\n        this.others.push(_other);\n        return index + 1;\n    };\n\n    return Constants;\n}();\n\nexport { Constants };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsQUFBTyxTQUFFLEFBQWMsZ0JBQUUsQUFBbUIsQUFBRSwyQkFBTSxBQUFlLEFBQUMsQUFhcEUsQUFBTTs7O0FBY0o7OztBQWJBLEFBQWlCO0FBRVQsYUFBVSxhQUFxQyxBQUFFLEFBQUM7QUFDbEQsYUFBTyxVQUFhLEFBQUUsQUFBQztBQUN2QixhQUFXLGNBQWEsQUFBRSxBQUFDO0FBQzNCLGFBQU0sU0FBZSxBQUFFLEFBQUM7QUFDeEIsYUFBTSxTQUFZLEFBQUUsQUFBQztBQUNyQixhQUFTLFlBQWUsQUFBRSxBQUFDO0FBQzNCLGFBQU0sU0FBYSxBQUFFLEFBQUM7QUFNNUIsQUFBSSxhQUFDLEFBQWMsaUJBQUcsQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFjLEFBQUMsQUFBQztBQUNyRCxBQUFJLGFBQUMsQUFBbUIsc0JBQUcsQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFtQixBQUFDLEFBQUMsQUFDakU7QUFBQzs7d0JBRUQsQUFBWSxxQ0FBbUIsQUFBd0I7QUFDckQsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFVLFdBQUMsQUFBSyxRQUFHLEFBQUMsQUFBOEIsQUFBQyxBQUNqRTtBQUFDOzt3QkFFRCxBQUFTLCtCQUFDLEFBQXFDO0FBQzdDLFlBQUksQUFBSyxRQUFHLEFBQUksS0FBQyxBQUFVLFdBQUMsQUFBTSxBQUFDO0FBQ25DLEFBQUksYUFBQyxBQUFVLFdBQUMsQUFBSSxLQUFDLEFBQUssQUFBQyxBQUFDO0FBQzVCLEFBQU0sZUFBQyxBQUFLLFFBQUcsQUFBQyxBQUFDLEFBQ25CO0FBQUM7O3dCQUVELEFBQVMsK0JBQUMsQUFBcUI7QUFDN0IsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBSyxRQUFHLEFBQUMsQUFBQyxBQUFDLEFBQ2pDO0FBQUM7O3dCQUVELEFBQU0seUJBQUMsQUFBYTtBQUNsQixZQUFJLEFBQUssUUFBRyxBQUFJLEtBQUMsQUFBTyxRQUFDLEFBQU0sQUFBQztBQUNoQyxBQUFJLGFBQUMsQUFBTyxRQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFBQztBQUN6QixBQUFNLGVBQUMsQUFBSyxRQUFHLEFBQUMsQUFBQyxBQUNuQjtBQUFDOzt3QkFFRCxBQUFhLHVDQUFJLEFBQXlCO0FBQ3hDLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBVyxZQUFDLEFBQUssUUFBRyxBQUFDLEFBQU0sQUFBQyxBQUMxQztBQUFDOzt3QkFFRCxBQUFRLDZCQUFDLEFBQW9CO0FBQzNCLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQUssUUFBRyxBQUFDLEFBQUMsQUFBQyxBQUNoQztBQUFDOzt3QkFFRCxBQUFRLDZCQUFDLEFBQW9COzs7QUFDM0IsQUFBTSxvQkFBTSxBQUFRLFNBQUMsQUFBSyxBQUFDLE9BQUMsQUFBRztBQUFDLEFBQUMsbUJBQUksQUFBSSxNQUFDLEFBQVMsVUFBQyxBQUFDLEFBQUMsQUFBQyxBQUFDLEFBQzFEO1NBRFMsQUFBSTtBQUNaOzt3QkFFRCxBQUFLLHVCQUFDLEFBQWdCO0FBQ3BCLFlBQUksQUFBSyxRQUFHLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBTSxBQUFDO0FBQy9CLEFBQUksYUFBQyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQU0sQUFBQyxBQUFDO0FBQ3pCLEFBQU0sZUFBQyxBQUFLLFFBQUcsQUFBQyxBQUFDLEFBQ25CO0FBQUM7O3dCQUVELEFBQVEsNkJBQUMsQUFBb0I7QUFDM0IsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBSyxRQUFHLEFBQUMsQUFBQyxBQUFDLEFBQ2hDO0FBQUM7O3dCQUVELEFBQUssdUJBQUMsQUFBWTtBQUNoQixZQUFJLEFBQUssUUFBRyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQU0sQUFBQztBQUMvQixBQUFJLGFBQUMsQUFBTSxPQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFBQztBQUN4QixBQUFNLGVBQUMsQUFBSyxRQUFHLEFBQUMsQUFBQyxBQUNuQjtBQUFDOzt3QkFFRCxBQUFXLG1DQUFxQixBQUF1QjtBQUNyRCxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFLLFFBQUcsQUFBQyxBQUFNLEFBQUMsQUFDeEM7QUFBQzs7d0JBRUQsQUFBUSw4QkFBQyxBQUFXO0FBQ2xCLFlBQUksQUFBSyxRQUFHLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBTSxBQUFDO0FBQ2xDLEFBQUksYUFBQyxBQUFTLFVBQUMsQUFBSSxLQUFDLEFBQUMsQUFBQyxBQUFDO0FBQ3ZCLEFBQU0sZUFBQyxBQUFLLFFBQUcsQUFBQyxBQUFDLEFBQ25CO0FBQUM7O3dCQUVELEFBQVEsNkJBQUksQUFBb0I7QUFDOUIsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBSyxRQUFHLEFBQUMsQUFBTSxBQUFDLEFBQ3JDO0FBQUM7O3dCQUVELEFBQUssdUJBQUMsQUFBYTtBQUNqQixZQUFJLEFBQUssUUFBRyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQU0sQUFBQztBQUMvQixBQUFJLGFBQUMsQUFBTSxPQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFBQztBQUN4QixBQUFNLGVBQUMsQUFBSyxRQUFHLEFBQUMsQUFBQyxBQUNuQjtBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlIH0gZnJvbSBcIkBnbGltbWVyL3JlZmVyZW5jZVwiO1xuaW1wb3J0IHsgT3BhcXVlIH0gZnJvbSBcIkBnbGltbWVyL2ludGVyZmFjZXNcIjtcblxuaW1wb3J0IHsgTlVMTF9SRUZFUkVOQ0UsIFVOREVGSU5FRF9SRUZFUkVOQ0UgfSBmcm9tICcuLi9yZWZlcmVuY2VzJztcbmltcG9ydCB7IEJsb2NrIH0gZnJvbSBcIi4uL3NjYW5uZXJcIjtcblxuZXhwb3J0IHR5cGUgQ29uc3RhbnRUeXBlID0gJ3NsaWNlJyB8ICdibG9jaycgfCAncmVmZXJlbmNlJyB8ICdzdHJpbmcnIHwgJ251bWJlcicgfCAnZXhwcmVzc2lvbic7XG5leHBvcnQgdHlwZSBDb25zdGFudFJlZmVyZW5jZSA9ICBudW1iZXI7XG5leHBvcnQgdHlwZSBDb25zdGFudFN0cmluZyA9IG51bWJlcjtcbmV4cG9ydCB0eXBlIENvbnN0YW50RXhwcmVzc2lvbiA9IG51bWJlcjtcbmV4cG9ydCB0eXBlIENvbnN0YW50U2xpY2UgPSBudW1iZXI7XG5leHBvcnQgdHlwZSBDb25zdGFudEJsb2NrID0gbnVtYmVyO1xuZXhwb3J0IHR5cGUgQ29uc3RhbnRGdW5jdGlvbiA9IG51bWJlcjtcbmV4cG9ydCB0eXBlIENvbnN0YW50QXJyYXkgPSBudW1iZXI7XG5leHBvcnQgdHlwZSBDb25zdGFudE90aGVyID0gbnVtYmVyO1xuXG5leHBvcnQgY2xhc3MgQ29uc3RhbnRzIHtcbiAgLy8gYDBgIG1lYW5zIE5VTExcblxuICBwcml2YXRlIHJlZmVyZW5jZXM6IFZlcnNpb25lZFBhdGhSZWZlcmVuY2U8T3BhcXVlPltdID0gW107XG4gIHByaXZhdGUgc3RyaW5nczogc3RyaW5nW10gPSBbXTtcbiAgcHJpdmF0ZSBleHByZXNzaW9uczogT3BhcXVlW10gPSBbXTtcbiAgcHJpdmF0ZSBhcnJheXM6IG51bWJlcltdW10gPSBbXTtcbiAgcHJpdmF0ZSBibG9ja3M6IEJsb2NrW10gPSBbXTtcbiAgcHJpdmF0ZSBmdW5jdGlvbnM6IEZ1bmN0aW9uW10gPSBbXTtcbiAgcHJpdmF0ZSBvdGhlcnM6IE9wYXF1ZVtdID0gW107XG5cbiAgcHVibGljIE5VTExfUkVGRVJFTkNFOiBudW1iZXI7XG4gIHB1YmxpYyBVTkRFRklORURfUkVGRVJFTkNFOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5OVUxMX1JFRkVSRU5DRSA9IHRoaXMucmVmZXJlbmNlKE5VTExfUkVGRVJFTkNFKTtcbiAgICB0aGlzLlVOREVGSU5FRF9SRUZFUkVOQ0UgPSB0aGlzLnJlZmVyZW5jZShVTkRFRklORURfUkVGRVJFTkNFKTtcbiAgfVxuXG4gIGdldFJlZmVyZW5jZTxUIGV4dGVuZHMgT3BhcXVlPih2YWx1ZTogQ29uc3RhbnRSZWZlcmVuY2UpOiBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5yZWZlcmVuY2VzW3ZhbHVlIC0gMV0gYXMgVmVyc2lvbmVkUGF0aFJlZmVyZW5jZTxUPjtcbiAgfVxuXG4gIHJlZmVyZW5jZSh2YWx1ZTogVmVyc2lvbmVkUGF0aFJlZmVyZW5jZTxPcGFxdWU+KTogQ29uc3RhbnRSZWZlcmVuY2Uge1xuICAgIGxldCBpbmRleCA9IHRoaXMucmVmZXJlbmNlcy5sZW5ndGg7XG4gICAgdGhpcy5yZWZlcmVuY2VzLnB1c2godmFsdWUpO1xuICAgIHJldHVybiBpbmRleCArIDE7XG4gIH1cblxuICBnZXRTdHJpbmcodmFsdWU6IENvbnN0YW50U3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpbmdzW3ZhbHVlIC0gMV07XG4gIH1cblxuICBzdHJpbmcodmFsdWU6IHN0cmluZyk6IENvbnN0YW50U3RyaW5nIHtcbiAgICBsZXQgaW5kZXggPSB0aGlzLnN0cmluZ3MubGVuZ3RoO1xuICAgIHRoaXMuc3RyaW5ncy5wdXNoKHZhbHVlKTtcbiAgICByZXR1cm4gaW5kZXggKyAxO1xuICB9XG5cbiAgZ2V0RXhwcmVzc2lvbjxUPih2YWx1ZTogQ29uc3RhbnRFeHByZXNzaW9uKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuZXhwcmVzc2lvbnNbdmFsdWUgLSAxXSBhcyBUO1xuICB9XG5cbiAgZ2V0QXJyYXkodmFsdWU6IENvbnN0YW50QXJyYXkpOiBudW1iZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuYXJyYXlzW3ZhbHVlIC0gMV07XG4gIH1cblxuICBnZXROYW1lcyh2YWx1ZTogQ29uc3RhbnRBcnJheSk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBcnJheSh2YWx1ZSkubWFwKG4gPT4gdGhpcy5nZXRTdHJpbmcobikpO1xuICB9XG5cbiAgYXJyYXkodmFsdWVzOiBudW1iZXJbXSk6IENvbnN0YW50QXJyYXkge1xuICAgIGxldCBpbmRleCA9IHRoaXMuYXJyYXlzLmxlbmd0aDtcbiAgICB0aGlzLmFycmF5cy5wdXNoKHZhbHVlcyk7XG4gICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgfVxuXG4gIGdldEJsb2NrKHZhbHVlOiBDb25zdGFudEJsb2NrKTogQmxvY2sge1xuICAgIHJldHVybiB0aGlzLmJsb2Nrc1t2YWx1ZSAtIDFdO1xuICB9XG5cbiAgYmxvY2soYmxvY2s6IEJsb2NrKTogQ29uc3RhbnRCbG9jayB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5ibG9ja3MubGVuZ3RoO1xuICAgIHRoaXMuYmxvY2tzLnB1c2goYmxvY2spO1xuICAgIHJldHVybiBpbmRleCArIDE7XG4gIH1cblxuICBnZXRGdW5jdGlvbjxUIGV4dGVuZHMgRnVuY3Rpb24+KHZhbHVlOiBDb25zdGFudEZ1bmN0aW9uKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuZnVuY3Rpb25zW3ZhbHVlIC0gMV0gYXMgVDtcbiAgfVxuXG4gIGZ1bmN0aW9uKGY6IEZ1bmN0aW9uKTogQ29uc3RhbnRGdW5jdGlvbiB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5mdW5jdGlvbnMubGVuZ3RoO1xuICAgIHRoaXMuZnVuY3Rpb25zLnB1c2goZik7XG4gICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgfVxuXG4gIGdldE90aGVyPFQ+KHZhbHVlOiBDb25zdGFudE90aGVyKTogVCB7XG4gICAgcmV0dXJuIHRoaXMub3RoZXJzW3ZhbHVlIC0gMV0gYXMgVDtcbiAgfVxuXG4gIG90aGVyKG90aGVyOiBPcGFxdWUpOiBDb25zdGFudE90aGVyIHtcbiAgICBsZXQgaW5kZXggPSB0aGlzLm90aGVycy5sZW5ndGg7XG4gICAgdGhpcy5vdGhlcnMucHVzaChvdGhlcik7XG4gICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgfVxufVxuIl19","import { normalizeTextValue } from '../compiled/opcodes/content';\nimport { isSafeString } from '../upsert';\nvar badProtocols = ['javascript:', 'vbscript:'];\nvar badTags = ['A', 'BODY', 'LINK', 'IMG', 'IFRAME', 'BASE', 'FORM'];\nvar badTagsForDataURI = ['EMBED'];\nvar badAttributes = ['href', 'src', 'background', 'action'];\nvar badAttributesForDataURI = ['src'];\nfunction has(array, item) {\n    return array.indexOf(item) !== -1;\n}\nfunction checkURI(tagName, attribute) {\n    return (tagName === null || has(badTags, tagName)) && has(badAttributes, attribute);\n}\nfunction checkDataURI(tagName, attribute) {\n    if (tagName === null) return false;\n    return has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);\n}\nexport function requiresSanitization(tagName, attribute) {\n    return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);\n}\nexport function sanitizeAttributeValue(env, element, attribute, value) {\n    var tagName = null;\n    if (value === null || value === undefined) {\n        return value;\n    }\n    if (isSafeString(value)) {\n        return value.toHTML();\n    }\n    if (!element) {\n        tagName = null;\n    } else {\n        tagName = element.tagName.toUpperCase();\n    }\n    var str = normalizeTextValue(value);\n    if (checkURI(tagName, attribute)) {\n        var protocol = env.protocolForURL(str);\n        if (has(badProtocols, protocol)) {\n            return 'unsafe:' + str;\n        }\n    }\n    if (checkDataURI(tagName, attribute)) {\n        return 'unsafe:' + str;\n    }\n    return str;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemVkLXZhbHVlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNhbml0aXplZC12YWx1ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsQUFBTyxTQUFFLEFBQWtCLEFBQUUsMEJBQU0sQUFBNkIsQUFBQztBQUNqRSxBQUFPLFNBQUUsQUFBWSxBQUFFLG9CQUFNLEFBQVcsQUFBQztBQUl6QyxJQUFNLEFBQVksZUFBRyxDQUNuQixBQUFhLGVBQ2IsQUFBVyxBQUNaLEFBQUM7QUFFRixJQUFNLEFBQU8sVUFBRyxDQUNkLEFBQUcsS0FDSCxBQUFNLFFBQ04sQUFBTSxRQUNOLEFBQUssT0FDTCxBQUFRLFVBQ1IsQUFBTSxRQUNOLEFBQU0sQUFDUCxBQUFDO0FBRUYsSUFBTSxBQUFpQixvQkFBRyxDQUN4QixBQUFPLEFBQ1IsQUFBQztBQUVGLElBQU0sQUFBYSxnQkFBRyxDQUNwQixBQUFNLFFBQ04sQUFBSyxPQUNMLEFBQVksY0FDWixBQUFRLEFBQ1QsQUFBQztBQUVGLElBQU0sQUFBdUIsMEJBQUcsQ0FDOUIsQUFBSyxBQUNOLEFBQUM7QUFFRixhQUFhLEFBQW9CLE9BQUUsQUFBWTtBQUM3QyxBQUFNLFdBQUMsQUFBSyxNQUFDLEFBQU8sUUFBQyxBQUFJLEFBQUMsVUFBSyxDQUFDLEFBQUMsQUFBQyxBQUNwQztBQUFDO0FBRUQsa0JBQWtCLEFBQXVCLFNBQUUsQUFBaUI7QUFDMUQsQUFBTSxXQUFDLENBQUMsQUFBTyxZQUFLLEFBQUksUUFBSSxBQUFHLElBQUMsQUFBTyxTQUFFLEFBQU8sQUFBQyxBQUFDLGFBQUksQUFBRyxJQUFDLEFBQWEsZUFBRSxBQUFTLEFBQUMsQUFBQyxBQUN0RjtBQUFDO0FBRUQsc0JBQXNCLEFBQXVCLFNBQUUsQUFBaUI7QUFDOUQsQUFBRSxBQUFDLFFBQUMsQUFBTyxZQUFLLEFBQUksQUFBQyxNQUFDLEFBQU0sT0FBQyxBQUFLLEFBQUM7QUFDbkMsQUFBTSxXQUFDLEFBQUcsSUFBQyxBQUFpQixtQkFBRSxBQUFPLEFBQUMsWUFBSSxBQUFHLElBQUMsQUFBdUIseUJBQUUsQUFBUyxBQUFDLEFBQUMsQUFDcEY7QUFBQztBQUVELEFBQU0scUNBQStCLEFBQWUsU0FBRSxBQUFpQjtBQUNyRSxBQUFNLFdBQUMsQUFBUSxTQUFDLEFBQU8sU0FBRSxBQUFTLEFBQUMsY0FBSSxBQUFZLGFBQUMsQUFBTyxTQUFFLEFBQVMsQUFBQyxBQUFDLEFBQzFFO0FBQUM7QUFFRCxBQUFNLHVDQUFpQyxBQUFnQixLQUFFLEFBQXVCLFNBQUUsQUFBaUIsV0FBRSxBQUFhO0FBQ2hILFFBQUksQUFBTyxVQUFtQixBQUFJLEFBQUM7QUFFbkMsQUFBRSxBQUFDLFFBQUMsQUFBSyxVQUFLLEFBQUksUUFBSSxBQUFLLFVBQUssQUFBUyxBQUFDLFdBQUMsQUFBQztBQUMxQyxBQUFNLGVBQUMsQUFBSyxBQUFDLEFBQ2Y7QUFBQztBQUVELEFBQUUsQUFBQyxRQUFDLEFBQVksYUFBQyxBQUFLLEFBQUMsQUFBQyxRQUFDLEFBQUM7QUFDeEIsQUFBTSxlQUFDLEFBQUssTUFBQyxBQUFNLEFBQUUsQUFBQyxBQUN4QjtBQUFDO0FBRUQsQUFBRSxBQUFDLFFBQUMsQ0FBQyxBQUFPLEFBQUMsU0FBQyxBQUFDO0FBQ2IsQUFBTyxrQkFBRyxBQUFJLEFBQUMsQUFDakI7QUFBQyxBQUFDLEFBQUksV0FBQyxBQUFDO0FBQ04sQUFBTyxrQkFBRyxBQUFPLFFBQUMsQUFBTyxRQUFDLEFBQVcsQUFBRSxBQUFDLEFBQzFDO0FBQUM7QUFFRCxRQUFJLEFBQUcsTUFBRyxBQUFrQixtQkFBQyxBQUFLLEFBQUMsQUFBQztBQUVwQyxBQUFFLEFBQUMsUUFBQyxBQUFRLFNBQUMsQUFBTyxTQUFFLEFBQVMsQUFBQyxBQUFDLFlBQUMsQUFBQztBQUNqQyxZQUFJLEFBQVEsV0FBRyxBQUFHLElBQUMsQUFBYyxlQUFDLEFBQUcsQUFBQyxBQUFDO0FBQ3ZDLEFBQUUsQUFBQyxZQUFDLEFBQUcsSUFBQyxBQUFZLGNBQUUsQUFBUSxBQUFDLEFBQUMsV0FBQyxBQUFDO0FBQ2hDLEFBQU0sQUFBQywrQkFBVSxBQUFHLEFBQUUsQUFBQyxBQUN6QjtBQUFDLEFBQ0g7QUFBQztBQUVELEFBQUUsQUFBQyxRQUFDLEFBQVksYUFBQyxBQUFPLFNBQUUsQUFBUyxBQUFDLEFBQUMsWUFBQyxBQUFDO0FBQ3JDLEFBQU0sQUFBQywyQkFBVSxBQUFHLEFBQUUsQUFBQyxBQUN6QjtBQUFDO0FBRUQsQUFBTSxXQUFDLEFBQUcsQUFBQyxBQUNiO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGFxdWUsIE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgbm9ybWFsaXplVGV4dFZhbHVlIH0gZnJvbSAnLi4vY29tcGlsZWQvb3Bjb2Rlcy9jb250ZW50JztcbmltcG9ydCB7IGlzU2FmZVN0cmluZyB9IGZyb20gJy4uL3Vwc2VydCc7XG5pbXBvcnQgeyBFbnZpcm9ubWVudCB9IGZyb20gJy4uL2Vudmlyb25tZW50JztcbmltcG9ydCAqIGFzIFNpbXBsZSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5jb25zdCBiYWRQcm90b2NvbHMgPSBbXG4gICdqYXZhc2NyaXB0OicsXG4gICd2YnNjcmlwdDonXG5dO1xuXG5jb25zdCBiYWRUYWdzID0gW1xuICAnQScsXG4gICdCT0RZJyxcbiAgJ0xJTksnLFxuICAnSU1HJyxcbiAgJ0lGUkFNRScsXG4gICdCQVNFJyxcbiAgJ0ZPUk0nXG5dO1xuXG5jb25zdCBiYWRUYWdzRm9yRGF0YVVSSSA9IFtcbiAgJ0VNQkVEJ1xuXTtcblxuY29uc3QgYmFkQXR0cmlidXRlcyA9IFtcbiAgJ2hyZWYnLFxuICAnc3JjJyxcbiAgJ2JhY2tncm91bmQnLFxuICAnYWN0aW9uJ1xuXTtcblxuY29uc3QgYmFkQXR0cmlidXRlc0ZvckRhdGFVUkkgPSBbXG4gICdzcmMnXG5dO1xuXG5mdW5jdGlvbiBoYXMoYXJyYXk6IEFycmF5PHN0cmluZz4sIGl0ZW06IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gYXJyYXkuaW5kZXhPZihpdGVtKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIGNoZWNrVVJJKHRhZ05hbWU6IE9wdGlvbjxzdHJpbmc+LCBhdHRyaWJ1dGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gKHRhZ05hbWUgPT09IG51bGwgfHwgaGFzKGJhZFRhZ3MsIHRhZ05hbWUpKSAmJiBoYXMoYmFkQXR0cmlidXRlcywgYXR0cmlidXRlKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tEYXRhVVJJKHRhZ05hbWU6IE9wdGlvbjxzdHJpbmc+LCBhdHRyaWJ1dGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBpZiAodGFnTmFtZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gaGFzKGJhZFRhZ3NGb3JEYXRhVVJJLCB0YWdOYW1lKSAmJiBoYXMoYmFkQXR0cmlidXRlc0ZvckRhdGFVUkksIGF0dHJpYnV0ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlc1Nhbml0aXphdGlvbih0YWdOYW1lOiBzdHJpbmcsIGF0dHJpYnV0ZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBjaGVja1VSSSh0YWdOYW1lLCBhdHRyaWJ1dGUpIHx8IGNoZWNrRGF0YVVSSSh0YWdOYW1lLCBhdHRyaWJ1dGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVBdHRyaWJ1dGVWYWx1ZShlbnY6IEVudmlyb25tZW50LCBlbGVtZW50OiBTaW1wbGUuRWxlbWVudCwgYXR0cmlidXRlOiBzdHJpbmcsIHZhbHVlOiBPcGFxdWUpOiBPcGFxdWUge1xuICBsZXQgdGFnTmFtZTogT3B0aW9uPHN0cmluZz4gPSBudWxsO1xuXG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKGlzU2FmZVN0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUudG9IVE1MKCk7XG4gIH1cblxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICB0YWdOYW1lID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB0YWdOYW1lID0gZWxlbWVudC50YWdOYW1lLnRvVXBwZXJDYXNlKCk7XG4gIH1cblxuICBsZXQgc3RyID0gbm9ybWFsaXplVGV4dFZhbHVlKHZhbHVlKTtcblxuICBpZiAoY2hlY2tVUkkodGFnTmFtZSwgYXR0cmlidXRlKSkge1xuICAgIGxldCBwcm90b2NvbCA9IGVudi5wcm90b2NvbEZvclVSTChzdHIpO1xuICAgIGlmIChoYXMoYmFkUHJvdG9jb2xzLCBwcm90b2NvbCkpIHtcbiAgICAgIHJldHVybiBgdW5zYWZlOiR7c3RyfWA7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNoZWNrRGF0YVVSSSh0YWdOYW1lLCBhdHRyaWJ1dGUpKSB7XG4gICAgcmV0dXJuIGB1bnNhZmU6JHtzdHJ9YDtcbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG4iXX0=","/*\n * @method normalizeProperty\n * @param element {HTMLElement}\n * @param slotName {String}\n * @returns {Object} { name, type }\n */\nexport function normalizeProperty(element, slotName) {\n    var type = void 0,\n        normalized = void 0;\n    if (slotName in element) {\n        normalized = slotName;\n        type = 'prop';\n    } else {\n        var lower = slotName.toLowerCase();\n        if (lower in element) {\n            type = 'prop';\n            normalized = lower;\n        } else {\n            type = 'attr';\n            normalized = slotName;\n        }\n    }\n    if (type === 'prop' && (normalized.toLowerCase() === 'style' || preferAttr(element.tagName, normalized))) {\n        type = 'attr';\n    }\n    return { normalized: normalized, type: type };\n}\nexport function normalizePropertyValue(value) {\n    if (value === '') {\n        return true;\n    }\n    return value;\n}\n// properties that MUST be set as attributes, due to:\n// * browser bug\n// * strange spec outlier\nvar ATTR_OVERRIDES = {\n    // phantomjs < 2.0 lets you set it as a prop but won't reflect it\n    // back to the attribute. button.getAttribute('type') === null\n    BUTTON: { type: true, form: true },\n    INPUT: {\n        // Some version of IE (like IE9) actually throw an exception\n        // if you set input.type = 'something-unknown'\n        type: true,\n        form: true,\n        // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false\n        // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false\n        // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true\n        autocorrect: true,\n        // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true\n        // Safari 9.1.3: 'list' in document.createElement('input') === false\n        list: true\n    },\n    // element.form is actually a legitimate readOnly property, that is to be\n    // mutated, but must be mutated by setAttribute...\n    SELECT: { form: true },\n    OPTION: { form: true },\n    TEXTAREA: { form: true },\n    LABEL: { form: true },\n    FIELDSET: { form: true },\n    LEGEND: { form: true },\n    OBJECT: { form: true }\n};\nfunction preferAttr(tagName, propName) {\n    var tag = ATTR_OVERRIDES[tagName.toUpperCase()];\n    return tag && tag[propName.toLowerCase()] || false;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9wcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxBQUtHOzs7Ozs7QUFDSCxBQUFNLGtDQUE0QixBQUF1QixTQUFFLEFBQWdCO0FBQ3pFLFFBQUksQUFBSTtRQUFFLEFBQVUsQUFBQztBQUVyQixBQUFFLEFBQUMsUUFBQyxBQUFRLFlBQUksQUFBTyxBQUFDLFNBQUMsQUFBQztBQUN4QixBQUFVLHFCQUFHLEFBQVEsQUFBQztBQUN0QixBQUFJLGVBQUcsQUFBTSxBQUFDLEFBQ2hCO0FBQUMsQUFBQyxBQUFJLFdBQUMsQUFBQztBQUNOLFlBQUksQUFBSyxRQUFHLEFBQVEsU0FBQyxBQUFXLEFBQUUsQUFBQztBQUNuQyxBQUFFLEFBQUMsWUFBQyxBQUFLLFNBQUksQUFBTyxBQUFDLFNBQUMsQUFBQztBQUNyQixBQUFJLG1CQUFHLEFBQU0sQUFBQztBQUNkLEFBQVUseUJBQUcsQUFBSyxBQUFDLEFBQ3JCO0FBQUMsQUFBQyxBQUFJLGVBQUMsQUFBQztBQUNOLEFBQUksbUJBQUcsQUFBTSxBQUFDO0FBQ2QsQUFBVSx5QkFBRyxBQUFRLEFBQUMsQUFDeEI7QUFBQyxBQUNIO0FBQUM7QUFFRCxBQUFFLEFBQUMsUUFBQyxBQUFJLFNBQUssQUFBTSxBQUNmLFdBQUMsQUFBVSxXQUFDLEFBQVcsQUFBRSxrQkFBSyxBQUFPLFdBQ3BDLEFBQVUsV0FBQyxBQUFPLFFBQUMsQUFBTyxTQUFFLEFBQVUsQUFBQyxBQUFDLEFBQUMsY0FBQyxBQUFDO0FBQzlDLEFBQUksZUFBRyxBQUFNLEFBQUMsQUFDaEI7QUFBQztBQUVELEFBQU0sV0FBQyxFQUFFLEFBQVUsd0JBQUUsQUFBSSxBQUFFLEFBQUMsQUFDOUI7QUFBQztBQUVELEFBQU0sdUNBQWlDLEFBQWE7QUFDbEQsQUFBRSxBQUFDLFFBQUMsQUFBSyxVQUFLLEFBQUUsQUFBQyxJQUFDLEFBQUM7QUFDakIsQUFBTSxlQUFDLEFBQUksQUFBQyxBQUNkO0FBQUM7QUFFRCxBQUFNLFdBQUMsQUFBSyxBQUFDLEFBQ2Y7QUFBQztBQUVELEFBQXFEO0FBQ3JELEFBQWdCO0FBQ2hCLEFBQXlCO0FBQ3pCLElBQU0sQUFBYztBQUVsQixBQUFpRTtBQUNqRSxBQUE4RDtBQUM5RCxBQUFNLFlBQUUsRUFBRSxBQUFJLE1BQUUsQUFBSSxNQUFFLEFBQUksTUFBRSxBQUFJLEFBQUU7QUFFbEMsQUFBSztBQUNILEFBQTREO0FBQzVELEFBQThDO0FBQzlDLEFBQUksY0FBRSxBQUFJO0FBQ1YsQUFBSSxjQUFFLEFBQUk7QUFDVixBQUFpRjtBQUNqRixBQUEyRTtBQUMzRSxBQUErRjtBQUMvRixBQUFXLHFCQUFFLEFBQUk7QUFDakIsQUFBMEU7QUFDMUUsQUFBb0U7QUFDcEUsQUFBSSxjQUFFLEFBQUksQUFDWDtBQVpNO0FBY1AsQUFBeUU7QUFDekUsQUFBa0Q7QUFDbEQsQUFBTSxZQUFJLEVBQUUsQUFBSSxNQUFFLEFBQUksQUFBRTtBQUN4QixBQUFNLFlBQUksRUFBRSxBQUFJLE1BQUUsQUFBSSxBQUFFO0FBQ3hCLEFBQVEsY0FBRSxFQUFFLEFBQUksTUFBRSxBQUFJLEFBQUU7QUFDeEIsQUFBSyxXQUFLLEVBQUUsQUFBSSxNQUFFLEFBQUksQUFBRTtBQUN4QixBQUFRLGNBQUUsRUFBRSxBQUFJLE1BQUUsQUFBSSxBQUFFO0FBQ3hCLEFBQU0sWUFBSSxFQUFFLEFBQUksTUFBRSxBQUFJLEFBQUU7QUFDeEIsQUFBTSxZQUFJLEVBQUUsQUFBSSxNQUFFLEFBQUksQUFBRSxBQUN6QixBQUFDO0FBN0JxQjtBQStCdkIsb0JBQW9CLEFBQWUsU0FBRSxBQUFnQjtBQUNuRCxRQUFJLEFBQUcsTUFBRyxBQUFjLGVBQUMsQUFBTyxRQUFDLEFBQVcsQUFBRSxBQUFDLEFBQUM7QUFDaEQsQUFBTSxXQUFDLEFBQUcsT0FBSSxBQUFHLElBQUMsQUFBUSxTQUFDLEFBQVcsQUFBRSxBQUFDLGtCQUFJLEFBQUssQUFBQyxBQUNyRDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBTaW1wbGUgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuLypcbiAqIEBtZXRob2Qgbm9ybWFsaXplUHJvcGVydHlcbiAqIEBwYXJhbSBlbGVtZW50IHtIVE1MRWxlbWVudH1cbiAqIEBwYXJhbSBzbG90TmFtZSB7U3RyaW5nfVxuICogQHJldHVybnMge09iamVjdH0geyBuYW1lLCB0eXBlIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BlcnR5KGVsZW1lbnQ6IFNpbXBsZS5FbGVtZW50LCBzbG90TmFtZTogc3RyaW5nKSB7XG4gIGxldCB0eXBlLCBub3JtYWxpemVkO1xuXG4gIGlmIChzbG90TmFtZSBpbiBlbGVtZW50KSB7XG4gICAgbm9ybWFsaXplZCA9IHNsb3ROYW1lO1xuICAgIHR5cGUgPSAncHJvcCc7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGxvd2VyID0gc2xvdE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobG93ZXIgaW4gZWxlbWVudCkge1xuICAgICAgdHlwZSA9ICdwcm9wJztcbiAgICAgIG5vcm1hbGl6ZWQgPSBsb3dlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZSA9ICdhdHRyJztcbiAgICAgIG5vcm1hbGl6ZWQgPSBzbG90TmFtZTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ3Byb3AnICYmXG4gICAgICAobm9ybWFsaXplZC50b0xvd2VyQ2FzZSgpID09PSAnc3R5bGUnIHx8XG4gICAgICAgcHJlZmVyQXR0cihlbGVtZW50LnRhZ05hbWUsIG5vcm1hbGl6ZWQpKSkge1xuICAgIHR5cGUgPSAnYXR0cic7XG4gIH1cblxuICByZXR1cm4geyBub3JtYWxpemVkLCB0eXBlIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVQcm9wZXJ0eVZhbHVlKHZhbHVlOiBPcGFxdWUpOiBPcGFxdWUge1xuICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIHByb3BlcnRpZXMgdGhhdCBNVVNUIGJlIHNldCBhcyBhdHRyaWJ1dGVzLCBkdWUgdG86XG4vLyAqIGJyb3dzZXIgYnVnXG4vLyAqIHN0cmFuZ2Ugc3BlYyBvdXRsaWVyXG5jb25zdCBBVFRSX09WRVJSSURFUyA9IHtcblxuICAvLyBwaGFudG9tanMgPCAyLjAgbGV0cyB5b3Ugc2V0IGl0IGFzIGEgcHJvcCBidXQgd29uJ3QgcmVmbGVjdCBpdFxuICAvLyBiYWNrIHRvIHRoZSBhdHRyaWJ1dGUuIGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSA9PT0gbnVsbFxuICBCVVRUT046IHsgdHlwZTogdHJ1ZSwgZm9ybTogdHJ1ZSB9LFxuXG4gIElOUFVUOiB7XG4gICAgLy8gU29tZSB2ZXJzaW9uIG9mIElFIChsaWtlIElFOSkgYWN0dWFsbHkgdGhyb3cgYW4gZXhjZXB0aW9uXG4gICAgLy8gaWYgeW91IHNldCBpbnB1dC50eXBlID0gJ3NvbWV0aGluZy11bmtub3duJ1xuICAgIHR5cGU6IHRydWUsXG4gICAgZm9ybTogdHJ1ZSxcbiAgICAvLyBDaHJvbWUgNDYuMC4yNDY0LjA6ICdhdXRvY29ycmVjdCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKSA9PT0gZmFsc2VcbiAgICAvLyBTYWZhcmkgOC4wLjc6ICdhdXRvY29ycmVjdCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKSA9PT0gZmFsc2VcbiAgICAvLyBNb2JpbGUgU2FmYXJpIChpT1MgOC40IHNpbXVsYXRvcik6ICdhdXRvY29ycmVjdCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKSA9PT0gdHJ1ZVxuICAgIGF1dG9jb3JyZWN0OiB0cnVlLFxuICAgIC8vIENocm9tZSA1NC4wLjI4NDAuOTg6ICdsaXN0JyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpID09PSB0cnVlXG4gICAgLy8gU2FmYXJpIDkuMS4zOiAnbGlzdCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKSA9PT0gZmFsc2VcbiAgICBsaXN0OiB0cnVlXG4gIH0sXG5cbiAgLy8gZWxlbWVudC5mb3JtIGlzIGFjdHVhbGx5IGEgbGVnaXRpbWF0ZSByZWFkT25seSBwcm9wZXJ0eSwgdGhhdCBpcyB0byBiZVxuICAvLyBtdXRhdGVkLCBidXQgbXVzdCBiZSBtdXRhdGVkIGJ5IHNldEF0dHJpYnV0ZS4uLlxuICBTRUxFQ1Q6ICAgeyBmb3JtOiB0cnVlIH0sXG4gIE9QVElPTjogICB7IGZvcm06IHRydWUgfSxcbiAgVEVYVEFSRUE6IHsgZm9ybTogdHJ1ZSB9LFxuICBMQUJFTDogICAgeyBmb3JtOiB0cnVlIH0sXG4gIEZJRUxEU0VUOiB7IGZvcm06IHRydWUgfSxcbiAgTEVHRU5EOiAgIHsgZm9ybTogdHJ1ZSB9LFxuICBPQkpFQ1Q6ICAgeyBmb3JtOiB0cnVlIH1cbn07XG5cbmZ1bmN0aW9uIHByZWZlckF0dHIodGFnTmFtZTogc3RyaW5nLCBwcm9wTmFtZTogc3RyaW5nKSB7XG4gIGxldCB0YWcgPSBBVFRSX09WRVJSSURFU1t0YWdOYW1lLnRvVXBwZXJDYXNlKCldO1xuICByZXR1cm4gdGFnICYmIHRhZ1twcm9wTmFtZS50b0xvd2VyQ2FzZSgpXSB8fCBmYWxzZTtcbn1cbiJdfQ==","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nimport { ConcreteBounds } from '../bounds';\nimport { moveNodesBefore } from '../dom/helper';\nvar innerHTMLWrapper = {\n    colgroup: { depth: 2, before: '<table><colgroup>', after: '</colgroup></table>' },\n    table: { depth: 1, before: '<table>', after: '</table>' },\n    tbody: { depth: 2, before: '<table><tbody>', after: '</tbody></table>' },\n    tfoot: { depth: 2, before: '<table><tfoot>', after: '</tfoot></table>' },\n    thead: { depth: 2, before: '<table><thead>', after: '</thead></table>' },\n    tr: { depth: 3, before: '<table><tbody><tr>', after: '</tr></tbody></table>' }\n};\n// Patch:    innerHTML Fix\n// Browsers: IE9\n// Reason:   IE9 don't allow us to set innerHTML on col, colgroup, frameset,\n//           html, style, table, tbody, tfoot, thead, title, tr.\n// Fix:      Wrap the innerHTML we are about to set in its parents, apply the\n//           wrapped innerHTML on a div, then move the unwrapped nodes into the\n//           target position.\nexport function domChanges(document, DOMChangesClass) {\n    if (!document) return DOMChangesClass;\n    if (!shouldApplyFix(document)) {\n        return DOMChangesClass;\n    }\n    var div = document.createElement('div');\n    return function (_DOMChangesClass) {\n        _inherits(DOMChangesWithInnerHTMLFix, _DOMChangesClass);\n\n        function DOMChangesWithInnerHTMLFix() {\n            _classCallCheck(this, DOMChangesWithInnerHTMLFix);\n\n            return _possibleConstructorReturn(this, _DOMChangesClass.apply(this, arguments));\n        }\n\n        DOMChangesWithInnerHTMLFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {\n            if (html === null || html === '') {\n                return _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n            }\n            var parentTag = parent.tagName.toLowerCase();\n            var wrapper = innerHTMLWrapper[parentTag];\n            if (wrapper === undefined) {\n                return _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n            }\n            return fixInnerHTML(parent, wrapper, div, html, nextSibling);\n        };\n\n        return DOMChangesWithInnerHTMLFix;\n    }(DOMChangesClass);\n}\nexport function treeConstruction(document, DOMTreeConstructionClass) {\n    if (!document) return DOMTreeConstructionClass;\n    if (!shouldApplyFix(document)) {\n        return DOMTreeConstructionClass;\n    }\n    var div = document.createElement('div');\n    return function (_DOMTreeConstructionC) {\n        _inherits(DOMTreeConstructionWithInnerHTMLFix, _DOMTreeConstructionC);\n\n        function DOMTreeConstructionWithInnerHTMLFix() {\n            _classCallCheck(this, DOMTreeConstructionWithInnerHTMLFix);\n\n            return _possibleConstructorReturn(this, _DOMTreeConstructionC.apply(this, arguments));\n        }\n\n        DOMTreeConstructionWithInnerHTMLFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, html, reference) {\n            if (html === null || html === '') {\n                return _DOMTreeConstructionC.prototype.insertHTMLBefore.call(this, parent, html, reference);\n            }\n            var parentTag = parent.tagName.toLowerCase();\n            var wrapper = innerHTMLWrapper[parentTag];\n            if (wrapper === undefined) {\n                return _DOMTreeConstructionC.prototype.insertHTMLBefore.call(this, parent, html, reference);\n            }\n            return fixInnerHTML(parent, wrapper, div, html, reference);\n        };\n\n        return DOMTreeConstructionWithInnerHTMLFix;\n    }(DOMTreeConstructionClass);\n}\nfunction fixInnerHTML(parent, wrapper, div, html, reference) {\n    var wrappedHtml = wrapper.before + html + wrapper.after;\n    div.innerHTML = wrappedHtml;\n    var parentNode = div;\n    for (var i = 0; i < wrapper.depth; i++) {\n        parentNode = parentNode.childNodes[0];\n    }\n\n    var _moveNodesBefore = moveNodesBefore(parentNode, parent, reference),\n        first = _moveNodesBefore[0],\n        last = _moveNodesBefore[1];\n\n    return new ConcreteBounds(parent, first, last);\n}\nfunction shouldApplyFix(document) {\n    var table = document.createElement('table');\n    try {\n        table.innerHTML = '<tbody></tbody>';\n    } catch (e) {} finally {\n        if (table.childNodes.length !== 0) {\n            // It worked as expected, no fix required\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nimport { ConcreteBounds } from '../bounds';\nimport { moveNodesBefore } from '../dom/helper';\nexport var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n// Patch:    insertAdjacentHTML on SVG Fix\n// Browsers: Safari, IE, Edge, Firefox ~33-34\n// Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is\n//           present but throws an exception on IE and Edge. Old versions of\n//           Firefox create nodes in the incorrect namespace.\n// Fix:      Since IE and Edge silently fail to create SVG nodes using\n//           innerHTML, and because Firefox may create nodes in the incorrect\n//           namespace using innerHTML on SVG elements, an HTML-string wrapping\n//           approach is used. A pre/post SVG tag is added to the string, then\n//           that whole string is added to a div. The created nodes are plucked\n//           out and applied to the target location on DOM.\nexport function domChanges(document, DOMChangesClass, svgNamespace) {\n    if (!document) return DOMChangesClass;\n    if (!shouldApplyFix(document, svgNamespace)) {\n        return DOMChangesClass;\n    }\n    var div = document.createElement('div');\n    return function (_DOMChangesClass) {\n        _inherits(DOMChangesWithSVGInnerHTMLFix, _DOMChangesClass);\n\n        function DOMChangesWithSVGInnerHTMLFix() {\n            _classCallCheck(this, DOMChangesWithSVGInnerHTMLFix);\n\n            return _possibleConstructorReturn(this, _DOMChangesClass.apply(this, arguments));\n        }\n\n        DOMChangesWithSVGInnerHTMLFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {\n            if (html === null || html === '') {\n                return _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n            }\n            if (parent.namespaceURI !== svgNamespace) {\n                return _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n            }\n            return fixSVG(parent, div, html, nextSibling);\n        };\n\n        return DOMChangesWithSVGInnerHTMLFix;\n    }(DOMChangesClass);\n}\nexport function treeConstruction(document, TreeConstructionClass, svgNamespace) {\n    if (!document) return TreeConstructionClass;\n    if (!shouldApplyFix(document, svgNamespace)) {\n        return TreeConstructionClass;\n    }\n    var div = document.createElement('div');\n    return function (_TreeConstructionClas) {\n        _inherits(TreeConstructionWithSVGInnerHTMLFix, _TreeConstructionClas);\n\n        function TreeConstructionWithSVGInnerHTMLFix() {\n            _classCallCheck(this, TreeConstructionWithSVGInnerHTMLFix);\n\n            return _possibleConstructorReturn(this, _TreeConstructionClas.apply(this, arguments));\n        }\n\n        TreeConstructionWithSVGInnerHTMLFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, html, reference) {\n            if (html === null || html === '') {\n                return _TreeConstructionClas.prototype.insertHTMLBefore.call(this, parent, html, reference);\n            }\n            if (parent.namespaceURI !== svgNamespace) {\n                return _TreeConstructionClas.prototype.insertHTMLBefore.call(this, parent, html, reference);\n            }\n            return fixSVG(parent, div, html, reference);\n        };\n\n        return TreeConstructionWithSVGInnerHTMLFix;\n    }(TreeConstructionClass);\n}\nfunction fixSVG(parent, div, html, reference) {\n    // IE, Edge: also do not correctly support using `innerHTML` on SVG\n    // namespaced elements. So here a wrapper is used.\n    var wrappedHtml = '<svg>' + html + '</svg>';\n    div.innerHTML = wrappedHtml;\n\n    var _moveNodesBefore = moveNodesBefore(div.firstChild, parent, reference),\n        first = _moveNodesBefore[0],\n        last = _moveNodesBefore[1];\n\n    return new ConcreteBounds(parent, first, last);\n}\nfunction shouldApplyFix(document, svgNamespace) {\n    var svg = document.createElementNS(svgNamespace, 'svg');\n    try {\n        svg['insertAdjacentHTML']('beforeEnd', '<circle></circle>');\n    } catch (e) {\n        // IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG\n        // Safari: Will throw, insertAdjacentHTML is not present on SVG\n    } finally {\n        // FF: Old versions will create a node in the wrong namespace\n        if (svg.childNodes.length === 1 && svg.firstChild.namespaceURI === SVG_NAMESPACE) {\n            // The test worked as expected, no fix required\n            return false;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWlubmVyLWh0bWwtZml4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3ZnLWlubmVyLWh0bWwtZml4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsQUFBTyxTQUFVLEFBQWMsQUFBRSxzQkFBTSxBQUFXLEFBQUM7QUFDbkQsQUFBTyxTQUFFLEFBQWUsQUFBbUMsdUJBQU0sQUFBZSxBQUFDO0FBR2pGLEFBQU0sT0FBQyxJQUFNLEFBQWEsZ0JBQUcsQUFBNEIsQUFBQztBQUcxRCxBQUEwQztBQUMxQyxBQUE2QztBQUM3QyxBQUErRTtBQUMvRSxBQUE0RTtBQUM1RSxBQUE2RDtBQUM3RCxBQUFzRTtBQUN0RSxBQUE2RTtBQUM3RSxBQUErRTtBQUMvRSxBQUE4RTtBQUM5RSxBQUErRTtBQUMvRSxBQUEyRDtBQUMzRCxBQUFNLDJCQUFxQixBQUEwQixVQUFFLEFBQWtDLGlCQUFFLEFBQTJCO0FBQ3BILEFBQUUsQUFBQyxRQUFDLENBQUMsQUFBUSxBQUFDLFVBQUMsQUFBTSxPQUFDLEFBQWUsQUFBQztBQUV0QyxBQUFFLEFBQUMsUUFBQyxDQUFDLEFBQWMsZUFBQyxBQUFRLFVBQUUsQUFBWSxBQUFDLEFBQUMsZUFBQyxBQUFDO0FBQzVDLEFBQU0sZUFBQyxBQUFlLEFBQUMsQUFDekI7QUFBQztBQUVELFFBQUksQUFBRyxNQUFHLEFBQVEsU0FBQyxBQUFhLGNBQUMsQUFBSyxBQUFDLEFBQUM7QUFFeEMsQUFBTSxBQUFDLEFBQW9DOzs7Ozs7Ozs7Z0RBQ3pDLEFBQWdCLDZDQUFDLEFBQW1CLFFBQUUsQUFBaUIsYUFBRSxBQUFZO0FBQ25FLEFBQUUsQUFBQyxnQkFBQyxBQUFJLFNBQUssQUFBSSxRQUFJLEFBQUksU0FBSyxBQUFFLEFBQUMsSUFBQyxBQUFDO0FBQ2pDLEFBQU0sdUJBQUMsQUFBSywyQkFBQyxBQUFnQiw0QkFBQyxBQUFNLFFBQUUsQUFBVyxhQUFFLEFBQUksQUFBQyxBQUFDLEFBQzNEO0FBQUM7QUFFRCxBQUFF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O0FBRUQsQUFBTSxlQUFDLEFBQUksQUFBQyxBQUNkO0FBQUMsQUFDSDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm91bmRzLCBDb25jcmV0ZUJvdW5kcyB9IGZyb20gJy4uL2JvdW5kcyc7XG5pbXBvcnQgeyBtb3ZlTm9kZXNCZWZvcmUsIERPTUNoYW5nZXMsIERPTVRyZWVDb25zdHJ1Y3Rpb24gfSBmcm9tICcuLi9kb20vaGVscGVyJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5leHBvcnQgY29uc3QgU1ZHX05BTUVTUEFDRSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5leHBvcnQgdHlwZSBTVkdfTkFNRVNQQUNFID0gdHlwZW9mIFNWR19OQU1FU1BBQ0U7XG5cbi8vIFBhdGNoOiAgICBpbnNlcnRBZGphY2VudEhUTUwgb24gU1ZHIEZpeFxuLy8gQnJvd3NlcnM6IFNhZmFyaSwgSUUsIEVkZ2UsIEZpcmVmb3ggfjMzLTM0XG4vLyBSZWFzb246ICAgaW5zZXJ0QWRqYWNlbnRIVE1MIGRvZXMgbm90IGV4aXN0IG9uIFNWRyBlbGVtZW50cyBpbiBTYWZhcmkuIEl0IGlzXG4vLyAgICAgICAgICAgcHJlc2VudCBidXQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBvbiBJRSBhbmQgRWRnZS4gT2xkIHZlcnNpb25zIG9mXG4vLyAgICAgICAgICAgRmlyZWZveCBjcmVhdGUgbm9kZXMgaW4gdGhlIGluY29ycmVjdCBuYW1lc3BhY2UuXG4vLyBGaXg6ICAgICAgU2luY2UgSUUgYW5kIEVkZ2Ugc2lsZW50bHkgZmFpbCB0byBjcmVhdGUgU1ZHIG5vZGVzIHVzaW5nXG4vLyAgICAgICAgICAgaW5uZXJIVE1MLCBhbmQgYmVjYXVzZSBGaXJlZm94IG1heSBjcmVhdGUgbm9kZXMgaW4gdGhlIGluY29ycmVjdFxuLy8gICAgICAgICAgIG5hbWVzcGFjZSB1c2luZyBpbm5lckhUTUwgb24gU1ZHIGVsZW1lbnRzLCBhbiBIVE1MLXN0cmluZyB3cmFwcGluZ1xuLy8gICAgICAgICAgIGFwcHJvYWNoIGlzIHVzZWQuIEEgcHJlL3Bvc3QgU1ZHIHRhZyBpcyBhZGRlZCB0byB0aGUgc3RyaW5nLCB0aGVuXG4vLyAgICAgICAgICAgdGhhdCB3aG9sZSBzdHJpbmcgaXMgYWRkZWQgdG8gYSBkaXYuIFRoZSBjcmVhdGVkIG5vZGVzIGFyZSBwbHVja2VkXG4vLyAgICAgICAgICAgb3V0IGFuZCBhcHBsaWVkIHRvIHRoZSB0YXJnZXQgbG9jYXRpb24gb24gRE9NLlxuZXhwb3J0IGZ1bmN0aW9uIGRvbUNoYW5nZXMoZG9jdW1lbnQ6IE9wdGlvbjxEb2N1bWVudD4sIERPTUNoYW5nZXNDbGFzczogdHlwZW9mIERPTUNoYW5nZXMsIHN2Z05hbWVzcGFjZTogU1ZHX05BTUVTUEFDRSk6IHR5cGVvZiBET01DaGFuZ2VzIHtcbiAgaWYgKCFkb2N1bWVudCkgcmV0dXJuIERPTUNoYW5nZXNDbGFzcztcblxuICBpZiAoIXNob3VsZEFwcGx5Rml4KGRvY3VtZW50LCBzdmdOYW1lc3BhY2UpKSB7XG4gICAgcmV0dXJuIERPTUNoYW5nZXNDbGFzcztcbiAgfVxuXG4gIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICByZXR1cm4gY2xhc3MgRE9NQ2hhbmdlc1dpdGhTVkdJbm5lckhUTUxGaXggZXh0ZW5kcyBET01DaGFuZ2VzQ2xhc3Mge1xuICAgIGluc2VydEhUTUxCZWZvcmUocGFyZW50OiBIVE1MRWxlbWVudCwgbmV4dFNpYmxpbmc6IE5vZGUsIGh0bWw6IHN0cmluZyk6IEJvdW5kcyB7XG4gICAgICBpZiAoaHRtbCA9PT0gbnVsbCB8fCBodG1sID09PSAnJykge1xuICAgICAgICByZXR1cm4gc3VwZXIuaW5zZXJ0SFRNTEJlZm9yZShwYXJlbnQsIG5leHRTaWJsaW5nLCBodG1sKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudC5uYW1lc3BhY2VVUkkgIT09IHN2Z05hbWVzcGFjZSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuaW5zZXJ0SFRNTEJlZm9yZShwYXJlbnQsIG5leHRTaWJsaW5nLCBodG1sKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpeFNWRyhwYXJlbnQsIGRpdiwgaHRtbCwgbmV4dFNpYmxpbmcpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyZWVDb25zdHJ1Y3Rpb24oZG9jdW1lbnQ6IE9wdGlvbjxEb2N1bWVudD4sIFRyZWVDb25zdHJ1Y3Rpb25DbGFzczogdHlwZW9mIERPTVRyZWVDb25zdHJ1Y3Rpb24sIHN2Z05hbWVzcGFjZTogU1ZHX05BTUVTUEFDRSk6IHR5cGVvZiBET01UcmVlQ29uc3RydWN0aW9uIHtcbiAgaWYgKCFkb2N1bWVudCkgcmV0dXJuIFRyZWVDb25zdHJ1Y3Rpb25DbGFzcztcblxuICBpZiAoIXNob3VsZEFwcGx5Rml4KGRvY3VtZW50LCBzdmdOYW1lc3BhY2UpKSB7XG4gICAgcmV0dXJuIFRyZWVDb25zdHJ1Y3Rpb25DbGFzcztcbiAgfVxuXG4gIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICByZXR1cm4gY2xhc3MgVHJlZUNvbnN0cnVjdGlvbldpdGhTVkdJbm5lckhUTUxGaXggZXh0ZW5kcyBUcmVlQ29uc3RydWN0aW9uQ2xhc3Mge1xuICAgIGluc2VydEhUTUxCZWZvcmUocGFyZW50OiBIVE1MRWxlbWVudCwgaHRtbDogc3RyaW5nLCAgcmVmZXJlbmNlOiBOb2RlLCk6IEJvdW5kcyB7XG4gICAgICBpZiAoaHRtbCA9PT0gbnVsbCB8fCBodG1sID09PSAnJykge1xuICAgICAgICByZXR1cm4gc3VwZXIuaW5zZXJ0SFRNTEJlZm9yZShwYXJlbnQsIGh0bWwsIHJlZmVyZW5jZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnQubmFtZXNwYWNlVVJJICE9PSBzdmdOYW1lc3BhY2UpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmluc2VydEhUTUxCZWZvcmUocGFyZW50LCBodG1sLCByZWZlcmVuY2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZml4U1ZHKHBhcmVudCwgZGl2LCBodG1sLCByZWZlcmVuY2UpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZml4U1ZHKHBhcmVudDogRWxlbWVudCwgZGl2OiBIVE1MRWxlbWVudCwgaHRtbDogc3RyaW5nLCByZWZlcmVuY2U6IE5vZGUpOiBCb3VuZHMge1xuICAvLyBJRSwgRWRnZTogYWxzbyBkbyBub3QgY29ycmVjdGx5IHN1cHBvcnQgdXNpbmcgYGlubmVySFRNTGAgb24gU1ZHXG4gIC8vIG5hbWVzcGFjZWQgZWxlbWVudHMuIFNvIGhlcmUgYSB3cmFwcGVyIGlzIHVzZWQuXG4gIGxldCB3cmFwcGVkSHRtbCA9ICc8c3ZnPicgKyBodG1sICsgJzwvc3ZnPic7XG5cbiAgZGl2LmlubmVySFRNTCA9IHdyYXBwZWRIdG1sO1xuXG4gIGxldCBbZmlyc3QsIGxhc3RdID0gbW92ZU5vZGVzQmVmb3JlKGRpdi5maXJzdENoaWxkIGFzIE5vZGUsIHBhcmVudCwgcmVmZXJlbmNlKTtcbiAgcmV0dXJuIG5ldyBDb25jcmV0ZUJvdW5kcyhwYXJlbnQsIGZpcnN0LCBsYXN0KTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkQXBwbHlGaXgoZG9jdW1lbnQ6IERvY3VtZW50LCBzdmdOYW1lc3BhY2U6IFNWR19OQU1FU1BBQ0UpIHtcbiAgbGV0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOYW1lc3BhY2UsICdzdmcnKTtcblxuICB0cnkge1xuICAgIHN2Z1snaW5zZXJ0QWRqYWNlbnRIVE1MJ10oJ2JlZm9yZUVuZCcsICc8Y2lyY2xlPjwvY2lyY2xlPicpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUsIEVkZ2U6IFdpbGwgdGhyb3csIGluc2VydEFkamFjZW50SFRNTCBpcyB1bnN1cHBvcnRlZCBvbiBTVkdcbiAgICAvLyBTYWZhcmk6IFdpbGwgdGhyb3csIGluc2VydEFkamFjZW50SFRNTCBpcyBub3QgcHJlc2VudCBvbiBTVkdcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBGRjogT2xkIHZlcnNpb25zIHdpbGwgY3JlYXRlIGEgbm9kZSBpbiB0aGUgd3JvbmcgbmFtZXNwYWNlXG4gICAgaWYgKHN2Zy5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSAmJiBzdmcuZmlyc3RDaGlsZC5uYW1lc3BhY2VVUkkgPT09IFNWR19OQU1FU1BBQ0UpIHtcbiAgICAgIC8vIFRoZSB0ZXN0IHdvcmtlZCBhcyBleHBlY3RlZCwgbm8gZml4IHJlcXVpcmVkXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiJdfQ==","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\n// Patch:    Adjacent text node merging fix\n// Browsers: IE, Edge, Firefox w/o inspector open\n// Reason:   These browsers will merge adjacent text nodes. For exmaple given\n//           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers\n//           with proper behavior will populate div.childNodes with two items.\n//           These browsers will populate it with one merged node instead.\n// Fix:      Add these nodes to a wrapper element, then iterate the childNodes\n//           of that wrapper and move the nodes to their target location. Note\n//           that potential SVG bugs will have been handled before this fix.\n//           Note that this fix must only apply to the previous text node, as\n//           the base implementation of `insertHTMLBefore` already handles\n//           following text nodes correctly.\nexport function domChanges(document, DOMChangesClass) {\n    if (!document) return DOMChangesClass;\n    if (!shouldApplyFix(document)) {\n        return DOMChangesClass;\n    }\n    return function (_DOMChangesClass) {\n        _inherits(DOMChangesWithTextNodeMergingFix, _DOMChangesClass);\n\n        function DOMChangesWithTextNodeMergingFix(document) {\n            _classCallCheck(this, DOMChangesWithTextNodeMergingFix);\n\n            var _this = _possibleConstructorReturn(this, _DOMChangesClass.call(this, document));\n\n            _this.uselessComment = document.createComment('');\n            return _this;\n        }\n\n        DOMChangesWithTextNodeMergingFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, nextSibling, html) {\n            if (html === null) {\n                return _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n            }\n            var didSetUselessComment = false;\n            var nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;\n            if (nextPrevious && nextPrevious instanceof Text) {\n                didSetUselessComment = true;\n                parent.insertBefore(this.uselessComment, nextSibling);\n            }\n            var bounds = _DOMChangesClass.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);\n            if (didSetUselessComment) {\n                parent.removeChild(this.uselessComment);\n            }\n            return bounds;\n        };\n\n        return DOMChangesWithTextNodeMergingFix;\n    }(DOMChangesClass);\n}\nexport function treeConstruction(document, TreeConstructionClass) {\n    if (!document) return TreeConstructionClass;\n    if (!shouldApplyFix(document)) {\n        return TreeConstructionClass;\n    }\n    return function (_TreeConstructionClas) {\n        _inherits(TreeConstructionWithTextNodeMergingFix, _TreeConstructionClas);\n\n        function TreeConstructionWithTextNodeMergingFix(document) {\n            _classCallCheck(this, TreeConstructionWithTextNodeMergingFix);\n\n            var _this2 = _possibleConstructorReturn(this, _TreeConstructionClas.call(this, document));\n\n            _this2.uselessComment = _this2.createComment('');\n            return _this2;\n        }\n\n        TreeConstructionWithTextNodeMergingFix.prototype.insertHTMLBefore = function insertHTMLBefore(parent, html, reference) {\n            if (html === null) {\n                return _TreeConstructionClas.prototype.insertHTMLBefore.call(this, parent, html, reference);\n            }\n            var didSetUselessComment = false;\n            var nextPrevious = reference ? reference.previousSibling : parent.lastChild;\n            if (nextPrevious && nextPrevious instanceof Text) {\n                didSetUselessComment = true;\n                parent.insertBefore(this.uselessComment, reference);\n            }\n            var bounds = _TreeConstructionClas.prototype.insertHTMLBefore.call(this, parent, html, reference);\n            if (didSetUselessComment) {\n                parent.removeChild(this.uselessComment);\n            }\n            return bounds;\n        };\n\n        return TreeConstructionWithTextNodeMergingFix;\n    }(TreeConstructionClass);\n}\nfunction shouldApplyFix(document) {\n    var mergingTextDiv = document.createElement('div');\n    mergingTextDiv.innerHTML = 'first';\n    mergingTextDiv.insertAdjacentHTML('beforeEnd', 'second');\n    if (mergingTextDiv.childNodes.length === 2) {\n        // It worked as expected, no fix required\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export { _insertHTMLBefore as insertHTMLBefore };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { ConcreteBounds, SingleNodeBounds } from '../bounds';\nimport { domChanges as domChangesTableElementFix, treeConstruction as treeConstructionTableElementFix } from '../compat/inner-html-fix';\nimport { domChanges as domChangesSvgElementFix, treeConstruction as treeConstructionSvgElementFix } from '../compat/svg-inner-html-fix';\nimport { domChanges as domChangesNodeMergingFix, treeConstruction as treeConstructionNodeMergingFix } from '../compat/text-node-merging-fix';\nexport var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n// http://www.w3.org/TR/html/syntax.html#html-integration-point\nvar SVG_INTEGRATION_POINTS = { foreignObject: 1, desc: 1, title: 1 };\n// http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes\n// TODO: Adjust SVG attributes\n// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\n// TODO: Adjust SVG elements\n// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\nexport var BLACKLIST_TABLE = Object.create(null);\n[\"b\", \"big\", \"blockquote\", \"body\", \"br\", \"center\", \"code\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"hr\", \"i\", \"img\", \"li\", \"listing\", \"main\", \"meta\", \"nobr\", \"ol\", \"p\", \"pre\", \"ruby\", \"s\", \"small\", \"span\", \"strong\", \"strike\", \"sub\", \"sup\", \"table\", \"tt\", \"u\", \"ul\", \"var\"].forEach(function (tag) {\n    return BLACKLIST_TABLE[tag] = 1;\n});\nvar WHITESPACE = /[\\t-\\r \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/;\nvar doc = typeof document === 'undefined' ? null : document;\nexport function isWhitespace(string) {\n    return WHITESPACE.test(string);\n}\nexport function moveNodesBefore(source, target, nextSibling) {\n    var first = source.firstChild;\n    var last = null;\n    var current = first;\n    while (current) {\n        last = current;\n        current = current.nextSibling;\n        target.insertBefore(last, nextSibling);\n    }\n    return [first, last];\n}\nexport var DOM;\n(function (DOM) {\n    var TreeConstruction = function () {\n        function TreeConstruction(document) {\n            _classCallCheck(this, TreeConstruction);\n\n            this.document = document;\n            this.setupUselessElement();\n        }\n\n        TreeConstruction.prototype.setupUselessElement = function setupUselessElement() {\n            this.uselessElement = this.document.createElement('div');\n        };\n\n        TreeConstruction.prototype.createElement = function createElement(tag, context) {\n            var isElementInSVGNamespace = void 0,\n                isHTMLIntegrationPoint = void 0;\n            if (context) {\n                isElementInSVGNamespace = context.namespaceURI === SVG_NAMESPACE || tag === 'svg';\n                isHTMLIntegrationPoint = SVG_INTEGRATION_POINTS[context.tagName];\n            } else {\n                isElementInSVGNamespace = tag === 'svg';\n                isHTMLIntegrationPoint = false;\n            }\n            if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {\n                // FIXME: This does not properly handle <font> with color, face, or\n                // size attributes, which is also disallowed by the spec. We should fix\n                // this.\n                if (BLACKLIST_TABLE[tag]) {\n                    throw new Error('Cannot create a ' + tag + ' inside an SVG context');\n                }\n                return this.document.createElementNS(SVG_NAMESPACE, tag);\n            } else {\n                return this.document.createElement(tag);\n            }\n        };\n\n        TreeConstruction.prototype.createElementNS = function createElementNS(namespace, tag) {\n            return this.document.createElementNS(namespace, tag);\n        };\n\n        TreeConstruction.prototype.setAttribute = function setAttribute(element, name, value, namespace) {\n            if (namespace) {\n                element.setAttributeNS(namespace, name, value);\n            } else {\n                element.setAttribute(name, value);\n            }\n        };\n\n        TreeConstruction.prototype.createTextNode = function createTextNode(text) {\n            return this.document.createTextNode(text);\n        };\n\n        TreeConstruction.prototype.createComment = function createComment(data) {\n            return this.document.createComment(data);\n        };\n\n        TreeConstruction.prototype.insertBefore = function insertBefore(parent, node, reference) {\n            parent.insertBefore(node, reference);\n        };\n\n        TreeConstruction.prototype.insertHTMLBefore = function insertHTMLBefore(parent, html, reference) {\n            return _insertHTMLBefore(this.uselessElement, parent, reference, html);\n        };\n\n        return TreeConstruction;\n    }();\n\n    DOM.TreeConstruction = TreeConstruction;\n    var appliedTreeContruction = TreeConstruction;\n    appliedTreeContruction = treeConstructionNodeMergingFix(doc, appliedTreeContruction);\n    appliedTreeContruction = treeConstructionTableElementFix(doc, appliedTreeContruction);\n    appliedTreeContruction = treeConstructionSvgElementFix(doc, appliedTreeContruction, SVG_NAMESPACE);\n    DOM.DOMTreeConstruction = appliedTreeContruction;\n})(DOM || (DOM = {}));\nexport var DOMChanges = function () {\n    function DOMChanges(document) {\n        _classCallCheck(this, DOMChanges);\n\n        this.document = document;\n        this.namespace = null;\n        this.uselessElement = this.document.createElement('div');\n    }\n\n    DOMChanges.prototype.setAttribute = function setAttribute(element, name, value) {\n        element.setAttribute(name, value);\n    };\n\n    DOMChanges.prototype.setAttributeNS = function setAttributeNS(element, namespace, name, value) {\n        element.setAttributeNS(namespace, name, value);\n    };\n\n    DOMChanges.prototype.removeAttribute = function removeAttribute(element, name) {\n        element.removeAttribute(name);\n    };\n\n    DOMChanges.prototype.removeAttributeNS = function removeAttributeNS(element, namespace, name) {\n        element.removeAttributeNS(namespace, name);\n    };\n\n    DOMChanges.prototype.createTextNode = function createTextNode(text) {\n        return this.document.createTextNode(text);\n    };\n\n    DOMChanges.prototype.createComment = function createComment(data) {\n        return this.document.createComment(data);\n    };\n\n    DOMChanges.prototype.createElement = function createElement(tag, context) {\n        var isElementInSVGNamespace = void 0,\n            isHTMLIntegrationPoint = void 0;\n        if (context) {\n            isElementInSVGNamespace = context.namespaceURI === SVG_NAMESPACE || tag === 'svg';\n            isHTMLIntegrationPoint = SVG_INTEGRATION_POINTS[context.tagName];\n        } else {\n            isElementInSVGNamespace = tag === 'svg';\n            isHTMLIntegrationPoint = false;\n        }\n        if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {\n            // FIXME: This does not properly handle <font> with color, face, or\n            // size attributes, which is also disallowed by the spec. We should fix\n            // this.\n            if (BLACKLIST_TABLE[tag]) {\n                throw new Error('Cannot create a ' + tag + ' inside an SVG context');\n            }\n            return this.document.createElementNS(SVG_NAMESPACE, tag);\n        } else {\n            return this.document.createElement(tag);\n        }\n    };\n\n    DOMChanges.prototype.insertHTMLBefore = function insertHTMLBefore(_parent, nextSibling, html) {\n        return _insertHTMLBefore(this.uselessElement, _parent, nextSibling, html);\n    };\n\n    DOMChanges.prototype.insertNodeBefore = function insertNodeBefore(parent, node, reference) {\n        if (isDocumentFragment(node)) {\n            var firstChild = node.firstChild,\n                lastChild = node.lastChild;\n\n            this.insertBefore(parent, node, reference);\n            return new ConcreteBounds(parent, firstChild, lastChild);\n        } else {\n            this.insertBefore(parent, node, reference);\n            return new SingleNodeBounds(parent, node);\n        }\n    };\n\n    DOMChanges.prototype.insertTextBefore = function insertTextBefore(parent, nextSibling, text) {\n        var textNode = this.createTextNode(text);\n        this.insertBefore(parent, textNode, nextSibling);\n        return textNode;\n    };\n\n    DOMChanges.prototype.insertBefore = function insertBefore(element, node, reference) {\n        element.insertBefore(node, reference);\n    };\n\n    DOMChanges.prototype.insertAfter = function insertAfter(element, node, reference) {\n        this.insertBefore(element, node, reference.nextSibling);\n    };\n\n    return DOMChanges;\n}();\nfunction _insertHTMLBefore(_useless, _parent, _nextSibling, html) {\n    // TypeScript vendored an old version of the DOM spec where `insertAdjacentHTML`\n    // only exists on `HTMLElement` but not on `Element`. We actually work with the\n    // newer version of the DOM API here (and monkey-patch this method in `./compat`\n    // when we detect older browsers). This is a hack to work around this limitation.\n    var parent = _parent;\n    var useless = _useless;\n    var nextSibling = _nextSibling;\n    var prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;\n    var last = void 0;\n    if (html === null || html === '') {\n        return new ConcreteBounds(parent, null, null);\n    }\n    if (nextSibling === null) {\n        parent.insertAdjacentHTML('beforeEnd', html);\n        last = parent.lastChild;\n    } else if (nextSibling instanceof HTMLElement) {\n        nextSibling.insertAdjacentHTML('beforeBegin', html);\n        last = nextSibling.previousSibling;\n    } else {\n        // Non-element nodes do not support insertAdjacentHTML, so add an\n        // element and call it on that element. Then remove the element.\n        //\n        // This also protects Edge, IE and Firefox w/o the inspector open\n        // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts\n        parent.insertBefore(useless, nextSibling);\n        useless.insertAdjacentHTML('beforeBegin', html);\n        last = useless.previousSibling;\n        parent.removeChild(useless);\n    }\n    var first = prev ? prev.nextSibling : parent.firstChild;\n    return new ConcreteBounds(parent, first, last);\n}\nfunction isDocumentFragment(node) {\n    return node.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\n}\nvar helper = DOMChanges;\nhelper = domChangesNodeMergingFix(doc, helper);\nhelper = domChangesTableElementFix(doc, helper);\nhelper = domChangesSvgElementFix(doc, helper, SVG_NAMESPACE);\nexport default helper;\nexport var DOMTreeConstruction = DOM.DOMTreeConstruction;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { sanitizeAttributeValue, requiresSanitization } from './sanitized-values';\nimport { normalizeProperty } from './props';\nimport { SVG_NAMESPACE } from './helper';\nimport { normalizeTextValue } from '../compiled/opcodes/content';\nexport function defaultManagers(element, attr, _isTrusting, _namespace) {\n    var tagName = element.tagName;\n    var isSVG = element.namespaceURI === SVG_NAMESPACE;\n    if (isSVG) {\n        return defaultAttributeManagers(tagName, attr);\n    }\n\n    var _normalizeProperty = normalizeProperty(element, attr),\n        type = _normalizeProperty.type,\n        normalized = _normalizeProperty.normalized;\n\n    if (type === 'attr') {\n        return defaultAttributeManagers(tagName, normalized);\n    } else {\n        return defaultPropertyManagers(tagName, normalized);\n    }\n}\nexport function defaultPropertyManagers(tagName, attr) {\n    if (requiresSanitization(tagName, attr)) {\n        return new SafePropertyManager(attr);\n    }\n    if (isUserInputValue(tagName, attr)) {\n        return INPUT_VALUE_PROPERTY_MANAGER;\n    }\n    if (isOptionSelected(tagName, attr)) {\n        return OPTION_SELECTED_MANAGER;\n    }\n    return new PropertyManager(attr);\n}\nexport function defaultAttributeManagers(tagName, attr) {\n    if (requiresSanitization(tagName, attr)) {\n        return new SafeAttributeManager(attr);\n    }\n    return new AttributeManager(attr);\n}\nexport function readDOMAttr(element, attr) {\n    var isSVG = element.namespaceURI === SVG_NAMESPACE;\n\n    var _normalizeProperty2 = normalizeProperty(element, attr),\n        type = _normalizeProperty2.type,\n        normalized = _normalizeProperty2.normalized;\n\n    if (isSVG) {\n        return element.getAttribute(normalized);\n    }\n    if (type === 'attr') {\n        return element.getAttribute(normalized);\n    }\n    {\n        return element[normalized];\n    }\n}\n;\nexport var AttributeManager = function () {\n    function AttributeManager(attr) {\n        _classCallCheck(this, AttributeManager);\n\n        this.attr = attr;\n    }\n\n    AttributeManager.prototype.setAttribute = function setAttribute(env, element, value, namespace) {\n        var dom = env.getAppendOperations();\n        var normalizedValue = normalizeAttributeValue(value);\n        if (!isAttrRemovalValue(normalizedValue)) {\n            dom.setAttribute(element, this.attr, normalizedValue, namespace);\n        }\n    };\n\n    AttributeManager.prototype.updateAttribute = function updateAttribute(env, element, value, namespace) {\n        if (value === null || value === undefined || value === false) {\n            if (namespace) {\n                env.getDOM().removeAttributeNS(element, namespace, this.attr);\n            } else {\n                env.getDOM().removeAttribute(element, this.attr);\n            }\n        } else {\n            this.setAttribute(env, element, value);\n        }\n    };\n\n    return AttributeManager;\n}();\n;\nexport var PropertyManager = function (_AttributeManager) {\n    _inherits(PropertyManager, _AttributeManager);\n\n    function PropertyManager() {\n        _classCallCheck(this, PropertyManager);\n\n        return _possibleConstructorReturn(this, _AttributeManager.apply(this, arguments));\n    }\n\n    PropertyManager.prototype.setAttribute = function setAttribute(_env, element, value, _namespace) {\n        if (!isAttrRemovalValue(value)) {\n            element[this.attr] = value;\n        }\n    };\n\n    PropertyManager.prototype.removeAttribute = function removeAttribute(env, element, namespace) {\n        // TODO this sucks but to preserve properties first and to meet current\n        // semantics we must do this.\n        var attr = this.attr;\n\n        if (namespace) {\n            env.getDOM().removeAttributeNS(element, namespace, attr);\n        } else {\n            env.getDOM().removeAttribute(element, attr);\n        }\n    };\n\n    PropertyManager.prototype.updateAttribute = function updateAttribute(env, element, value, namespace) {\n        // ensure the property is always updated\n        element[this.attr] = value;\n        if (isAttrRemovalValue(value)) {\n            this.removeAttribute(env, element, namespace);\n        }\n    };\n\n    return PropertyManager;\n}(AttributeManager);\n;\nfunction normalizeAttributeValue(value) {\n    if (value === false || value === undefined || value === null) {\n        return null;\n    }\n    if (value === true) {\n        return '';\n    }\n    // onclick function etc in SSR\n    if (typeof value === 'function') {\n        return null;\n    }\n    return String(value);\n}\nfunction isAttrRemovalValue(value) {\n    return value === null || value === undefined;\n}\n\nvar SafePropertyManager = function (_PropertyManager) {\n    _inherits(SafePropertyManager, _PropertyManager);\n\n    function SafePropertyManager() {\n        _classCallCheck(this, SafePropertyManager);\n\n        return _possibleConstructorReturn(this, _PropertyManager.apply(this, arguments));\n    }\n\n    SafePropertyManager.prototype.setAttribute = function setAttribute(env, element, value) {\n        _PropertyManager.prototype.setAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));\n    };\n\n    SafePropertyManager.prototype.updateAttribute = function updateAttribute(env, element, value) {\n        _PropertyManager.prototype.updateAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));\n    };\n\n    return SafePropertyManager;\n}(PropertyManager);\n\nfunction isUserInputValue(tagName, attribute) {\n    return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';\n}\n\nvar InputValuePropertyManager = function (_AttributeManager2) {\n    _inherits(InputValuePropertyManager, _AttributeManager2);\n\n    function InputValuePropertyManager() {\n        _classCallCheck(this, InputValuePropertyManager);\n\n        return _possibleConstructorReturn(this, _AttributeManager2.apply(this, arguments));\n    }\n\n    InputValuePropertyManager.prototype.setAttribute = function setAttribute(_env, element, value) {\n        var input = element;\n        input.value = normalizeTextValue(value);\n    };\n\n    InputValuePropertyManager.prototype.updateAttribute = function updateAttribute(_env, element, value) {\n        var input = element;\n        var currentValue = input.value;\n        var normalizedValue = normalizeTextValue(value);\n        if (currentValue !== normalizedValue) {\n            input.value = normalizedValue;\n        }\n    };\n\n    return InputValuePropertyManager;\n}(AttributeManager);\n\nexport var INPUT_VALUE_PROPERTY_MANAGER = new InputValuePropertyManager('value');\nfunction isOptionSelected(tagName, attribute) {\n    return tagName === 'OPTION' && attribute === 'selected';\n}\n\nvar OptionSelectedManager = function (_PropertyManager2) {\n    _inherits(OptionSelectedManager, _PropertyManager2);\n\n    function OptionSelectedManager() {\n        _classCallCheck(this, OptionSelectedManager);\n\n        return _possibleConstructorReturn(this, _PropertyManager2.apply(this, arguments));\n    }\n\n    OptionSelectedManager.prototype.setAttribute = function setAttribute(_env, element, value) {\n        if (value !== null && value !== undefined && value !== false) {\n            var option = element;\n            option.selected = true;\n        }\n    };\n\n    OptionSelectedManager.prototype.updateAttribute = function updateAttribute(_env, element, value) {\n        var option = element;\n        if (value) {\n            option.selected = true;\n        } else {\n            option.selected = false;\n        }\n    };\n\n    return OptionSelectedManager;\n}(PropertyManager);\n\nexport var OPTION_SELECTED_MANAGER = new OptionSelectedManager('selected');\n\nvar SafeAttributeManager = function (_AttributeManager3) {\n    _inherits(SafeAttributeManager, _AttributeManager3);\n\n    function SafeAttributeManager() {\n        _classCallCheck(this, SafeAttributeManager);\n\n        return _possibleConstructorReturn(this, _AttributeManager3.apply(this, arguments));\n    }\n\n    SafeAttributeManager.prototype.setAttribute = function setAttribute(env, element, value) {\n        _AttributeManager3.prototype.setAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));\n    };\n\n    SafeAttributeManager.prototype.updateAttribute = function updateAttribute(env, element, value, _namespace) {\n        _AttributeManager3.prototype.updateAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));\n    };\n\n    return SafeAttributeManager;\n}(AttributeManager);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { populateBuiltins as _populateBuiltins } from './syntax/functions';\nimport { Constants } from './environment/constants';\nimport { UNDEFINED_REFERENCE, ConditionalReference } from './references';\nimport { defaultManagers } from './dom/attribute-managers';\nimport { ensureGuid } from '@glimmer/util';\nexport var Scope = function () {\n    function Scope(\n    // the 0th slot is `self`\n    slots) {\n        var callerScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var evalScope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var partialMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n        _classCallCheck(this, Scope);\n\n        this.slots = slots;\n        this.callerScope = callerScope;\n        this.evalScope = evalScope;\n        this.partialMap = partialMap;\n    }\n\n    Scope.root = function root(self) {\n        var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n        var refs = new Array(size + 1);\n        for (var i = 0; i <= size; i++) {\n            refs[i] = UNDEFINED_REFERENCE;\n        }\n        return new Scope(refs).init({ self: self });\n    };\n\n    Scope.sized = function sized() {\n        var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        var refs = new Array(size + 1);\n        for (var i = 0; i <= size; i++) {\n            refs[i] = UNDEFINED_REFERENCE;\n        }\n        return new Scope(refs);\n    };\n\n    Scope.prototype.init = function init(_ref) {\n        var self = _ref.self;\n\n        this.slots[0] = self;\n        return this;\n    };\n\n    Scope.prototype.getSelf = function getSelf() {\n        return this.get(0);\n    };\n\n    Scope.prototype.getSymbol = function getSymbol(symbol) {\n        return this.get(symbol);\n    };\n\n    Scope.prototype.getBlock = function getBlock(symbol) {\n        return this.get(symbol);\n    };\n\n    Scope.prototype.getEvalScope = function getEvalScope() {\n        return this.evalScope;\n    };\n\n    Scope.prototype.getPartialMap = function getPartialMap() {\n        return this.partialMap;\n    };\n\n    Scope.prototype.bind = function bind(symbol, value) {\n        this.set(symbol, value);\n    };\n\n    Scope.prototype.bindSelf = function bindSelf(self) {\n        this.set(0, self);\n    };\n\n    Scope.prototype.bindSymbol = function bindSymbol(symbol, value) {\n        this.set(symbol, value);\n    };\n\n    Scope.prototype.bindBlock = function bindBlock(symbol, value) {\n        this.set(symbol, value);\n    };\n\n    Scope.prototype.bindEvalScope = function bindEvalScope(map) {\n        this.evalScope = map;\n    };\n\n    Scope.prototype.bindPartialMap = function bindPartialMap(map) {\n        this.partialMap = map;\n    };\n\n    Scope.prototype.bindCallerScope = function bindCallerScope(scope) {\n        this.callerScope = scope;\n    };\n\n    Scope.prototype.getCallerScope = function getCallerScope() {\n        return this.callerScope;\n    };\n\n    Scope.prototype.child = function child() {\n        return new Scope(this.slots.slice(), this.callerScope, this.evalScope, this.partialMap);\n    };\n\n    Scope.prototype.get = function get(index) {\n        if (index >= this.slots.length) {\n            throw new RangeError('BUG: cannot get $' + index + ' from scope; length=' + this.slots.length);\n        }\n        return this.slots[index];\n    };\n\n    Scope.prototype.set = function set(index, value) {\n        if (index >= this.slots.length) {\n            throw new RangeError('BUG: cannot get $' + index + ' from scope; length=' + this.slots.length);\n        }\n        this.slots[index] = value;\n    };\n\n    return Scope;\n}();\n\nvar Transaction = function () {\n    function Transaction() {\n        _classCallCheck(this, Transaction);\n\n        this.scheduledInstallManagers = [];\n        this.scheduledInstallModifiers = [];\n        this.scheduledUpdateModifierManagers = [];\n        this.scheduledUpdateModifiers = [];\n        this.createdComponents = [];\n        this.createdManagers = [];\n        this.updatedComponents = [];\n        this.updatedManagers = [];\n        this.destructors = [];\n    }\n\n    Transaction.prototype.didCreate = function didCreate(component, manager) {\n        this.createdComponents.push(component);\n        this.createdManagers.push(manager);\n    };\n\n    Transaction.prototype.didUpdate = function didUpdate(component, manager) {\n        this.updatedComponents.push(component);\n        this.updatedManagers.push(manager);\n    };\n\n    Transaction.prototype.scheduleInstallModifier = function scheduleInstallModifier(modifier, manager) {\n        this.scheduledInstallManagers.push(manager);\n        this.scheduledInstallModifiers.push(modifier);\n    };\n\n    Transaction.prototype.scheduleUpdateModifier = function scheduleUpdateModifier(modifier, manager) {\n        this.scheduledUpdateModifierManagers.push(manager);\n        this.scheduledUpdateModifiers.push(modifier);\n    };\n\n    Transaction.prototype.didDestroy = function didDestroy(d) {\n        this.destructors.push(d);\n    };\n\n    Transaction.prototype.commit = function commit() {\n        var createdComponents = this.createdComponents,\n            createdManagers = this.createdManagers;\n\n        for (var i = 0; i < createdComponents.length; i++) {\n            var component = createdComponents[i];\n            var manager = createdManagers[i];\n            manager.didCreate(component);\n        }\n        var updatedComponents = this.updatedComponents,\n            updatedManagers = this.updatedManagers;\n\n        for (var _i = 0; _i < updatedComponents.length; _i++) {\n            var _component = updatedComponents[_i];\n            var _manager = updatedManagers[_i];\n            _manager.didUpdate(_component);\n        }\n        var destructors = this.destructors;\n\n        for (var _i2 = 0; _i2 < destructors.length; _i2++) {\n            destructors[_i2].destroy();\n        }\n        var scheduledInstallManagers = this.scheduledInstallManagers,\n            scheduledInstallModifiers = this.scheduledInstallModifiers;\n\n        for (var _i3 = 0; _i3 < scheduledInstallManagers.length; _i3++) {\n            var _manager2 = scheduledInstallManagers[_i3];\n            var modifier = scheduledInstallModifiers[_i3];\n            _manager2.install(modifier);\n        }\n        var scheduledUpdateModifierManagers = this.scheduledUpdateModifierManagers,\n            scheduledUpdateModifiers = this.scheduledUpdateModifiers;\n\n        for (var _i4 = 0; _i4 < scheduledUpdateModifierManagers.length; _i4++) {\n            var _manager3 = scheduledUpdateModifierManagers[_i4];\n            var _modifier = scheduledUpdateModifiers[_i4];\n            _manager3.update(_modifier);\n        }\n    };\n\n    return Transaction;\n}();\n\nexport var Opcode = function () {\n    function Opcode(array) {\n        _classCallCheck(this, Opcode);\n\n        this.array = array;\n        this.offset = 0;\n    }\n\n    _createClass(Opcode, [{\n        key: 'type',\n        get: function () {\n            return this.array[this.offset];\n        }\n    }, {\n        key: 'op1',\n        get: function () {\n            return this.array[this.offset + 1];\n        }\n    }, {\n        key: 'op2',\n        get: function () {\n            return this.array[this.offset + 2];\n        }\n    }, {\n        key: 'op3',\n        get: function () {\n            return this.array[this.offset + 3];\n        }\n    }]);\n\n    return Opcode;\n}();\nexport var Program = function () {\n    function Program() {\n        _classCallCheck(this, Program);\n\n        this.opcodes = [];\n        this._offset = 0;\n        this._opcode = new Opcode(this.opcodes);\n    }\n\n    Program.prototype.opcode = function opcode(offset) {\n        this._opcode.offset = offset;\n        return this._opcode;\n    };\n\n    Program.prototype.set = function set(pos, type) {\n        var op1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var op2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n        var op3 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n        this.opcodes[pos] = type;\n        this.opcodes[pos + 1] = op1;\n        this.opcodes[pos + 2] = op2;\n        this.opcodes[pos + 3] = op3;\n    };\n\n    Program.prototype.push = function push(type) {\n        var op1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var op2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var op3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n        var offset = this._offset;\n        this.opcodes[this._offset++] = type;\n        this.opcodes[this._offset++] = op1;\n        this.opcodes[this._offset++] = op2;\n        this.opcodes[this._offset++] = op3;\n        return offset;\n    };\n\n    _createClass(Program, [{\n        key: 'next',\n        get: function () {\n            return this._offset;\n        }\n    }, {\n        key: 'current',\n        get: function () {\n            return this._offset - 4;\n        }\n    }]);\n\n    return Program;\n}();\nexport var Environment = function () {\n    function Environment(_ref2) {\n        var appendOperations = _ref2.appendOperations,\n            updateOperations = _ref2.updateOperations;\n\n        _classCallCheck(this, Environment);\n\n        this._macros = null;\n        this._transaction = null;\n        this.constants = new Constants();\n        this.program = new Program();\n        this.appendOperations = appendOperations;\n        this.updateOperations = updateOperations;\n    }\n\n    Environment.prototype.toConditionalReference = function toConditionalReference(reference) {\n        return new ConditionalReference(reference);\n    };\n\n    Environment.prototype.getAppendOperations = function getAppendOperations() {\n        return this.appendOperations;\n    };\n\n    Environment.prototype.getDOM = function getDOM() {\n        return this.updateOperations;\n    };\n\n    Environment.prototype.getIdentity = function getIdentity(object) {\n        return ensureGuid(object) + '';\n    };\n\n    Environment.prototype.begin = function begin() {\n        this._transaction = new Transaction();\n    };\n\n    Environment.prototype.didCreate = function didCreate(component, manager) {\n        this.transaction.didCreate(component, manager);\n    };\n\n    Environment.prototype.didUpdate = function didUpdate(component, manager) {\n        this.transaction.didUpdate(component, manager);\n    };\n\n    Environment.prototype.scheduleInstallModifier = function scheduleInstallModifier(modifier, manager) {\n        this.transaction.scheduleInstallModifier(modifier, manager);\n    };\n\n    Environment.prototype.scheduleUpdateModifier = function scheduleUpdateModifier(modifier, manager) {\n        this.transaction.scheduleUpdateModifier(modifier, manager);\n    };\n\n    Environment.prototype.didDestroy = function didDestroy(d) {\n        this.transaction.didDestroy(d);\n    };\n\n    Environment.prototype.commit = function commit() {\n        this.transaction.commit();\n        this._transaction = null;\n    };\n\n    Environment.prototype.attributeFor = function attributeFor(element, attr, isTrusting, namespace) {\n        return defaultManagers(element, attr, isTrusting, namespace === undefined ? null : namespace);\n    };\n\n    Environment.prototype.macros = function macros() {\n        var macros = this._macros;\n        if (!macros) {\n            this._macros = macros = this.populateBuiltins();\n        }\n        return macros;\n    };\n\n    Environment.prototype.populateBuiltins = function populateBuiltins() {\n        return _populateBuiltins();\n    };\n\n    _createClass(Environment, [{\n        key: 'transaction',\n        get: function () {\n            return this._transaction;\n        }\n    }]);\n\n    return Environment;\n}();\nexport default Environment;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { clear, move as moveBounds } from '../bounds';\nimport { ElementStack } from '../builder';\nimport { Stack, LinkedList, dict } from '@glimmer/util';\nimport { IteratorSynchronizer,\n// Tags\ncombine, UpdatableTag, combineSlice, CONSTANT_TAG, INITIAL } from '@glimmer/reference';\nimport { UpdatingOpcode } from '../opcodes';\nimport VM, { EvaluationStack } from './append';\n\nvar UpdatingVM = function () {\n    function UpdatingVM(env, _ref) {\n        var _ref$alwaysRevalidate = _ref.alwaysRevalidate,\n            alwaysRevalidate = _ref$alwaysRevalidate === undefined ? false : _ref$alwaysRevalidate;\n\n        _classCallCheck(this, UpdatingVM);\n\n        this.frameStack = new Stack();\n        this.env = env;\n        this.constants = env.constants;\n        this.dom = env.getDOM();\n        this.alwaysRevalidate = alwaysRevalidate;\n    }\n\n    UpdatingVM.prototype.execute = function execute(opcodes, handler) {\n        var frameStack = this.frameStack;\n\n        this.try(opcodes, handler);\n        while (true) {\n            if (frameStack.isEmpty()) break;\n            var opcode = this.frame.nextStatement();\n            if (opcode === null) {\n                this.frameStack.pop();\n                continue;\n            }\n            opcode.evaluate(this);\n        }\n    };\n\n    UpdatingVM.prototype.goto = function goto(op) {\n        this.frame.goto(op);\n    };\n\n    UpdatingVM.prototype.try = function _try(ops, handler) {\n        this.frameStack.push(new UpdatingVMFrame(this, ops, handler));\n    };\n\n    UpdatingVM.prototype.throw = function _throw() {\n        this.frame.handleException();\n        this.frameStack.pop();\n    };\n\n    UpdatingVM.prototype.evaluateOpcode = function evaluateOpcode(opcode) {\n        opcode.evaluate(this);\n    };\n\n    _createClass(UpdatingVM, [{\n        key: 'frame',\n        get: function () {\n            return this.frameStack.current;\n        }\n    }]);\n\n    return UpdatingVM;\n}();\n\nexport default UpdatingVM;\n\nexport var BlockOpcode = function (_UpdatingOpcode) {\n    _inherits(BlockOpcode, _UpdatingOpcode);\n\n    function BlockOpcode(start, state, bounds, children) {\n        _classCallCheck(this, BlockOpcode);\n\n        var _this = _possibleConstructorReturn(this, _UpdatingOpcode.call(this));\n\n        _this.start = start;\n        _this.type = \"block\";\n        _this.next = null;\n        _this.prev = null;\n        var env = state.env,\n            scope = state.scope,\n            dynamicScope = state.dynamicScope,\n            stack = state.stack;\n\n        _this.children = children;\n        _this.env = env;\n        _this.scope = scope;\n        _this.dynamicScope = dynamicScope;\n        _this.stack = stack;\n        _this.bounds = bounds;\n        return _this;\n    }\n\n    BlockOpcode.prototype.parentElement = function parentElement() {\n        return this.bounds.parentElement();\n    };\n\n    BlockOpcode.prototype.firstNode = function firstNode() {\n        return this.bounds.firstNode();\n    };\n\n    BlockOpcode.prototype.lastNode = function lastNode() {\n        return this.bounds.lastNode();\n    };\n\n    BlockOpcode.prototype.evaluate = function evaluate(vm) {\n        vm.try(this.children, null);\n    };\n\n    BlockOpcode.prototype.destroy = function destroy() {\n        this.bounds.destroy();\n    };\n\n    BlockOpcode.prototype.didDestroy = function didDestroy() {\n        this.env.didDestroy(this.bounds);\n    };\n\n    return BlockOpcode;\n}(UpdatingOpcode);\nexport var TryOpcode = function (_BlockOpcode) {\n    _inherits(TryOpcode, _BlockOpcode);\n\n    function TryOpcode(start, state, bounds, children) {\n        _classCallCheck(this, TryOpcode);\n\n        var _this2 = _possibleConstructorReturn(this, _BlockOpcode.call(this, start, state, bounds, children));\n\n        _this2.type = \"try\";\n        _this2.tag = _this2._tag = UpdatableTag.create(CONSTANT_TAG);\n        return _this2;\n    }\n\n    TryOpcode.prototype.didInitializeChildren = function didInitializeChildren() {\n        this._tag.inner.update(combineSlice(this.children));\n    };\n\n    TryOpcode.prototype.evaluate = function evaluate(vm) {\n        vm.try(this.children, this);\n    };\n\n    TryOpcode.prototype.handleException = function handleException() {\n        var _this3 = this;\n\n        var env = this.env,\n            bounds = this.bounds,\n            children = this.children,\n            scope = this.scope,\n            dynamicScope = this.dynamicScope,\n            start = this.start,\n            stack = this.stack,\n            prev = this.prev,\n            next = this.next;\n\n        children.clear();\n        var elementStack = ElementStack.resume(env, bounds, bounds.reset(env));\n        var vm = new VM(env, scope, dynamicScope, elementStack);\n        var updating = new LinkedList();\n        vm.execute(start, function (vm) {\n            vm.stack = EvaluationStack.restore(stack);\n            vm.updatingOpcodeStack.push(updating);\n            vm.updateWith(_this3);\n            vm.updatingOpcodeStack.push(children);\n        });\n        this.prev = prev;\n        this.next = next;\n    };\n\n    return TryOpcode;\n}(BlockOpcode);\n\nvar ListRevalidationDelegate = function () {\n    function ListRevalidationDelegate(opcode, marker) {\n        _classCallCheck(this, ListRevalidationDelegate);\n\n        this.opcode = opcode;\n        this.marker = marker;\n        this.didInsert = false;\n        this.didDelete = false;\n        this.map = opcode.map;\n        this.updating = opcode['children'];\n    }\n\n    ListRevalidationDelegate.prototype.insert = function insert(key, item, memo, before) {\n        var map = this.map,\n            opcode = this.opcode,\n            updating = this.updating;\n\n        var nextSibling = null;\n        var reference = null;\n        if (before) {\n            reference = map[before];\n            nextSibling = reference['bounds'].firstNode();\n        } else {\n            nextSibling = this.marker;\n        }\n        var vm = opcode.vmForInsertion(nextSibling);\n        var tryOpcode = null;\n        var start = opcode.start;\n\n        vm.execute(start, function (vm) {\n            map[key] = tryOpcode = vm.iterate(memo, item);\n            vm.updatingOpcodeStack.push(new LinkedList());\n            vm.updateWith(tryOpcode);\n            vm.updatingOpcodeStack.push(tryOpcode.children);\n        });\n        updating.insertBefore(tryOpcode, reference);\n        this.didInsert = true;\n    };\n\n    ListRevalidationDelegate.prototype.retain = function retain(_key, _item, _memo) {};\n\n    ListRevalidationDelegate.prototype.move = function move(key, _item, _memo, before) {\n        var map = this.map,\n            updating = this.updating;\n\n        var entry = map[key];\n        var reference = map[before] || null;\n        if (before) {\n            moveBounds(entry, reference.firstNode());\n        } else {\n            moveBounds(entry, this.marker);\n        }\n        updating.remove(entry);\n        updating.insertBefore(entry, reference);\n    };\n\n    ListRevalidationDelegate.prototype.delete = function _delete(key) {\n        var map = this.map;\n\n        var opcode = map[key];\n        opcode.didDestroy();\n        clear(opcode);\n        this.updating.remove(opcode);\n        delete map[key];\n        this.didDelete = true;\n    };\n\n    ListRevalidationDelegate.prototype.done = function done() {\n        this.opcode.didInitializeChildren(this.didInsert || this.didDelete);\n    };\n\n    return ListRevalidationDelegate;\n}();\n\nexport var ListBlockOpcode = function (_BlockOpcode2) {\n    _inherits(ListBlockOpcode, _BlockOpcode2);\n\n    function ListBlockOpcode(start, state, bounds, children, artifacts) {\n        _classCallCheck(this, ListBlockOpcode);\n\n        var _this4 = _possibleConstructorReturn(this, _BlockOpcode2.call(this, start, state, bounds, children));\n\n        _this4.type = \"list-block\";\n        _this4.map = dict();\n        _this4.lastIterated = INITIAL;\n        _this4.artifacts = artifacts;\n        var _tag = _this4._tag = UpdatableTag.create(CONSTANT_TAG);\n        _this4.tag = combine([artifacts.tag, _tag]);\n        return _this4;\n    }\n\n    ListBlockOpcode.prototype.didInitializeChildren = function didInitializeChildren() {\n        var listDidChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        this.lastIterated = this.artifacts.tag.value();\n        if (listDidChange) {\n            this._tag.inner.update(combineSlice(this.children));\n        }\n    };\n\n    ListBlockOpcode.prototype.evaluate = function evaluate(vm) {\n        var artifacts = this.artifacts,\n            lastIterated = this.lastIterated;\n\n        if (!artifacts.tag.validate(lastIterated)) {\n            var bounds = this.bounds;\n            var dom = vm.dom;\n\n            var marker = dom.createComment('');\n            dom.insertAfter(bounds.parentElement(), marker, bounds.lastNode());\n            var target = new ListRevalidationDelegate(this, marker);\n            var synchronizer = new IteratorSynchronizer({ target: target, artifacts: artifacts });\n            synchronizer.sync();\n            this.parentElement().removeChild(marker);\n        }\n        // Run now-updated updating opcodes\n        _BlockOpcode2.prototype.evaluate.call(this, vm);\n    };\n\n    ListBlockOpcode.prototype.vmForInsertion = function vmForInsertion(nextSibling) {\n        var env = this.env,\n            scope = this.scope,\n            dynamicScope = this.dynamicScope;\n\n        var elementStack = ElementStack.forInitialRender(this.env, this.bounds.parentElement(), nextSibling);\n        return new VM(env, scope, dynamicScope, elementStack);\n    };\n\n    return ListBlockOpcode;\n}(BlockOpcode);\n\nvar UpdatingVMFrame = function () {\n    function UpdatingVMFrame(vm, ops, exceptionHandler) {\n        _classCallCheck(this, UpdatingVMFrame);\n\n        this.vm = vm;\n        this.ops = ops;\n        this.exceptionHandler = exceptionHandler;\n        this.vm = vm;\n        this.ops = ops;\n        this.current = ops.head();\n    }\n\n    UpdatingVMFrame.prototype.goto = function goto(op) {\n        this.current = op;\n    };\n\n    UpdatingVMFrame.prototype.nextStatement = function nextStatement() {\n        var current = this.current,\n            ops = this.ops;\n\n        if (current) this.current = ops.nextNode(current);\n        return current;\n    };\n\n    UpdatingVMFrame.prototype.handleException = function handleException() {\n        if (this.exceptionHandler) {\n            this.exceptionHandler.handleException();\n        }\n    };\n\n    return UpdatingVMFrame;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { clear } from '../bounds';\nimport UpdatingVM from './update';\n\nvar RenderResult = function () {\n    function RenderResult(env, updating, bounds) {\n        _classCallCheck(this, RenderResult);\n\n        this.env = env;\n        this.updating = updating;\n        this.bounds = bounds;\n    }\n\n    RenderResult.prototype.rerender = function rerender() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { alwaysRevalidate: false },\n            _ref$alwaysRevalidate = _ref.alwaysRevalidate,\n            alwaysRevalidate = _ref$alwaysRevalidate === undefined ? false : _ref$alwaysRevalidate;\n\n        var env = this.env,\n            updating = this.updating;\n\n        var vm = new UpdatingVM(env, { alwaysRevalidate: alwaysRevalidate });\n        vm.execute(updating, this);\n    };\n\n    RenderResult.prototype.parentElement = function parentElement() {\n        return this.bounds.parentElement();\n    };\n\n    RenderResult.prototype.firstNode = function firstNode() {\n        return this.bounds.firstNode();\n    };\n\n    RenderResult.prototype.lastNode = function lastNode() {\n        return this.bounds.lastNode();\n    };\n\n    RenderResult.prototype.opcodes = function opcodes() {\n        return this.updating;\n    };\n\n    RenderResult.prototype.handleException = function handleException() {\n        throw \"this should never happen\";\n    };\n\n    RenderResult.prototype.destroy = function destroy() {\n        this.bounds.destroy();\n        clear(this.bounds);\n    };\n\n    return RenderResult;\n}();\n\nexport default RenderResult;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLXJlc3VsdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlbmRlci1yZXN1bHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxBQUFPLFNBQXFCLEFBQUssQUFBRSxhQUFNLEFBQVcsQUFBQztBQUNyRCxPQUFPLEFBQWdDLGdCQUFNLEFBQVUsQUFBQyxBQUl4RCxBQUFNLEFBQUMsQUFBTzs7O0FBQ1osMEJBQ1UsQUFBZ0IsS0FDaEIsQUFBb0MsVUFDcEMsQUFBeUI7OztBQUZ6QixhQUFHLE1BQUgsQUFBRyxBQUFhO0FBQ2hCLGFBQVEsV0FBUixBQUFRLEFBQTRCO0FBQ3BDLGFBQU0sU0FBTixBQUFNLEFBQW1CLEFBQ2hDO0FBQUM7OzJCQUVKLEFBQVEsQUFBQztBQUNQLEFBQUksdUZBRGtDLEVBQUUsQUFBZ0Isa0JBQUUsQUFBSyxBQUFFOztZQUF4RCxBQUFnQix5REFBRyxBQUFLLEFBQUU7O1lBQzdCLEFBQUcsTUFBZSxBQUFJLEFBQUM7WUFBbEIsQUFBUSxBQUFFOztBQUNyQixZQUFJLEFBQUUsS0FBRyxJQUFJLEFBQVUsV0FBQyxBQUFHLEtBQUUsRUFBRSxBQUFnQixBQUFFLEFBQUMsQUFBQztBQUNuRCxBQUFFLFdBQUMsQUFBTyxRQUFDLEFBQVEsVUFBRSxBQUFJLEFBQUMsQUFBQyxBQUM3QjtBQUFDOzsyQkFFRCxBQUFhO0FBQ1gsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBYSxBQUFFLEFBQUMsQUFDckM7QUFBQzs7MkJBRUQsQUFBUztBQUNQLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQVMsQUFBRSxBQUFDLEFBQ2pDO0FBQUM7OzJCQUVELEFBQVE7QUFDTixBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQU0sT0FBQyxBQUFRLEFBQUUsQUFBQyxBQUNoQztBQUFDOzsyQkFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFRLEFBQUMsQUFDdkI7QUFBQzs7MkJBRUQsQUFBZTtBQUNiLGNBQU0sQUFBMEIsQUFBQyxBQUNuQztBQUFDOzsyQkFFRCxBQUFPO0FBQ0wsQUFBSSxhQUFDLEFBQU0sT0FBQyxBQUFPLEFBQUUsQUFBQztBQUN0QixBQUFLLGNBQUMsQUFBSSxLQUFDLEFBQU0sQUFBQyxBQUFDLEFBQ3JCO0FBQUMsQUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wdGlvbiwgTGlua2VkTGlzdCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IEVudmlyb25tZW50IGZyb20gJy4uL2Vudmlyb25tZW50JztcbmltcG9ydCB7IERlc3Ryb3lhYmxlQm91bmRzLCBjbGVhciB9IGZyb20gJy4uL2JvdW5kcyc7XG5pbXBvcnQgVXBkYXRpbmdWTSwgeyBFeGNlcHRpb25IYW5kbGVyIH0gZnJvbSAnLi91cGRhdGUnO1xuaW1wb3J0IHsgVXBkYXRpbmdPcGNvZGUgfSBmcm9tICcuLi9vcGNvZGVzJztcbmltcG9ydCAqIGFzIFNpbXBsZSBmcm9tICcuLi9kb20vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlclJlc3VsdCBpbXBsZW1lbnRzIERlc3Ryb3lhYmxlQm91bmRzLCBFeGNlcHRpb25IYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbnY6IEVudmlyb25tZW50LFxuICAgIHByaXZhdGUgdXBkYXRpbmc6IExpbmtlZExpc3Q8VXBkYXRpbmdPcGNvZGU+LFxuICAgIHByaXZhdGUgYm91bmRzOiBEZXN0cm95YWJsZUJvdW5kc1xuICApIHt9XG5cbiAgcmVyZW5kZXIoeyBhbHdheXNSZXZhbGlkYXRlID0gZmFsc2UgfSA9IHsgYWx3YXlzUmV2YWxpZGF0ZTogZmFsc2UgfSkge1xuICAgIGxldCB7IGVudiwgdXBkYXRpbmcgfSA9IHRoaXM7XG4gICAgbGV0IHZtID0gbmV3IFVwZGF0aW5nVk0oZW52LCB7IGFsd2F5c1JldmFsaWRhdGUgfSk7XG4gICAgdm0uZXhlY3V0ZSh1cGRhdGluZywgdGhpcyk7XG4gIH1cblxuICBwYXJlbnRFbGVtZW50KCk6IFNpbXBsZS5FbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5ib3VuZHMucGFyZW50RWxlbWVudCgpO1xuICB9XG5cbiAgZmlyc3ROb2RlKCk6IE9wdGlvbjxTaW1wbGUuTm9kZT4ge1xuICAgIHJldHVybiB0aGlzLmJvdW5kcy5maXJzdE5vZGUoKTtcbiAgfVxuXG4gIGxhc3ROb2RlKCk6IE9wdGlvbjxTaW1wbGUuTm9kZT4ge1xuICAgIHJldHVybiB0aGlzLmJvdW5kcy5sYXN0Tm9kZSgpO1xuICB9XG5cbiAgb3Bjb2RlcygpOiBMaW5rZWRMaXN0PFVwZGF0aW5nT3Bjb2RlPiB7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRpbmc7XG4gIH1cblxuICBoYW5kbGVFeGNlcHRpb24oKSB7XG4gICAgdGhyb3cgXCJ0aGlzIHNob3VsZCBuZXZlciBoYXBwZW5cIjtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5ib3VuZHMuZGVzdHJveSgpO1xuICAgIGNsZWFyKHRoaXMuYm91bmRzKTtcbiAgfVxufVxuIl19","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { Register } from '../opcodes';\nimport { Scope } from '../environment';\nimport { Stack, LinkedList, ListSlice } from '@glimmer/util';\nimport { combineSlice } from '@glimmer/reference';\nimport { LabelOpcode, JumpIfNotModifiedOpcode, DidModifyOpcode } from '../compiled/opcodes/vm';\nimport { ListBlockOpcode, TryOpcode } from './update';\nimport RenderResult from './render-result';\nimport { APPEND_OPCODES } from '../opcodes';\nexport var EvaluationStack = function () {\n    function EvaluationStack(stack, fp, sp) {\n        _classCallCheck(this, EvaluationStack);\n\n        this.stack = stack;\n        this.fp = fp;\n        this.sp = sp;\n        Object.seal(this);\n    }\n\n    EvaluationStack.empty = function empty() {\n        return new this([], 0, -1);\n    };\n\n    EvaluationStack.restore = function restore(snapshot) {\n        return new this(snapshot.slice(), 0, snapshot.length - 1);\n    };\n\n    EvaluationStack.prototype.isEmpty = function isEmpty() {\n        return this.sp === -1;\n    };\n\n    EvaluationStack.prototype.push = function push(value) {\n        this.stack[++this.sp] = value;\n    };\n\n    EvaluationStack.prototype.dup = function dup() {\n        var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.sp;\n\n        this.push(this.stack[position]);\n    };\n\n    EvaluationStack.prototype.pop = function pop() {\n        var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n        var top = this.stack[this.sp];\n        this.sp -= n;\n        return top;\n    };\n\n    EvaluationStack.prototype.peek = function peek() {\n        return this.stack[this.sp];\n    };\n\n    EvaluationStack.prototype.fromBase = function fromBase(offset) {\n        return this.stack[this.fp - offset];\n    };\n\n    EvaluationStack.prototype.fromTop = function fromTop(offset) {\n        return this.stack[this.sp - offset];\n    };\n\n    EvaluationStack.prototype.capture = function capture(items) {\n        var end = this.sp + 1;\n        var start = end - items;\n        return this.stack.slice(start, end);\n    };\n\n    EvaluationStack.prototype.toArray = function toArray() {\n        return this.stack.slice(this.fp, this.sp + 1);\n    };\n\n    return EvaluationStack;\n}();\n\nvar VM = function () {\n    function VM(env, scope, dynamicScope, elementStack) {\n        _classCallCheck(this, VM);\n\n        this.env = env;\n        this.elementStack = elementStack;\n        this.dynamicScopeStack = new Stack();\n        this.scopeStack = new Stack();\n        this.updatingOpcodeStack = new Stack();\n        this.cacheGroups = new Stack();\n        this.listBlockStack = new Stack();\n        this.stack = EvaluationStack.empty();\n        /** Registers **/\n        this.pc = -1;\n        this.ra = -1;\n        this.s0 = null;\n        this.s1 = null;\n        this.t0 = null;\n        this.t1 = null;\n        this.env = env;\n        this.constants = env.constants;\n        this.elementStack = elementStack;\n        this.scopeStack.push(scope);\n        this.dynamicScopeStack.push(dynamicScope);\n    }\n\n    // Fetch a value from a register onto the stack\n    VM.prototype.fetch = function fetch(register) {\n        this.stack.push(this[Register[register]]);\n    };\n    // Load a value from the stack into a register\n\n\n    VM.prototype.load = function load(register) {\n        this[Register[register]] = this.stack.pop();\n    };\n    // Fetch a value from a register\n\n\n    VM.prototype.fetchValue = function fetchValue(register) {\n        return this[Register[register]];\n    };\n    // Load a value into a register\n\n\n    VM.prototype.loadValue = function loadValue(register, value) {\n        this[Register[register]] = value;\n    };\n    // Start a new frame and save $ra and $fp on the stack\n\n\n    VM.prototype.pushFrame = function pushFrame() {\n        this.stack.push(this.ra);\n        this.stack.push(this.fp);\n        this.fp = this.sp - 1;\n        // this.fp = this.sp + 1;\n    };\n    // Restore $ra, $sp and $fp\n\n\n    VM.prototype.popFrame = function popFrame() {\n        this.sp = this.fp - 1;\n        this.ra = this.stack.fromBase(0);\n        this.fp = this.stack.fromBase(-1);\n    };\n    // Jump to an address in `program`\n\n\n    VM.prototype.goto = function goto(pc) {\n        this.pc = pc;\n    };\n    // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)\n\n\n    VM.prototype.call = function call(pc) {\n        this.ra = this.pc;\n        this.pc = pc;\n    };\n    // Put a specific `program` address in $ra\n\n\n    VM.prototype.returnTo = function returnTo(ra) {\n        this.ra = ra;\n    };\n    // Return to the `program` address stored in $ra\n\n\n    VM.prototype.return = function _return() {\n        this.pc = this.ra;\n    };\n\n    VM.initial = function initial(env, self, dynamicScope, elementStack, program) {\n        var scope = Scope.root(self, program.symbolTable.symbols.length);\n        var vm = new VM(env, scope, dynamicScope, elementStack);\n        vm.pc = program.start;\n        vm.updatingOpcodeStack.push(new LinkedList());\n        return vm;\n    };\n\n    VM.prototype.capture = function capture(args) {\n        return {\n            env: this.env,\n            scope: this.scope(),\n            dynamicScope: this.dynamicScope(),\n            stack: this.stack.capture(args)\n        };\n    };\n\n    VM.prototype.beginCacheGroup = function beginCacheGroup() {\n        this.cacheGroups.push(this.updating().tail());\n    };\n\n    VM.prototype.commitCacheGroup = function commitCacheGroup() {\n        //        JumpIfNotModified(END)\n        //        (head)\n        //        (....)\n        //        (tail)\n        //        DidModify\n        // END:   Noop\n        var END = new LabelOpcode(\"END\");\n        var opcodes = this.updating();\n        var marker = this.cacheGroups.pop();\n        var head = marker ? opcodes.nextNode(marker) : opcodes.head();\n        var tail = opcodes.tail();\n        var tag = combineSlice(new ListSlice(head, tail));\n        var guard = new JumpIfNotModifiedOpcode(tag, END);\n        opcodes.insertBefore(guard, head);\n        opcodes.append(new DidModifyOpcode(guard));\n        opcodes.append(END);\n    };\n\n    VM.prototype.enter = function enter(args) {\n        var updating = new LinkedList();\n        var state = this.capture(args);\n        var tracker = this.elements().pushUpdatableBlock();\n        var tryOpcode = new TryOpcode(this.pc, state, tracker, updating);\n        this.didEnter(tryOpcode);\n    };\n\n    VM.prototype.iterate = function iterate(memo, value) {\n        var updating = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new LinkedList();\n\n        var stack = this.stack;\n        stack.push(value);\n        stack.push(memo);\n        var state = this.capture(2);\n        var tracker = this.elements().pushUpdatableBlock();\n        // let ip = this.ip;\n        // this.ip = end + 4;\n        // this.frames.push(ip);\n        return new TryOpcode(this.pc, state, tracker, updating);\n    };\n\n    VM.prototype.enterItem = function enterItem(key, opcode) {\n        this.listBlock().map[key] = opcode;\n        this.didEnter(opcode);\n    };\n\n    VM.prototype.enterList = function enterList(start) {\n        var updating = new LinkedList();\n        var state = this.capture(0);\n        var tracker = this.elements().pushBlockList(updating);\n        var artifacts = this.stack.peek().artifacts;\n        var opcode = new ListBlockOpcode(start, state, tracker, updating, artifacts);\n        this.listBlockStack.push(opcode);\n        this.didEnter(opcode);\n    };\n\n    VM.prototype.didEnter = function didEnter(opcode) {\n        this.updateWith(opcode);\n        this.updatingOpcodeStack.push(opcode.children);\n    };\n\n    VM.prototype.exit = function exit() {\n        this.elements().popBlock();\n        this.updatingOpcodeStack.pop();\n        var parent = this.updating().tail();\n        parent.didInitializeChildren();\n    };\n\n    VM.prototype.exitList = function exitList() {\n        this.exit();\n        this.listBlockStack.pop();\n    };\n\n    VM.prototype.updateWith = function updateWith(opcode) {\n        this.updating().append(opcode);\n    };\n\n    VM.prototype.listBlock = function listBlock() {\n        return this.listBlockStack.current;\n    };\n\n    VM.prototype.updating = function updating() {\n        return this.updatingOpcodeStack.current;\n    };\n\n    VM.prototype.elements = function elements() {\n        return this.elementStack;\n    };\n\n    VM.prototype.scope = function scope() {\n        return this.scopeStack.current;\n    };\n\n    VM.prototype.dynamicScope = function dynamicScope() {\n        return this.dynamicScopeStack.current;\n    };\n\n    VM.prototype.pushChildScope = function pushChildScope() {\n        this.scopeStack.push(this.scope().child());\n    };\n\n    VM.prototype.pushCallerScope = function pushCallerScope() {\n        var childScope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        var callerScope = this.scope().getCallerScope();\n        this.scopeStack.push(childScope ? callerScope.child() : callerScope);\n    };\n\n    VM.prototype.pushDynamicScope = function pushDynamicScope() {\n        var child = this.dynamicScope().child();\n        this.dynamicScopeStack.push(child);\n        return child;\n    };\n\n    VM.prototype.pushRootScope = function pushRootScope(size, bindCaller) {\n        var scope = Scope.sized(size);\n        if (bindCaller) scope.bindCallerScope(this.scope());\n        this.scopeStack.push(scope);\n        return scope;\n    };\n\n    VM.prototype.popScope = function popScope() {\n        this.scopeStack.pop();\n    };\n\n    VM.prototype.popDynamicScope = function popDynamicScope() {\n        this.dynamicScopeStack.pop();\n    };\n\n    VM.prototype.newDestroyable = function newDestroyable(d) {\n        this.elements().newDestroyable(d);\n    };\n    /// SCOPE HELPERS\n\n\n    VM.prototype.getSelf = function getSelf() {\n        return this.scope().getSelf();\n    };\n\n    VM.prototype.referenceForSymbol = function referenceForSymbol(symbol) {\n        return this.scope().getSymbol(symbol);\n    };\n    /// EXECUTION\n\n\n    VM.prototype.execute = function execute(start, initialize) {\n        this.pc = start;\n        if (initialize) initialize(this);\n        var result = void 0;\n        while (true) {\n            result = this.next();\n            if (result.done) break;\n        }\n        return result.value;\n    };\n\n    VM.prototype.next = function next() {\n        var env = this.env,\n            updatingOpcodeStack = this.updatingOpcodeStack,\n            elementStack = this.elementStack;\n\n        var opcode = void 0;\n        if (opcode = this.nextStatement(env)) {\n            APPEND_OPCODES.evaluate(this, opcode, opcode.type);\n            return { done: false, value: null };\n        }\n        return {\n            done: true,\n            value: new RenderResult(env, updatingOpcodeStack.pop(), elementStack.popBlock())\n        };\n    };\n\n    VM.prototype.nextStatement = function nextStatement(env) {\n        var pc = this.pc;\n\n        if (pc === -1) {\n            return null;\n        }\n        var program = env.program;\n        this.pc += 4;\n        return program.opcode(pc);\n    };\n\n    VM.prototype.evaluateOpcode = function evaluateOpcode(opcode) {\n        APPEND_OPCODES.evaluate(this, opcode, opcode.type);\n    };\n\n    VM.prototype.bindDynamicScope = function bindDynamicScope(names) {\n        var scope = this.dynamicScope();\n        for (var i = names.length - 1; i >= 0; i--) {\n            var name = this.constants.getString(names[i]);\n            scope.set(name, this.stack.pop());\n        }\n    };\n\n    _createClass(VM, [{\n        key: 'fp',\n        get: function () {\n            return this.stack.fp;\n        },\n        set: function (fp) {\n            this.stack.fp = fp;\n        }\n    }, {\n        key: 'sp',\n        get: function () {\n            return this.stack.sp;\n        },\n        set: function (sp) {\n            this.stack.sp = sp;\n        }\n    }]);\n\n    return VM;\n}();\n\nexport default VM;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { assign, EMPTY_ARRAY } from '@glimmer/util';\nimport { ElementStack } from './builder';\nimport { VM } from './vm';\nimport Scanner from './scanner';\nexport var TemplateIterator = function () {\n    function TemplateIterator(vm) {\n        _classCallCheck(this, TemplateIterator);\n\n        this.vm = vm;\n    }\n\n    TemplateIterator.prototype.next = function next() {\n        return this.vm.next();\n    };\n\n    return TemplateIterator;\n}();\nvar clientId = 0;\nexport default function templateFactory(_ref) {\n    var templateId = _ref.id,\n        meta = _ref.meta,\n        block = _ref.block;\n\n    var parsedBlock = void 0;\n    var id = templateId || 'client-' + clientId++;\n    var create = function (env, envMeta) {\n        var newMeta = envMeta ? assign({}, envMeta, meta) : meta;\n        if (!parsedBlock) {\n            parsedBlock = JSON.parse(block);\n        }\n        return new ScannableTemplate(id, newMeta, env, parsedBlock);\n    };\n    return { id: id, meta: meta, create: create };\n}\n\nvar ScannableTemplate = function () {\n    function ScannableTemplate(id, meta, env, rawBlock) {\n        _classCallCheck(this, ScannableTemplate);\n\n        this.id = id;\n        this.meta = meta;\n        this.env = env;\n        this.entryPoint = null;\n        this.layout = null;\n        this.partial = null;\n        this.block = null;\n        this.scanner = new Scanner(rawBlock, env);\n        this.symbols = rawBlock.symbols;\n        this.hasEval = rawBlock.hasEval;\n    }\n\n    ScannableTemplate.prototype.render = function render(self, appendTo, dynamicScope) {\n        var env = this.env;\n\n        var elementStack = ElementStack.forInitialRender(env, appendTo, null);\n        var compiled = this.asEntryPoint().compileDynamic(env);\n        var vm = VM.initial(env, self, dynamicScope, elementStack, compiled);\n        return new TemplateIterator(vm);\n    };\n\n    ScannableTemplate.prototype.asEntryPoint = function asEntryPoint() {\n        if (!this.entryPoint) this.entryPoint = this.scanner.scanEntryPoint(this.compilationMeta());\n        return this.entryPoint;\n    };\n\n    ScannableTemplate.prototype.asLayout = function asLayout(attrs) {\n        if (!this.layout) this.layout = this.scanner.scanLayout(this.compilationMeta(), attrs || EMPTY_ARRAY);\n        return this.layout;\n    };\n\n    ScannableTemplate.prototype.asPartial = function asPartial() {\n        if (!this.partial) this.partial = this.scanner.scanEntryPoint(this.compilationMeta(true));\n        return this.partial;\n    };\n\n    ScannableTemplate.prototype.asBlock = function asBlock() {\n        if (!this.block) this.block = this.scanner.scanBlock(this.compilationMeta());\n        return this.block;\n    };\n\n    ScannableTemplate.prototype.compilationMeta = function compilationMeta() {\n        var asPartial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        return { templateMeta: this.meta, symbols: this.symbols, asPartial: asPartial };\n    };\n\n    return ScannableTemplate;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export var NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Element\"] = 0] = \"Element\";\n    NodeType[NodeType[\"Attribute\"] = 1] = \"Attribute\";\n    NodeType[NodeType[\"Text\"] = 2] = \"Text\";\n    NodeType[NodeType[\"CdataSection\"] = 3] = \"CdataSection\";\n    NodeType[NodeType[\"EntityReference\"] = 4] = \"EntityReference\";\n    NodeType[NodeType[\"Entity\"] = 5] = \"Entity\";\n    NodeType[NodeType[\"ProcessingInstruction\"] = 6] = \"ProcessingInstruction\";\n    NodeType[NodeType[\"Comment\"] = 7] = \"Comment\";\n    NodeType[NodeType[\"Document\"] = 8] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 9] = \"DocumentType\";\n    NodeType[NodeType[\"DocumentFragment\"] = 10] = \"DocumentFragment\";\n    NodeType[NodeType[\"Notation\"] = 11] = \"Notation\";\n})(NodeType || (NodeType = {}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVyZmFjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV0EsQUFBTSxPQUFOLElBQVksQUFhWDtBQWJELFdBQVksQUFBUTtBQUNsQix3Q0FBTztBQUNQLDBDQUFTO0FBQ1QscUNBQUk7QUFDSiw2Q0FBWTtBQUNaLGdEQUFlO0FBQ2YsdUNBQU07QUFDTixzREFBcUI7QUFDckIsd0NBQU87QUFDUCx5Q0FBUTtBQUNSLDZDQUFZO0FBQ1osa0RBQWdCO0FBQ2hCLDBDQUFRLEFBQ1Y7QUFBQyxHQWJXLEFBQVEsYUFBUixBQUFRLFdBYW5CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRklYTUUsIE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuZXhwb3J0IHR5cGUgRklYX1JFSUZJQ0FUSU9OPFQ+ID0gRklYTUU8VCwgJ25lZWRzIHRvIGJlIHJlaWZpZWQgcHJvcGVybHknPjtcblxuZXhwb3J0IHR5cGUgTmFtZXNwYWNlID1cbiAgICBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIlxuICB8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiXG4gIHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIHwgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJcbiAgfCBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiXG4gIHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiO1xuXG5leHBvcnQgZW51bSBOb2RlVHlwZSB7XG4gIEVsZW1lbnQsXG4gIEF0dHJpYnV0ZSxcbiAgVGV4dCxcbiAgQ2RhdGFTZWN0aW9uLFxuICBFbnRpdHlSZWZlcmVuY2UsXG4gIEVudGl0eSxcbiAgUHJvY2Vzc2luZ0luc3RydWN0aW9uLFxuICBDb21tZW50LFxuICBEb2N1bWVudCxcbiAgRG9jdW1lbnRUeXBlLFxuICBEb2N1bWVudEZyYWdtZW50LFxuICBOb3RhdGlvblxufVxuXG4vLyBUaGlzIGlzIHRoZSBzdWJzZXQgb2YgRE9NIHVzZWQgYnkgdGhlIGFwcGVuZGluZyBWTS4gSXQgaXNcbi8vIG1lYW50IHRvIGJlIGVmZmljaWVudCB0byB1c2Ugb24gdGhlIHNlcnZlciBhbmQgYWxsIG9wZXJhdGlvbnNcbi8vIG11c3QgYmUgZnVsbHkgc2VyaWFsaXphYmxlIHRvIEhUTUwgYXMgYSB0cmFuc3BvcnQuXG5leHBvcnQgaW50ZXJmYWNlIE5vZGUge1xuICBuZXh0U2libGluZzogT3B0aW9uPE5vZGU+O1xuICBwcmV2aW91c1NpYmxpbmc6IE9wdGlvbjxOb2RlPjtcbiAgcGFyZW50Tm9kZTogT3B0aW9uPE5vZGU+O1xuICBub2RlVHlwZTogTm9kZVR5cGUgfCBudW1iZXI7XG4gIG5vZGVWYWx1ZTogT3B0aW9uPHN0cmluZz47XG4gIGZpcnN0Q2hpbGQ6IE9wdGlvbjxOb2RlPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEb2N1bWVudCBleHRlbmRzIE5vZGUge1xuICBjcmVhdGVFbGVtZW50KHRhZzogc3RyaW5nKTogRWxlbWVudDtcbiAgY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZTogTmFtZXNwYWNlLCB0YWc6IHN0cmluZyk6IEVsZW1lbnQ7XG4gIGNyZWF0ZVRleHROb2RlKHRleHQ6IHN0cmluZyk6IFRleHQ7XG4gIGNyZWF0ZUNvbW1lbnQoZGF0YTogc3RyaW5nKTogQ29tbWVudDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGFyYWN0ZXJEYXRhIGV4dGVuZHMgTm9kZSB7XG4gIGRhdGE6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZXh0IGV4dGVuZHMgQ2hhcmFjdGVyRGF0YSB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbW1lbnQgZXh0ZW5kcyBDaGFyYWN0ZXJEYXRhIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudCBleHRlbmRzIE5vZGUge1xuICBuYW1lc3BhY2VVUkk6IE9wdGlvbjxzdHJpbmc+O1xuICB0YWdOYW1lOiBzdHJpbmc7XG4gIGZpcnN0Q2hpbGQ6IE9wdGlvbjxOb2RlPjtcbiAgbGFzdENoaWxkOiBPcHRpb248Tm9kZT47XG4gIHJlbW92ZUF0dHJpYnV0ZShuYW1lOiBzdHJpbmcpOiB2b2lkO1xuICByZW1vdmVBdHRyaWJ1dGVOUyhuYW1lc3BhY2VVUkk6IHN0cmluZywgbmFtZTogc3RyaW5nKTogdm9pZDtcbiAgc2V0QXR0cmlidXRlKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gIHNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSTogc3RyaW5nLCBxdWFsaWZpZWROYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICBpbnNlcnRCZWZvcmUobm9kZTogTm9kZSwgcmVmZXJlbmNlOiBPcHRpb248Tm9kZT4pOiB2b2lkO1xuICByZW1vdmVDaGlsZChub2RlOiBOb2RlKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTVkdFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIEhUTUxFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7fVxuIl19","// There is a small whitelist of namespaced attributes specially\n// enumerated in\n// https://www.w3.org/TR/html/syntax.html#attributes-0\n//\n// > When a foreign element has one of the namespaced attributes given by\n// > the local name and namespace of the first and second cells of a row\n// > from the following table, it must be written using the name given by\n// > the third cell from the same row.\n//\n// In all other cases, colons are interpreted as a regular character\n// with no special meaning:\n//\n// > No other namespaced attribute can be expressed in the HTML syntax.\nvar XLINK = 'http://www.w3.org/1999/xlink';\nvar XML = 'http://www.w3.org/XML/1998/namespace';\nvar XMLNS = 'http://www.w3.org/2000/xmlns/';\nvar WHITELIST = {\n    'xlink:actuate': XLINK,\n    'xlink:arcrole': XLINK,\n    'xlink:href': XLINK,\n    'xlink:role': XLINK,\n    'xlink:show': XLINK,\n    'xlink:title': XLINK,\n    'xlink:type': XLINK,\n    'xml:base': XML,\n    'xml:lang': XML,\n    'xml:space': XML,\n    'xmlns': XMLNS,\n    'xmlns:xlink': XMLNS\n};\nexport function getAttrNamespace(attrName) {\n    return WHITELIST[attrName] || null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZXNwYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5hbWVzcGFjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBZ0U7QUFDaEUsQUFBZ0I7QUFDaEIsQUFBc0Q7QUFDdEQsQUFBRTtBQUNGLEFBQXlFO0FBQ3pFLEFBQXdFO0FBQ3hFLEFBQXlFO0FBQ3pFLEFBQXNDO0FBQ3RDLEFBQUU7QUFDRixBQUFvRTtBQUNwRSxBQUEyQjtBQUMzQixBQUFFO0FBQ0YsQUFBdUU7QUFFdkUsSUFBTSxBQUFLLFFBQUcsQUFBOEIsQUFBQztBQUM3QyxJQUFNLEFBQUcsTUFBRyxBQUFzQyxBQUFDO0FBQ25ELElBQU0sQUFBSyxRQUFHLEFBQStCLEFBQUM7QUFFOUMsSUFBTSxBQUFTO0FBQ2IsQUFBZSxxQkFBRSxBQUFLO0FBQ3RCLEFBQWUscUJBQUUsQUFBSztBQUN0QixBQUFZLGtCQUFFLEFBQUs7QUFDbkIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVksa0JBQUUsQUFBSztBQUNuQixBQUFhLG1CQUFFLEFBQUs7QUFDcEIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVcsaUJBQUUsQUFBRztBQUNoQixBQUFPLGFBQUUsQUFBSztBQUNkLEFBQWEsbUJBQUUsQUFBSyxBQUNyQixBQUFDO0FBYmdCO0FBZWxCLEFBQU0saUNBQTJCLEFBQWdCO0FBQy9DLEFBQU0sV0FBQyxBQUFTLFVBQUMsQUFBUSxBQUFDLGFBQUksQUFBSSxBQUFDLEFBQ3JDO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGVyZSBpcyBhIHNtYWxsIHdoaXRlbGlzdCBvZiBuYW1lc3BhY2VkIGF0dHJpYnV0ZXMgc3BlY2lhbGx5XG4vLyBlbnVtZXJhdGVkIGluXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbC9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTBcbi8vXG4vLyA+IFdoZW4gYSBmb3JlaWduIGVsZW1lbnQgaGFzIG9uZSBvZiB0aGUgbmFtZXNwYWNlZCBhdHRyaWJ1dGVzIGdpdmVuIGJ5XG4vLyA+IHRoZSBsb2NhbCBuYW1lIGFuZCBuYW1lc3BhY2Ugb2YgdGhlIGZpcnN0IGFuZCBzZWNvbmQgY2VsbHMgb2YgYSByb3dcbi8vID4gZnJvbSB0aGUgZm9sbG93aW5nIHRhYmxlLCBpdCBtdXN0IGJlIHdyaXR0ZW4gdXNpbmcgdGhlIG5hbWUgZ2l2ZW4gYnlcbi8vID4gdGhlIHRoaXJkIGNlbGwgZnJvbSB0aGUgc2FtZSByb3cuXG4vL1xuLy8gSW4gYWxsIG90aGVyIGNhc2VzLCBjb2xvbnMgYXJlIGludGVycHJldGVkIGFzIGEgcmVndWxhciBjaGFyYWN0ZXJcbi8vIHdpdGggbm8gc3BlY2lhbCBtZWFuaW5nOlxuLy9cbi8vID4gTm8gb3RoZXIgbmFtZXNwYWNlZCBhdHRyaWJ1dGUgY2FuIGJlIGV4cHJlc3NlZCBpbiB0aGUgSFRNTCBzeW50YXguXG5cbmNvbnN0IFhMSU5LID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuY29uc3QgWE1MID0gJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSc7XG5jb25zdCBYTUxOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLyc7XG5cbmNvbnN0IFdISVRFTElTVCA9IHtcbiAgJ3hsaW5rOmFjdHVhdGUnOiBYTElOSyxcbiAgJ3hsaW5rOmFyY3JvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOmhyZWYnOiBYTElOSyxcbiAgJ3hsaW5rOnJvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOnNob3cnOiBYTElOSyxcbiAgJ3hsaW5rOnRpdGxlJzogWExJTkssXG4gICd4bGluazp0eXBlJzogWExJTkssXG4gICd4bWw6YmFzZSc6IFhNTCxcbiAgJ3htbDpsYW5nJzogWE1MLFxuICAneG1sOnNwYWNlJzogWE1MLFxuICAneG1sbnMnOiBYTUxOUyxcbiAgJ3htbG5zOnhsaW5rJzogWE1MTlNcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdHRyTmFtZXNwYWNlKGF0dHJOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIFdISVRFTElTVFthdHRyTmFtZV0gfHwgbnVsbDtcbn0iXX0=","var GUID = 0;\nexport function initializeGuid(object) {\n    return object._guid = ++GUID;\n}\nexport function ensureGuid(object) {\n    return object._guid || initializeGuid(object);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImd1aWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxBQUFJLE9BQUcsQUFBQyxBQUFDO0FBTWIsQUFBTSwrQkFBeUIsQUFBZTtBQUM1QyxBQUFNLEFBQUMsV0FBQyxBQUFNLE9BQUMsQUFBSyxRQUFHLEVBQUUsQUFBSSxBQUFDLEFBQUMsQUFDakM7QUFBQztBQUVELEFBQU0sMkJBQXFCLEFBQWU7QUFDeEMsQUFBTSxXQUFDLEFBQU0sT0FBQyxBQUFLLFNBQUksQUFBYyxlQUFDLEFBQU0sQUFBQyxBQUFDLEFBQ2hEO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgR1VJRCA9IDA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFzR3VpZCB7XG4gIF9ndWlkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplR3VpZChvYmplY3Q6IEhhc0d1aWQpOiBudW1iZXIge1xuICByZXR1cm4gKG9iamVjdC5fZ3VpZCA9ICsrR1VJRCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVHdWlkKG9iamVjdDogSGFzR3VpZCk6IG51bWJlciB7XG4gIHJldHVybiBvYmplY3QuX2d1aWQgfHwgaW5pdGlhbGl6ZUd1aWQob2JqZWN0KTtcbn0iXX0=","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { ensureGuid } from './guid';\nvar proto = Object.create(null, {\n    // without this, we will always still end up with (new\n    // EmptyObject()).constructor === Object\n    constructor: {\n        value: undefined,\n        enumerable: false,\n        writable: true\n    }\n});\nfunction EmptyObject() {}\nEmptyObject.prototype = proto;\nexport function dict() {\n    // let d = Object.create(null);\n    // d.x = 1;\n    // delete d.x;\n    // return d;\n    return new EmptyObject();\n}\nexport var DictSet = function () {\n    function DictSet() {\n        _classCallCheck(this, DictSet);\n\n        this.dict = dict();\n    }\n\n    DictSet.prototype.add = function add(obj) {\n        if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;\n        return this;\n    };\n\n    DictSet.prototype.delete = function _delete(obj) {\n        if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];\n    };\n\n    DictSet.prototype.forEach = function forEach(callback) {\n        var dict = this.dict;\n\n        Object.keys(dict).forEach(function (key) {\n            return callback(dict[key]);\n        });\n    };\n\n    DictSet.prototype.toArray = function toArray() {\n        return Object.keys(this.dict);\n    };\n\n    return DictSet;\n}();\nexport var Stack = function () {\n    function Stack() {\n        _classCallCheck(this, Stack);\n\n        this.stack = [];\n        this.current = null;\n    }\n\n    Stack.prototype.toArray = function toArray() {\n        return this.stack;\n    };\n\n    Stack.prototype.push = function push(item) {\n        this.current = item;\n        this.stack.push(item);\n    };\n\n    Stack.prototype.pop = function pop() {\n        var item = this.stack.pop();\n        var len = this.stack.length;\n        this.current = len === 0 ? null : this.stack[len - 1];\n        return item === undefined ? null : item;\n    };\n\n    Stack.prototype.isEmpty = function isEmpty() {\n        return this.stack.length === 0;\n    };\n\n    return Stack;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLEFBQU8sU0FBVyxBQUFVLEFBQUUsa0JBQU0sQUFBUSxBQUFDO0FBYTdDLElBQUksQUFBSyxlQUFVLEFBQU0sT0FBQyxBQUFJO0FBQzVCLEFBQXNEO0FBQ3RELEFBQXdDO0FBQ3hDLEFBQVc7QUFDVCxBQUFLLGVBQUUsQUFBUztBQUNoQixBQUFVLG9CQUFFLEFBQUs7QUFDakIsQUFBUSxrQkFBRSxBQUFJLEFBQ2YsQUFDRixBQUFDLEFBQUM7QUFMWTtBQUhpQixDQUFwQixBQUFNO0FBVWxCLHVCQUF3QixDQUFDO0FBQ3pCLEFBQVcsWUFBQyxBQUFTLFlBQUcsQUFBSyxBQUFDO0FBRTlCLEFBQU07QUFDSixBQUErQjtBQUMvQixBQUFXO0FBQ1gsQUFBYztBQUNkLEFBQVk7QUFDWixBQUFNLFdBQUMsSUFBSyxBQUFtQixBQUFFLEFBQUMsQUFDcEM7QUFBQztBQUlELEFBQU07QUFHSjs7O0FBQ0UsQUFBSSxhQUFDLEFBQUksT0FBRyxBQUFJLEFBQUssQUFBQyxBQUN4QjtBQUFDOztzQkFFRCxBQUFHLG1CQUFDLEFBQU07QUFDUixBQUFFLEFBQUMsWUFBQyxPQUFPLEFBQUcsUUFBSyxBQUFRLEFBQUMsVUFBQyxBQUFJLEtBQUMsQUFBSSxLQUFNLEFBQUcsQUFBQyxPQUFHLEFBQUcsQUFBQyxBQUN2RCxBQUFJLFNBQUMsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFVLFdBQU0sQUFBRyxBQUFDLEFBQUMsUUFBRyxBQUFHLEFBQUM7QUFDM0MsQUFBTSxlQUFDLEFBQUksQUFBQyxBQUNkO0FBQUM7O3NCQUVELEFBQU0sMEJBQUMsQUFBTTtBQUNYLEFBQUUsQUFBQyxZQUFDLE9BQU8sQUFBRyxRQUFLLEFBQVEsQUFBQyxVQUFDLE9BQU8sQUFBSSxLQUFDLEFBQUksS0FBTSxBQUFHLEFBQUMsQUFBQyxBQUN4RCxBQUFJLFVBQUMsQUFBRSxBQUFDLElBQUUsQUFBVyxJQUFDLEFBQUssQUFBQyxPQUFDLE9BQU8sQUFBSSxLQUFDLEFBQUksS0FBRSxBQUFXLElBQUMsQUFBSyxBQUFDLEFBQUMsQUFDcEU7QUFBQzs7c0JBRUQsQUFBTywyQkFBQyxBQUEyQjtBQUNqQyxBQUFJLFlBQUUsQUFBSSxBQUFFLE9BQUcsQUFBSSxBQUFDOztBQUNwQixBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxNQUFDLEFBQU87QUFBQyxBQUFHLG1CQUFJLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBRyxBQUFDLEFBQUMsQUFBQyxBQUFDLEFBQ3hEOztBQUFDOztzQkFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ2hDO0FBQUMsQUFDRjs7OztBQUVELEFBQU07QUFBTjs7O0FBQ1UsYUFBSyxRQUFRLEFBQUUsQUFBQztBQUNqQixhQUFPLFVBQWMsQUFBSSxBQUFDLEFBc0JuQztBQUFDOztvQkFwQkMsQUFBTztBQUNMLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQ3BCO0FBQUM7O29CQUVELEFBQUkscUJBQUMsQUFBTztBQUNWLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBSSxBQUFDO0FBQ3BCLEFBQUksYUFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ3hCO0FBQUM7O29CQUVELEFBQUc7QUFDRCxZQUFJLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQUcsQUFBRSxBQUFDO0FBQzVCLFlBQUksQUFBRyxNQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxBQUFDO0FBQzVCLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBRyxRQUFLLEFBQUMsSUFBRyxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLE1BQUcsQUFBQyxBQUFDLEFBQUM7QUFFdEQsQUFBTSxlQUFDLEFBQUksU0FBSyxBQUFTLFlBQUcsQUFBSSxPQUFHLEFBQUksQUFBQyxBQUMxQztBQUFDOztvQkFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxXQUFLLEFBQUMsQUFBQyxBQUNqQztBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNHdWlkLCBlbnN1cmVHdWlkIH0gZnJvbSAnLi9ndWlkJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpY3Q8VD4ge1xuICBbaW5kZXg6IHN0cmluZ106IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0PFQ+IHtcbiAgYWRkKHZhbHVlOiBUKTogU2V0PFQ+O1xuICBkZWxldGUodmFsdWU6IFQpOiB2b2lkO1xuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmxldCBwcm90byA9IE9iamVjdC5jcmVhdGUobnVsbCwge1xuICAvLyB3aXRob3V0IHRoaXMsIHdlIHdpbGwgYWx3YXlzIHN0aWxsIGVuZCB1cCB3aXRoIChuZXdcbiAgLy8gRW1wdHlPYmplY3QoKSkuY29uc3RydWN0b3IgPT09IE9iamVjdFxuICBjb25zdHJ1Y3Rvcjoge1xuICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIEVtcHR5T2JqZWN0KCkge31cbkVtcHR5T2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuXG5leHBvcnQgZnVuY3Rpb24gZGljdDxUPigpOiBEaWN0PFQ+IHtcbiAgLy8gbGV0IGQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBkLnggPSAxO1xuICAvLyBkZWxldGUgZC54O1xuICAvLyByZXR1cm4gZDtcbiAgcmV0dXJuIG5ldyAoRW1wdHlPYmplY3QgYXMgYW55KSgpO1xufVxuXG5leHBvcnQgdHlwZSBTZXRNZW1iZXIgPSBIYXNHdWlkIHwgc3RyaW5nO1xuXG5leHBvcnQgY2xhc3MgRGljdFNldDxUIGV4dGVuZHMgU2V0TWVtYmVyPiBpbXBsZW1lbnRzIFNldDxUPiB7XG4gIHByaXZhdGUgZGljdDogRGljdDxUPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRpY3QgPSBkaWN0PFQ+KCk7XG4gIH1cblxuICBhZGQob2JqOiBUKTogU2V0PFQ+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHRoaXMuZGljdFs8YW55Pm9ial0gPSBvYmo7XG4gICAgZWxzZSB0aGlzLmRpY3RbZW5zdXJlR3VpZCg8YW55Pm9iaildID0gb2JqO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKG9iajogVCkge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgZGVsZXRlIHRoaXMuZGljdFs8YW55Pm9ial07XG4gICAgZWxzZSBpZiAoKG9iaiBhcyBhbnkpLl9ndWlkKSBkZWxldGUgdGhpcy5kaWN0WyhvYmogYXMgYW55KS5fZ3VpZF07XG4gIH1cblxuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCkge1xuICAgIGxldCB7IGRpY3QgfSA9IHRoaXM7XG4gICAgT2JqZWN0LmtleXMoZGljdCkuZm9yRWFjaChrZXkgPT4gY2FsbGJhY2soZGljdFtrZXldKSk7XG4gIH1cblxuICB0b0FycmF5KCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5kaWN0KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhY2s8VD4ge1xuICBwcml2YXRlIHN0YWNrOiBUW10gPSBbXTtcbiAgcHVibGljIGN1cnJlbnQ6IE9wdGlvbjxUPiA9IG51bGw7XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIHJldHVybiB0aGlzLnN0YWNrO1xuICB9XG5cbiAgcHVzaChpdGVtOiBUKSB7XG4gICAgdGhpcy5jdXJyZW50ID0gaXRlbTtcbiAgICB0aGlzLnN0YWNrLnB1c2goaXRlbSk7XG4gIH1cblxuICBwb3AoKTogT3B0aW9uPFQ+IHtcbiAgICBsZXQgaXRlbSA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgbGV0IGxlbiA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIHRoaXMuY3VycmVudCA9IGxlbiA9PT0gMCA/IG51bGwgOiB0aGlzLnN0YWNrW2xlbiAtIDFdO1xuXG4gICAgcmV0dXJuIGl0ZW0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBpdGVtO1xuICB9XG5cbiAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGggPT09IDA7XG4gIH1cbn1cbiJdfQ==","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nexport var ListNode = function ListNode(value) {\n    _classCallCheck(this, ListNode);\n\n    this.next = null;\n    this.prev = null;\n    this.value = value;\n};\nexport var LinkedList = function () {\n    function LinkedList() {\n        _classCallCheck(this, LinkedList);\n\n        this.clear();\n    }\n\n    LinkedList.fromSlice = function fromSlice(slice) {\n        var list = new LinkedList();\n        slice.forEachNode(function (n) {\n            return list.append(n.clone());\n        });\n        return list;\n    };\n\n    LinkedList.prototype.head = function head() {\n        return this._head;\n    };\n\n    LinkedList.prototype.tail = function tail() {\n        return this._tail;\n    };\n\n    LinkedList.prototype.clear = function clear() {\n        this._head = this._tail = null;\n    };\n\n    LinkedList.prototype.isEmpty = function isEmpty() {\n        return this._head === null;\n    };\n\n    LinkedList.prototype.toArray = function toArray() {\n        var out = [];\n        this.forEachNode(function (n) {\n            return out.push(n);\n        });\n        return out;\n    };\n\n    LinkedList.prototype.splice = function splice(start, end, reference) {\n        var before = void 0;\n        if (reference === null) {\n            before = this._tail;\n            this._tail = end;\n        } else {\n            before = reference.prev;\n            end.next = reference;\n            reference.prev = end;\n        }\n        if (before) {\n            before.next = start;\n            start.prev = before;\n        }\n    };\n\n    LinkedList.prototype.nextNode = function nextNode(node) {\n        return node.next;\n    };\n\n    LinkedList.prototype.prevNode = function prevNode(node) {\n        return node.prev;\n    };\n\n    LinkedList.prototype.forEachNode = function forEachNode(callback) {\n        var node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = node.next;\n        }\n    };\n\n    LinkedList.prototype.contains = function contains(needle) {\n        var node = this._head;\n        while (node !== null) {\n            if (node === needle) return true;\n            node = node.next;\n        }\n        return false;\n    };\n\n    LinkedList.prototype.insertBefore = function insertBefore(node) {\n        var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        if (reference === null) return this.append(node);\n        if (reference.prev) reference.prev.next = node;else this._head = node;\n        node.prev = reference.prev;\n        node.next = reference;\n        reference.prev = node;\n        return node;\n    };\n\n    LinkedList.prototype.append = function append(node) {\n        var tail = this._tail;\n        if (tail) {\n            tail.next = node;\n            node.prev = tail;\n            node.next = null;\n        } else {\n            this._head = node;\n        }\n        return this._tail = node;\n    };\n\n    LinkedList.prototype.pop = function pop() {\n        if (this._tail) return this.remove(this._tail);\n        return null;\n    };\n\n    LinkedList.prototype.prepend = function prepend(node) {\n        if (this._head) return this.insertBefore(node, this._head);\n        return this._head = this._tail = node;\n    };\n\n    LinkedList.prototype.remove = function remove(node) {\n        if (node.prev) node.prev.next = node.next;else this._head = node.next;\n        if (node.next) node.next.prev = node.prev;else this._tail = node.prev;\n        return node;\n    };\n\n    return LinkedList;\n}();\nexport var ListSlice = function () {\n    function ListSlice(head, tail) {\n        _classCallCheck(this, ListSlice);\n\n        this._head = head;\n        this._tail = tail;\n    }\n\n    ListSlice.toList = function toList(slice) {\n        var list = new LinkedList();\n        slice.forEachNode(function (n) {\n            return list.append(n.clone());\n        });\n        return list;\n    };\n\n    ListSlice.prototype.forEachNode = function forEachNode(callback) {\n        var node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = this.nextNode(node);\n        }\n    };\n\n    ListSlice.prototype.contains = function contains(needle) {\n        var node = this._head;\n        while (node !== null) {\n            if (node === needle) return true;\n            node = node.next;\n        }\n        return false;\n    };\n\n    ListSlice.prototype.head = function head() {\n        return this._head;\n    };\n\n    ListSlice.prototype.tail = function tail() {\n        return this._tail;\n    };\n\n    ListSlice.prototype.toArray = function toArray() {\n        var out = [];\n        this.forEachNode(function (n) {\n            return out.push(n);\n        });\n        return out;\n    };\n\n    ListSlice.prototype.nextNode = function nextNode(node) {\n        if (node === this._tail) return null;\n        return node.next;\n    };\n\n    ListSlice.prototype.prevNode = function prevNode(node) {\n        if (node === this._head) return null;\n        return node.prev;\n    };\n\n    ListSlice.prototype.isEmpty = function isEmpty() {\n        return false;\n    };\n\n    return ListSlice;\n}();\nexport var EMPTY_SLICE = new ListSlice(null, null);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3QtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFXQSxBQUFNLHNCQUtKLGtCQUFZLEFBQVE7OztBQUpiLFNBQUksT0FBd0IsQUFBSSxBQUFDO0FBQ2pDLFNBQUksT0FBd0IsQUFBSSxBQUFDO0FBSXRDLEFBQUksU0FBQyxBQUFLLFFBQUcsQUFBSyxBQUFDLEFBQ3JCO0FBQUMsQUFDRjtBQU1ELEFBQU07QUFVSjs7O0FBQ0UsQUFBSSxhQUFDLEFBQUssQUFBRSxBQUFDLEFBQ2Y7QUFBQyxBQVhELEFBQU07O2VBQUMsQUFBUywrQkFBOEIsQUFBZTtBQUMzRCxZQUFJLEFBQUksT0FBRyxJQUFJLEFBQVUsQUFBSyxBQUFDO0FBQy9CLEFBQUssY0FBQyxBQUFXO0FBQUMsQUFBQyxtQkFBSSxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQUMsRUFBQyxBQUFLLEFBQUUsQUFBQyxBQUFDLEFBQUM7O0FBQy9DLEFBQU0sZUFBQyxBQUFJLEFBQUMsQUFDZDtBQUFDOzt5QkFTRCxBQUFJO0FBQ0YsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFDcEI7QUFBQzs7eUJBRUQsQUFBSTtBQUNGLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQ3BCO0FBQUM7O3lCQUVELEFBQUs7QUFDSCxBQUFJLGFBQUMsQUFBSyxRQUFHLEFBQUksS0FBQyxBQUFLLFFBQUcsQUFBSSxBQUFDLEFBQ2pDO0FBQUM7O3lCQUVELEFBQU87QUFDTCxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUssVUFBSyxBQUFJLEFBQUMsQUFDN0I7QUFBQzs7eUJBRUQsQUFBTztBQUNMLFlBQUksQUFBRyxNQUFRLEFBQUUsQUFBQztBQUNsQixBQUFJLGFBQUMsQUFBVztBQUFDLEFBQUMsbUJBQUksQUFBRyxJQUFDLEFBQUksS0FBQyxBQUFDLEFBQUMsQUFBQyxBQUFDOztBQUNuQyxBQUFNLGVBQUMsQUFB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Qzs7QUFDbkMsQUFBTSxlQUFDLEFBQUcsQUFBQyxBQUNiO0FBQUM7O3dCQUVELEFBQVEsNkJBQUMsQUFBTztBQUNkLEFBQUUsQUFBQyxZQUFDLEFBQUksU0FBSyxBQUFJLEtBQUMsQUFBSyxBQUFDLE9BQUMsQUFBTSxPQUFDLEFBQUksQUFBQztBQUNyQyxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQVMsQUFBQyxBQUN4QjtBQUFDOzt3QkFFRCxBQUFRLDZCQUFDLEFBQU87QUFDZCxBQUFFLEFBQUMsWUFBQyxBQUFJLFNBQUssQUFBSSxLQUFDLEFBQUssQUFBQyxPQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUM7QUFDckMsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFTLEFBQUMsQUFDeEI7QUFBQzs7d0JBRUQsQUFBTztBQUNMLEFBQU0sZUFBQyxBQUFLLEFBQUMsQUFDZjtBQUFDLEFBQ0Y7Ozs7QUFFRCxBQUFNLE9BQUMsSUFBTSxBQUFXLGNBQUcsSUFBSSxBQUFTLFVBQUMsQUFBSSxNQUFFLEFBQUksQUFBQyxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnLi9wbGF0Zm9ybS11dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVzdHJveWFibGUge1xuICBkZXN0cm95KCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua2VkTGlzdE5vZGUge1xuICBuZXh0OiBPcHRpb248TGlua2VkTGlzdE5vZGU+O1xuICBwcmV2OiBPcHRpb248TGlua2VkTGlzdE5vZGU+O1xufVxuXG5leHBvcnQgY2xhc3MgTGlzdE5vZGU8VD4gaW1wbGVtZW50cyBMaW5rZWRMaXN0Tm9kZSB7XG4gIHB1YmxpYyBuZXh0OiBPcHRpb248TGlzdE5vZGU8VD4+ID0gbnVsbDtcbiAgcHVibGljIHByZXY6IE9wdGlvbjxMaXN0Tm9kZTxUPj4gPSBudWxsO1xuICBwdWJsaWMgdmFsdWU6IFQ7XG5cbiAgY29uc3RydWN0b3IodmFsdWU6IFQpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbn1cblxuLy8gd2UgYXJlIHVuYWJsZSB0byBleHByZXNzIHRoZSBjb25zdHJhaW50IHRoYXQgVCdzIC5wcmV2IGFuZCAubmV4dCBhcmVcbi8vIHRoZW1zZWx2ZXMgVC4gSG93ZXZlciwgaXQgd2lsbCBhbHdheXMgYmUgdHJ1ZSwgc28gdHJ1c3QgdXMuXG50eXBlIHRydXN0ID0gYW55O1xuXG5leHBvcnQgY2xhc3MgTGlua2VkTGlzdDxUIGV4dGVuZHMgTGlua2VkTGlzdE5vZGU+IGltcGxlbWVudHMgU2xpY2U8VD4ge1xuICBzdGF0aWMgZnJvbVNsaWNlPFUgZXh0ZW5kcyBDbG9uZWFibGVMaXN0Tm9kZT4oc2xpY2U6IFNsaWNlPFU+KTogTGlua2VkTGlzdDxVPiB7XG4gICAgbGV0IGxpc3QgPSBuZXcgTGlua2VkTGlzdDxVPigpO1xuICAgIHNsaWNlLmZvckVhY2hOb2RlKG4gPT4gbGlzdC5hcHBlbmQobi5jbG9uZSgpKSk7XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICBwcml2YXRlIF9oZWFkOiBPcHRpb248VD47XG4gIHByaXZhdGUgX3RhaWw6IE9wdGlvbjxUPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cblxuICBoZWFkKCk6IE9wdGlvbjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWQ7XG4gIH1cblxuICB0YWlsKCk6IE9wdGlvbjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX3RhaWw7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9oZWFkID0gdGhpcy5fdGFpbCA9IG51bGw7XG4gIH1cblxuICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9oZWFkID09PSBudWxsO1xuICB9XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIGxldCBvdXQ6IFRbXSA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaE5vZGUobiA9PiBvdXQucHVzaChuKSk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHNwbGljZShzdGFydDogVCwgZW5kOiBULCByZWZlcmVuY2U6IFQpIHtcbiAgICBsZXQgYmVmb3JlOiBPcHRpb248VD47XG5cbiAgICBpZiAocmVmZXJlbmNlID09PSBudWxsKSB7XG4gICAgICBiZWZvcmUgPSB0aGlzLl90YWlsO1xuICAgICAgdGhpcy5fdGFpbCA9IGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgYmVmb3JlID0gPFQ+cmVmZXJlbmNlLnByZXY7XG4gICAgICBlbmQubmV4dCA9IHJlZmVyZW5jZTtcbiAgICAgIHJlZmVyZW5jZS5wcmV2ID0gZW5kO1xuICAgIH1cblxuICAgIGlmIChiZWZvcmUpIHtcbiAgICAgIGJlZm9yZS5uZXh0ID0gc3RhcnQ7XG4gICAgICBzdGFydC5wcmV2ID0gYmVmb3JlO1xuICAgIH1cbiAgfVxuXG4gIG5leHROb2RlKG5vZGU6IFQpOiBUIHtcbiAgICByZXR1cm4gPHRydXN0Pm5vZGUubmV4dDtcbiAgfVxuXG4gIHByZXZOb2RlKG5vZGU6IFQpOiBUIHtcbiAgICByZXR1cm4gPHRydXN0Pm5vZGUucHJldjtcbiAgfVxuXG4gIGZvckVhY2hOb2RlKGNhbGxiYWNrOiAobm9kZTogVCkgPT4gdm9pZCkge1xuICAgIGxldCBub2RlID0gdGhpcy5faGVhZDtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayg8dHJ1c3Q+bm9kZSk7XG4gICAgICBub2RlID0gPHRydXN0Pm5vZGUubmV4dDtcbiAgICB9XG4gIH1cblxuICBjb250YWlucyhuZWVkbGU6IFQpOiBib29sZWFuIHtcbiAgICBsZXQgbm9kZSA9IHRoaXMuX2hlYWQ7XG5cbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKG5vZGUgPT09IG5lZWRsZSkgcmV0dXJuIHRydWU7XG4gICAgICBub2RlID0gPHRydXN0Pm5vZGUubmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpbnNlcnRCZWZvcmUobm9kZTogVCwgcmVmZXJlbmNlOiBPcHRpb248VD4gPSBudWxsKTogVCB7XG4gICAgaWYgKHJlZmVyZW5jZSA9PT0gbnVsbCkgcmV0dXJuIHRoaXMuYXBwZW5kKG5vZGUpO1xuXG4gICAgaWYgKHJlZmVyZW5jZS5wcmV2KSByZWZlcmVuY2UucHJldi5uZXh0ID0gbm9kZTtcbiAgICBlbHNlIHRoaXMuX2hlYWQgPSBub2RlO1xuXG4gICAgbm9kZS5wcmV2ID0gcmVmZXJlbmNlLnByZXY7XG4gICAgbm9kZS5uZXh0ID0gcmVmZXJlbmNlO1xuICAgIHJlZmVyZW5jZS5wcmV2ID0gbm9kZTtcblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgYXBwZW5kKG5vZGU6IFQpOiBUIHtcbiAgICBsZXQgdGFpbCA9IHRoaXMuX3RhaWw7XG5cbiAgICBpZiAodGFpbCkge1xuICAgICAgdGFpbC5uZXh0ID0gbm9kZTtcbiAgICAgIG5vZGUucHJldiA9IHRhaWw7XG4gICAgICBub2RlLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oZWFkID0gbm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX3RhaWwgPSBub2RlKTtcbiAgfVxuXG4gIHBvcCgpOiBPcHRpb248VD4ge1xuICAgIGlmICh0aGlzLl90YWlsKSByZXR1cm4gdGhpcy5yZW1vdmUodGhpcy5fdGFpbCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcmVwZW5kKG5vZGU6IFQpOiBUIHtcbiAgICBpZiAodGhpcy5faGVhZCkgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKG5vZGUsIHRoaXMuX2hlYWQpO1xuICAgIHJldHVybiAodGhpcy5faGVhZCA9IHRoaXMuX3RhaWwgPSBub2RlKTtcbiAgfVxuXG4gIHJlbW92ZShub2RlOiBUKTogVCB7XG4gICAgaWYgKG5vZGUucHJldikgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHQ7XG4gICAgZWxzZSB0aGlzLl9oZWFkID0gPHRydXN0Pm5vZGUubmV4dDtcblxuICAgIGlmIChub2RlLm5leHQpIG5vZGUubmV4dC5wcmV2ID0gbm9kZS5wcmV2O1xuICAgIGVsc2UgdGhpcy5fdGFpbCA9IDx0cnVzdD5ub2RlLnByZXY7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNsaWNlPFQgZXh0ZW5kcyBMaW5rZWRMaXN0Tm9kZT4ge1xuICBoZWFkKCk6IE9wdGlvbjxUPjtcbiAgdGFpbCgpOiBPcHRpb248VD47XG4gIG5leHROb2RlKG5vZGU6IFQpOiBPcHRpb248VD47XG4gIHByZXZOb2RlKG5vZGU6IFQpOiBPcHRpb248VD47XG4gIGZvckVhY2hOb2RlKGNhbGxiYWNrOiAobm9kZTogVCkgPT4gdm9pZCk6IHZvaWQ7XG4gIHRvQXJyYXkoKTogVFtdO1xuICBpc0VtcHR5KCk6IGJvb2xlYW47XG4gIGNvbnRhaW5zKG5lZWRsZTogVCk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvbmVhYmxlTGlzdE5vZGUgZXh0ZW5kcyBMaW5rZWRMaXN0Tm9kZSB7XG4gIGNsb25lKCk6IHRoaXM7XG59XG5cbmV4cG9ydCBjbGFzcyBMaXN0U2xpY2U8VCBleHRlbmRzIExpbmtlZExpc3ROb2RlPiBpbXBsZW1lbnRzIFNsaWNlPFQ+IHtcbiAgc3RhdGljIHRvTGlzdDxVIGV4dGVuZHMgQ2xvbmVhYmxlTGlzdE5vZGU+KHNsaWNlOiBTbGljZTxVPik6IExpbmtlZExpc3Q8VT4ge1xuICAgIGxldCBsaXN0ID0gbmV3IExpbmtlZExpc3Q8VT4oKTtcbiAgICBzbGljZS5mb3JFYWNoTm9kZShuID0+IGxpc3QuYXBwZW5kKG4uY2xvbmUoKSkpO1xuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgcHJpdmF0ZSBfaGVhZDogT3B0aW9uPFQ+O1xuICBwcml2YXRlIF90YWlsOiBPcHRpb248VD47XG5cbiAgY29uc3RydWN0b3IoaGVhZDogT3B0aW9uPFQ+LCB0YWlsOiBPcHRpb248VD4pIHtcbiAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICB0aGlzLl90YWlsID0gdGFpbDtcbiAgfVxuXG4gIGZvckVhY2hOb2RlKGNhbGxiYWNrOiAobm9kZTogVCkgPT4gdm9pZCkge1xuICAgIGxldCBub2RlID0gdGhpcy5faGVhZDtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIG5vZGUgPSB0aGlzLm5leHROb2RlKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnRhaW5zKG5lZWRsZTogVCk6IGJvb2xlYW4ge1xuICAgIGxldCBub2RlID0gdGhpcy5faGVhZDtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBpZiAobm9kZSA9PT0gbmVlZGxlKSByZXR1cm4gdHJ1ZTtcbiAgICAgIG5vZGUgPSA8dHJ1c3Q+bm9kZS5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGhlYWQoKTogT3B0aW9uPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5faGVhZDtcbiAgfVxuXG4gIHRhaWwoKTogT3B0aW9uPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5fdGFpbDtcbiAgfVxuXG4gIHRvQXJyYXkoKTogVFtdIHtcbiAgICBsZXQgb3V0OiBUW10gPSBbXTtcbiAgICB0aGlzLmZvckVhY2hOb2RlKG4gPT4gb3V0LnB1c2gobikpO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBuZXh0Tm9kZShub2RlOiBUKTogT3B0aW9uPFQ+IHtcbiAgICBpZiAobm9kZSA9PT0gdGhpcy5fdGFpbCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIG5vZGUubmV4dCBhcyBUO1xuICB9XG5cbiAgcHJldk5vZGUobm9kZTogVCk6IE9wdGlvbjxUPiB7XG4gICAgaWYgKG5vZGUgPT09IHRoaXMuX2hlYWQpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBub2RlLnByZXYgYXMgVDtcbiAgfVxuXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9TTElDRSA9IG5ldyBMaXN0U2xpY2UobnVsbCwgbnVsbCk7XG4iXX0=","export var HAS_NATIVE_WEAKMAP = function () {\n    // detect if `WeakMap` is even present\n    var hasWeakMap = typeof WeakMap === 'function';\n    if (!hasWeakMap) {\n        return false;\n    }\n    var instance = new WeakMap();\n    // use `Object`'s `.toString` directly to prevent us from detecting\n    // polyfills as native weakmaps\n    return Object.prototype.toString.call(instance) === '[object WeakMap]';\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha21hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYWttYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBTSxXQUFPLEFBQWtCLHFCQUFJO0FBQ2pDLEFBQXNDO0FBQ3RDLFFBQUksQUFBVSxhQUFHLE9BQU8sQUFBTyxZQUFLLEFBQVUsQUFBQztBQUMvQyxBQUFFLEFBQUMsUUFBQyxDQUFDLEFBQVUsQUFBQyxZQUFDLEFBQUM7QUFBQyxBQUFNLGVBQUMsQUFBSyxBQUFDLEFBQUM7QUFBQztBQUVsQyxRQUFJLEFBQVEsV0FBRyxJQUFJLEFBQU8sQUFBRSxBQUFDO0FBQzdCLEFBQW1FO0FBQ25FLEFBQStCO0FBQy9CLEFBQU0sV0FBQyxBQUFNLE9BQUMsQUFBUyxVQUFDLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBUSxBQUFDLGNBQUssQUFBa0IsQUFBQyxBQUN6RTtBQUFDLEFBQUMsQUFBRSxBQUFDLENBVDZCLEVBQTNCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEhBU19OQVRJVkVfV0VBS01BUCA9IChmdW5jdGlvbigpIHtcbiAgLy8gZGV0ZWN0IGlmIGBXZWFrTWFwYCBpcyBldmVuIHByZXNlbnRcbiAgbGV0IGhhc1dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJztcbiAgaWYgKCFoYXNXZWFrTWFwKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGxldCBpbnN0YW5jZSA9IG5ldyBXZWFrTWFwKCk7XG4gIC8vIHVzZSBgT2JqZWN0YCdzIGAudG9TdHJpbmdgIGRpcmVjdGx5IHRvIHByZXZlbnQgdXMgZnJvbSBkZXRlY3RpbmdcbiAgLy8gcG9seWZpbGxzIGFzIG5hdGl2ZSB3ZWFrbWFwc1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGluc3RhbmNlKSA9PT0gJ1tvYmplY3QgV2Vha01hcF0nO1xufSkoKTtcbiJdfQ==","import { HAS_NATIVE_WEAKMAP } from './weakmap';\nvar HAS_TYPED_ARRAYS = typeof Uint32Array !== 'undefined';\nvar A = void 0;\nif (HAS_TYPED_ARRAYS) {\n    A = Uint32Array;\n} else {\n    A = Array;\n}\nexport default A;\nexport var EMPTY_ARRAY = HAS_NATIVE_WEAKMAP ? Object.freeze([]) : [];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcnJheS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUFPLFNBQUUsQUFBa0IsQUFBRSwwQkFBTSxBQUFXLEFBQUM7QUFFL0MsSUFBTSxBQUFnQixtQkFBRyxPQUFPLEFBQVcsZ0JBQUssQUFBVyxBQUFDO0FBRTVELElBQUksQUFBQyxBQUFDO0FBRU4sQUFBRSxBQUFDLElBQUMsQUFBZ0IsQUFBQyxrQkFBQyxBQUFDO0FBQ3JCLEFBQUMsUUFBRyxBQUFXLEFBQUMsQUFDbEI7QUFBQyxBQUFDLEFBQUksT0FBQyxBQUFDO0FBQ04sQUFBQyxRQUFHLEFBQUssQUFBQyxBQUNaO0FBQUM7QUFFRCxlQUFlLEFBQUMsQUFBQztBQUVqQixBQUFNLE9BQUMsSUFBTSxBQUFXLEFBQVUsY0FBQyxBQUFrQixxQkFBRyxBQUFNLE9BQUMsQUFBTSxPQUFDLEFBQUUsQUFBQyxNQUFHLEFBQUUsQUFBUSxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSEFTX05BVElWRV9XRUFLTUFQIH0gZnJvbSAnLi93ZWFrbWFwJztcblxuY29uc3QgSEFTX1RZUEVEX0FSUkFZUyA9IHR5cGVvZiBVaW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCc7XG5cbmxldCBBO1xuXG5pZiAoSEFTX1RZUEVEX0FSUkFZUykge1xuICBBID0gVWludDMyQXJyYXk7XG59IGVsc2Uge1xuICBBID0gQXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEE7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWTogYW55W10gPSAoSEFTX05BVElWRV9XRUFLTUFQID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXSkgYXMgYW55OyJdfQ==","export function EMPTY_CACHE() {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUFNLDhCQUF5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIEVNUFRZX0NBQ0hFKCkge31cbiJdfQ==","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { EMPTY_CACHE } from '../utils';\nimport { dict } from '@glimmer/util';\nimport Meta from '../meta';\nimport { PropertyReference } from './descriptors';\nimport { VOLATILE_TAG } from '@glimmer/reference';\n\nvar PathReference = function () {\n    function PathReference(parent, property) {\n        _classCallCheck(this, PathReference);\n\n        this.cache = EMPTY_CACHE;\n        this.inner = null;\n        this.chains = null;\n        this.lastParentValue = EMPTY_CACHE;\n        this._guid = 0;\n        this.tag = VOLATILE_TAG;\n        this.parent = parent;\n        this.property = property;\n    }\n\n    PathReference.prototype.value = function value() {\n        var lastParentValue = this.lastParentValue,\n            property = this.property,\n            inner = this.inner;\n\n        var parentValue = this._parentValue();\n        if (parentValue === null || parentValue === undefined) {\n            return this.cache = undefined;\n        }\n        if (lastParentValue === parentValue) {\n            inner = this.inner;\n        } else {\n            var ReferenceType = typeof parentValue === 'object' ? Meta.for(parentValue).referenceTypeFor(property) : PropertyReference;\n            inner = this.inner = new ReferenceType(parentValue, property, this);\n        }\n        // if (typeof parentValue === 'object') {\n        //   Meta.for(parentValue).addReference(property, this);\n        // }\n        return this.cache = inner.value();\n    };\n\n    PathReference.prototype.get = function get(prop) {\n        var chains = this._getChains();\n        if (prop in chains) return chains[prop];\n        return chains[prop] = new PathReference(this, prop);\n    };\n\n    PathReference.prototype.label = function label() {\n        return '[reference Direct]';\n    };\n\n    PathReference.prototype._getChains = function _getChains() {\n        if (this.chains) return this.chains;\n        return this.chains = dict();\n    };\n\n    PathReference.prototype._parentValue = function _parentValue() {\n        var parent = this.parent.value();\n        this.lastParentValue = parent;\n        return parent;\n    };\n\n    return PathReference;\n}();\n\nexport default PathReference;\n\nexport { PathReference };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBhdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxBQUFPLFNBQUUsQUFBVyxBQUFFLG1CQUFNLEFBQVUsQUFBQztBQUN2QyxBQUFPLFNBQUUsQUFBSSxBQUFFLFlBQU0sQUFBZSxBQUFDO0FBQ3JDLE9BQU8sQUFBSSxVQUFNLEFBQVMsQUFBQztBQUMzQixBQUFPLFNBQUUsQUFBaUIsQUFBRSx5QkFBTSxBQUFlLEFBQUM7QUFDbEQsQUFBTyxTQUFFLEFBQVksQUFBbUQsb0JBQU0sQUFBb0IsQUFBQyxBQUluRyxBQUFNLEFBQUMsQUFBTzs7O0FBVVosMkJBQVksQUFBeUIsUUFBRSxBQUFnQjs7O0FBUDdDLGFBQUssUUFBUSxBQUFXLEFBQUM7QUFDM0IsYUFBSyxRQUF5QixBQUFJLEFBQUM7QUFDbkMsYUFBTSxTQUFxQyxBQUFJLEFBQUM7QUFDaEQsYUFBZSxrQkFBUSxBQUFXLEFBQUM7QUFDcEMsYUFBSyxRQUFHLEFBQUMsQUFBQztBQUNWLGFBQUcsTUFBUSxBQUFZLEFBQUM7QUFHN0IsQUFBSSxhQUFDLEFBQU0sU0FBRyxBQUFNLEFBQUM7QUFDckIsQUFBSSxhQUFDLEFBQVEsV0FBRyxBQUFRLEFBQUMsQUFDM0I7QUFBQzs7NEJBRUQsQUFBSztBQUNILEFBQUksWUFBRSxBQUFlO1lBQUUsQUFBUTtZQUFFLEFBQUssQUFBRSxRQUFHLEFBQUksQUFBQzs7QUFDaEQsWUFBSSxBQUFXLGNBQUcsQUFBSSxLQUFDLEFBQVksQUFBRSxBQUFDO0FBRXRDLEFBQUUsQUFBQyxZQUFDLEFBQVcsZ0JBQUssQUFBSSxRQUFJLEFBQVcsZ0JBQUssQUFBUyxBQUFDLFdBQUMsQUFBQztBQUN0RCxBQUFNLEFBQUMsbUJBQUMsQUFBSSxLQUFDLEFBQUssUUFBRyxBQUFTLEFBQUMsQUFBQyxBQUNsQztBQUFDO0FBRUQsQUFBRSxBQUFDLFlBQUMsQUFBZSxvQkFBSyxBQUFXLEFBQUMsYUFBQyxBQUFDO0FBQ3BDLEFBQUssb0JBQUcsQUFBSSxLQUFDLEFBQUssQUFBQyxBQUNyQjtBQUFDLEFBQUMsQUFBSSxlQUFDLEFBQUM7QUFDTixnQkFBSSxBQUFhLGdCQUFHLE9BQU8sQUFBVyxnQkFBSyxBQUFRLFdBQUcsQUFBSSxLQUFDLEFBQUcsSUFBQyxBQUFXLEFBQUMsYUFBQyxBQUFnQixpQkFBQyxBQUFRLEFBQUMsWUFBRyxBQUFpQixBQUFDO0FBQzNILEFBQUssb0JBQUcsQUFBSSxLQUFDLEFBQUssUUFBRyxJQUFJLEFBQWEsY0FBQyxBQUFXLGFBQUUsQUFBUSxVQUFFLEFBQUksQUFBQyxBQUFDLEFBQ3RFO0FBQUM7QUFFRCxBQUF5QztBQUN6QyxBQUF3RDtBQUN4RCxBQUFJO0FBRUosQUFBTSxBQUFDLGVBQUMsQUFBSSxLQUFDLEFBQUssUUFBRyxBQUFNLE1BQUMsQUFBSyxBQUFFLEFBQUMsQUFBQyxBQUN2QztBQUFDOzs0QkFFRCxBQUFHLG1CQUFDLEFBQVk7QUFDZCxZQUFJLEFBQU0sU0FBRyxBQUFJLEtBQUMsQUFBVSxBQUFFLEFBQUM7QUFDL0IsQUFBRSxBQUFDLFlBQVMsQUFBSSxRQUFJLEFBQU0sQUFBQyxRQUFDLEFBQU0sT0FBQyxBQUFNLE9BQUMsQUFBSSxBQUFDLEFBQUM7QUFDaEQsQUFBTSxBQUFDLGVBQUMsQUFBTSxPQUFDLEFBQUksQUFBQyxRQUFHLElBQUksQUFBYSxjQUFDLEFBQUksTUFBRSxBQUFJLEFBQUMsQUFBQyxBQUFDLEFBQ3hEO0FBQUM7OzRCQUVELEFBQUs7QUFDSCxBQUFNLGVBQUMsQUFBb0IsQUFBQyxBQUM5QjtBQUFDOzs0QkFFTyxBQUFVO0FBQ2hCLEFBQUUsQUFBQyxZQUFDLEFBQUksS0FBQyxBQUFNLEFBQUMsUUFBQyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQU0sQUFBQztBQUNwQyxBQUFNLEFBQUMsZUFBQyxBQUFJLEtBQUMsQUFBTSxTQUFHLEFBQUksQUFBc0IsQUFBQyxBQUFDLEFBQ3BEO0FBQUM7OzRCQUVPLEFBQVk7QUFDbEIsWUFBSSxBQUFNLFNBQUcsQUFBSSxLQUFDLEFBQU0sT0FBQyxBQUFLLEFBQUUsQUFBQztBQUNqQyxBQUFJLGFBQUMsQUFBZSxrQkFBRyxBQUFNLEFBQUM7QUFDOUIsQUFBTSxlQUFDLEFBQU0sQUFBQyxBQUNoQjtBQUFDLEFBQ0Y7Ozs7Ozs7QUFFRCxBQUFPLFNBQUUsQUFBYSxBQUFFLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFTVBUWV9DQUNIRSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGRpY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCBNZXRhIGZyb20gJy4uL21ldGEnO1xuaW1wb3J0IHsgUHJvcGVydHlSZWZlcmVuY2UgfSBmcm9tICcuL2Rlc2NyaXB0b3JzJztcbmltcG9ydCB7IFZPTEFUSUxFX1RBRywgUGF0aFJlZmVyZW5jZSBhcyBJUGF0aFJlZmVyZW5jZSwgUmVmZXJlbmNlLCBUYWcgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgRGljdCwgSGFzR3VpZCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSBcIkBnbGltbWVyL2ludGVyZmFjZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF0aFJlZmVyZW5jZTxUPiBpbXBsZW1lbnRzIElQYXRoUmVmZXJlbmNlPFQ+LCBIYXNHdWlkIHtcbiAgcHJpdmF0ZSBwYXJlbnQ6IElQYXRoUmVmZXJlbmNlPGFueT47XG4gIHByaXZhdGUgcHJvcGVydHk6IHN0cmluZztcbiAgcHJvdGVjdGVkIGNhY2hlOiBhbnkgPSBFTVBUWV9DQUNIRTtcbiAgcHJpdmF0ZSBpbm5lcjogT3B0aW9uPFJlZmVyZW5jZTxUPj4gPSBudWxsO1xuICBwcml2YXRlIGNoYWluczogT3B0aW9uPERpY3Q8UGF0aFJlZmVyZW5jZTxhbnk+Pj4gPSBudWxsO1xuICBwcml2YXRlIGxhc3RQYXJlbnRWYWx1ZTogYW55ID0gRU1QVFlfQ0FDSEU7XG4gIHB1YmxpYyBfZ3VpZCA9IDA7XG4gIHB1YmxpYyB0YWc6IFRhZyA9IFZPTEFUSUxFX1RBRztcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IElQYXRoUmVmZXJlbmNlPFQ+LCBwcm9wZXJ0eTogc3RyaW5nKSB7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICB9XG5cbiAgdmFsdWUoKTogYW55IHtcbiAgICBsZXQgeyBsYXN0UGFyZW50VmFsdWUsIHByb3BlcnR5LCBpbm5lciB9ID0gdGhpcztcbiAgICBsZXQgcGFyZW50VmFsdWUgPSB0aGlzLl9wYXJlbnRWYWx1ZSgpO1xuXG4gICAgaWYgKHBhcmVudFZhbHVlID09PSBudWxsIHx8IHBhcmVudFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAodGhpcy5jYWNoZSA9IHVuZGVmaW5lZCk7XG4gICAgfVxuXG4gICAgaWYgKGxhc3RQYXJlbnRWYWx1ZSA9PT0gcGFyZW50VmFsdWUpIHtcbiAgICAgIGlubmVyID0gdGhpcy5pbm5lcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IFJlZmVyZW5jZVR5cGUgPSB0eXBlb2YgcGFyZW50VmFsdWUgPT09ICdvYmplY3QnID8gTWV0YS5mb3IocGFyZW50VmFsdWUpLnJlZmVyZW5jZVR5cGVGb3IocHJvcGVydHkpIDogUHJvcGVydHlSZWZlcmVuY2U7XG4gICAgICBpbm5lciA9IHRoaXMuaW5uZXIgPSBuZXcgUmVmZXJlbmNlVHlwZShwYXJlbnRWYWx1ZSwgcHJvcGVydHksIHRoaXMpO1xuICAgIH1cblxuICAgIC8vIGlmICh0eXBlb2YgcGFyZW50VmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gICBNZXRhLmZvcihwYXJlbnRWYWx1ZSkuYWRkUmVmZXJlbmNlKHByb3BlcnR5LCB0aGlzKTtcbiAgICAvLyB9XG5cbiAgICByZXR1cm4gKHRoaXMuY2FjaGUgPSBpbm5lciEudmFsdWUoKSk7XG4gIH1cblxuICBnZXQocHJvcDogc3RyaW5nKTogSVBhdGhSZWZlcmVuY2U8YW55PiB7XG4gICAgbGV0IGNoYWlucyA9IHRoaXMuX2dldENoYWlucygpO1xuICAgIGlmICg8c3RyaW5nPnByb3AgaW4gY2hhaW5zKSByZXR1cm4gY2hhaW5zW3Byb3BdO1xuICAgIHJldHVybiAoY2hhaW5zW3Byb3BdID0gbmV3IFBhdGhSZWZlcmVuY2UodGhpcywgcHJvcCkpO1xuICB9XG5cbiAgbGFiZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ1tyZWZlcmVuY2UgRGlyZWN0XSc7XG4gIH1cblxuICBwcml2YXRlIF9nZXRDaGFpbnMoKTogRGljdDxQYXRoUmVmZXJlbmNlPGFueT4+IHtcbiAgICBpZiAodGhpcy5jaGFpbnMpIHJldHVybiB0aGlzLmNoYWlucztcbiAgICByZXR1cm4gKHRoaXMuY2hhaW5zID0gZGljdDxQYXRoUmVmZXJlbmNlPGFueT4+KCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcGFyZW50VmFsdWUoKSB7XG4gICAgbGV0IHBhcmVudCA9IHRoaXMucGFyZW50LnZhbHVlKCk7XG4gICAgdGhpcy5sYXN0UGFyZW50VmFsdWUgPSBwYXJlbnQ7XG4gICAgcmV0dXJuIHBhcmVudDtcbiAgfVxufVxuXG5leHBvcnQgeyBQYXRoUmVmZXJlbmNlIH07XG4iXX0=","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { dict } from '@glimmer/util';\nimport { PathReference } from './path';\nimport { VOLATILE_TAG } from '@glimmer/reference';\n\nvar RootReference = function () {\n    function RootReference(object) {\n        _classCallCheck(this, RootReference);\n\n        this.chains = dict();\n        this.tag = VOLATILE_TAG;\n        this.object = object;\n    }\n\n    RootReference.prototype.value = function value() {\n        return this.object;\n    };\n\n    RootReference.prototype.update = function update(object) {\n        this.object = object;\n        // this.notify();\n    };\n\n    RootReference.prototype.get = function get(prop) {\n        var chains = this.chains;\n        if (prop in chains) return chains[prop];\n        return chains[prop] = new PathReference(this, prop);\n    };\n\n    RootReference.prototype.chainFor = function chainFor(prop) {\n        var chains = this.chains;\n        if (prop in chains) return chains[prop];\n        return null;\n    };\n\n    RootReference.prototype.path = function path(string) {\n        return string.split('.').reduce(function (ref, part) {\n            return ref.get(part);\n        }, this);\n    };\n\n    RootReference.prototype.referenceFromParts = function referenceFromParts(parts) {\n        return parts.reduce(function (ref, part) {\n            return ref.get(part);\n        }, this);\n    };\n\n    RootReference.prototype.label = function label() {\n        return '[reference Root]';\n    };\n\n    return RootReference;\n}();\n\nexport default RootReference;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJvb3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxBQUFPLFNBQVUsQUFBSSxBQUFFLFlBQU0sQUFBZSxBQUFDO0FBQzdDLEFBQU8sU0FBRSxBQUFhLEFBQUUscUJBQU0sQUFBUSxBQUFDO0FBRXZDLEFBQU8sU0FBRSxBQUFZLEFBQXdDLG9CQUFNLEFBQW9CLEFBQUMsQUFHeEYsQUFBTSxBQUFDLEFBQU87OztBQUtaLDJCQUFZLEFBQVM7OztBQUhiLGFBQU0sU0FBRyxBQUFJLEFBQXNCLEFBQUM7QUFDckMsYUFBRyxNQUFRLEFBQVksQUFBQztBQUc3QixBQUFJLGFBQUMsQUFBTSxTQUFHLEFBQU0sQUFBQyxBQUN2QjtBQUFDOzs0QkFFRCxBQUFLO0FBQVEsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFNLEFBQUMsQUFBQztBQUFDOzs0QkFFbEMsQUFBTSx5QkFBQyxBQUFTO0FBQ2QsQUFBSSxhQUFDLEFBQU0sU0FBRyxBQUFNLEFBQUM7QUFDckIsQUFBaUIsQUFDbkI7QUFBQzs7NEJBRUQsQUFBRyxtQkFBSSxBQUFZO0FBQ2pCLFlBQUksQUFBTSxTQUFHLEFBQUksS0FBQyxBQUFNLEFBQUM7QUFDekIsQUFBRSxBQUFDLFlBQVMsQUFBSSxRQUFJLEFBQU0sQUFBQyxRQUFDLEFBQU0sT0FBQyxBQUFNLE9BQUMsQUFBSSxBQUFDLEFBQUM7QUFDaEQsQUFBTSxBQUFDLGVBQUMsQUFBTSxPQUFDLEFBQUksQUFBQyxRQUFHLElBQUksQUFBYSxjQUFDLEFBQUksTUFBRSxBQUFJLEFBQUMsQUFBQyxBQUFDLEFBQ3hEO0FBQUM7OzRCQUVELEFBQVEsNkJBQUksQUFBWTtBQUN0QixZQUFJLEFBQU0sU0FBRyxBQUFJLEtBQUMsQUFBTSxBQUFDO0FBQ3pCLEFBQUUsQUFBQyxZQUFTLEFBQUksUUFBSSxBQUFNLEFBQUMsUUFBQyxBQUFNLE9BQUMsQUFBTSxPQUFDLEFBQUksQUFBQyxBQUFDO0FBQ2hELEFBQU0sZUFBQyxBQUFJLEFBQUMsQUFDZDtBQUFDOzs0QkFFRCxBQUFJLHFCQUFDLEFBQWM7QUFDakIsQUFBTSxzQkFBUSxBQUFLLE1BQUMsQUFBRyxBQUFDLEtBQUMsQUFBTSxpQkFBRSxBQUFHLEtBQUUsQUFBSTtBQUFWLG1CQUFlLEFBQUcsSUFBQyxBQUFHLElBQUMsQUFBSSxBQUFDO1NBQXJELEFBQU0sRUFBaUQsQUFBOEIsQUFBQyxBQUFDLEFBQ2hHO0FBQUM7OzRCQUVELEFBQWtCLGlEQUFDLEFBQWU7QUFDaEMsQUFBTSxxQkFBTyxBQUFNLGlCQUFFLEFBQUcsS0FBRSxBQUFJO0FBQVYsbUJBQWUsQUFBRyxJQUFDLEFBQUcsSUFBQyxBQUFJLEFBQTJCO1NBQW5FLEFBQUssRUFBZ0UsQUFBOEIsQUFBQyxBQUFDLEFBQzlHO0FBQUM7OzRCQUVELEFBQUs7QUFDSCxBQUFNLGVBQUMsQUFBa0IsQUFBQyxBQUM1QjtBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGFxdWUsIGRpY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IFBhdGhSZWZlcmVuY2UgfSBmcm9tICcuL3BhdGgnO1xuaW1wb3J0IHsgUm9vdFJlZmVyZW5jZSBhcyBJUm9vdFJlZmVyZW5jZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFZPTEFUSUxFX1RBRywgUGF0aFJlZmVyZW5jZSBhcyBJUGF0aFJlZmVyZW5jZSwgVGFnIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gXCJAZ2xpbW1lci9pbnRlcmZhY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvb3RSZWZlcmVuY2U8VD4gaW1wbGVtZW50cyBJUm9vdFJlZmVyZW5jZTxUPiwgSVBhdGhSZWZlcmVuY2U8VD4ge1xuICBwcml2YXRlIG9iamVjdDogVDtcbiAgcHJpdmF0ZSBjaGFpbnMgPSBkaWN0PFBhdGhSZWZlcmVuY2U8YW55Pj4oKTtcbiAgcHVibGljIHRhZzogVGFnID0gVk9MQVRJTEVfVEFHO1xuXG4gIGNvbnN0cnVjdG9yKG9iamVjdDogVCkge1xuICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICB9XG5cbiAgdmFsdWUoKTogVCB7IHJldHVybiB0aGlzLm9iamVjdDsgfVxuXG4gIHVwZGF0ZShvYmplY3Q6IFQpIHtcbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcbiAgICAvLyB0aGlzLm5vdGlmeSgpO1xuICB9XG5cbiAgZ2V0PFU+KHByb3A6IHN0cmluZyk6IElQYXRoUmVmZXJlbmNlPFU+IHtcbiAgICBsZXQgY2hhaW5zID0gdGhpcy5jaGFpbnM7XG4gICAgaWYgKDxzdHJpbmc+cHJvcCBpbiBjaGFpbnMpIHJldHVybiBjaGFpbnNbcHJvcF07XG4gICAgcmV0dXJuIChjaGFpbnNbcHJvcF0gPSBuZXcgUGF0aFJlZmVyZW5jZSh0aGlzLCBwcm9wKSk7XG4gIH1cblxuICBjaGFpbkZvcjxVPihwcm9wOiBzdHJpbmcpOiBPcHRpb248SVBhdGhSZWZlcmVuY2U8VT4+IHtcbiAgICBsZXQgY2hhaW5zID0gdGhpcy5jaGFpbnM7XG4gICAgaWYgKDxzdHJpbmc+cHJvcCBpbiBjaGFpbnMpIHJldHVybiBjaGFpbnNbcHJvcF07XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwYXRoKHN0cmluZzogc3RyaW5nKTogSVBhdGhSZWZlcmVuY2U8T3BhcXVlPiB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnLicpLnJlZHVjZSgocmVmLCBwYXJ0KSA9PiByZWYuZ2V0KHBhcnQpLCB0aGlzIGFzIElQYXRoUmVmZXJlbmNlPE9wYXF1ZT4pO1xuICB9XG5cbiAgcmVmZXJlbmNlRnJvbVBhcnRzKHBhcnRzOiBzdHJpbmdbXSk6IElQYXRoUmVmZXJlbmNlPE9wYXF1ZT4ge1xuICAgIHJldHVybiBwYXJ0cy5yZWR1Y2UoKHJlZiwgcGFydCkgPT4gcmVmLmdldChwYXJ0KSBhcyBJUGF0aFJlZmVyZW5jZTxPcGFxdWU+LCB0aGlzIGFzIElQYXRoUmVmZXJlbmNlPE9wYXF1ZT4pO1xuICB9XG5cbiAgbGFiZWwoKSB7XG4gICAgcmV0dXJuICdbcmVmZXJlbmNlIFJvb3RdJztcbiAgfVxufVxuIl19","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { PropertyReference } from './references/descriptors';\nimport RootReference from './references/root';\nimport { DictSet, dict } from '@glimmer/util';\nimport { VOLATILE_TAG } from '@glimmer/reference';\nvar NOOP_DESTROY = {\n    destroy: function () {}\n};\n\nvar ConstPath = function () {\n    function ConstPath(parent, _property) {\n        _classCallCheck(this, ConstPath);\n\n        this.tag = VOLATILE_TAG;\n        this.parent = parent;\n    }\n\n    ConstPath.prototype.chain = function chain() {\n        return NOOP_DESTROY;\n    };\n\n    ConstPath.prototype.notify = function notify() {};\n\n    ConstPath.prototype.value = function value() {\n        return this.parent[this.property];\n    };\n\n    ConstPath.prototype.get = function get(prop) {\n        return new ConstPath(this.parent[this.property], prop);\n    };\n\n    return ConstPath;\n}();\n\nvar ConstRoot = function () {\n    function ConstRoot(value) {\n        _classCallCheck(this, ConstRoot);\n\n        this.tag = VOLATILE_TAG;\n        this.inner = value;\n    }\n\n    ConstRoot.prototype.update = function update(inner) {\n        this.inner = inner;\n    };\n\n    ConstRoot.prototype.chain = function chain() {\n        return NOOP_DESTROY;\n    };\n\n    ConstRoot.prototype.notify = function notify() {};\n\n    ConstRoot.prototype.value = function value() {\n        return this.inner;\n    };\n\n    ConstRoot.prototype.referenceFromParts = function referenceFromParts(_parts) {\n        throw new Error(\"Not implemented\");\n    };\n\n    ConstRoot.prototype.chainFor = function chainFor(_prop) {\n        throw new Error(\"Not implemented\");\n    };\n\n    ConstRoot.prototype.get = function get(prop) {\n        return new ConstPath(this.inner, prop);\n    };\n\n    return ConstRoot;\n}();\n\nvar ConstMeta /*implements IMeta*/ = function () {\n    function ConstMeta(object) {\n        _classCallCheck(this, ConstMeta);\n\n        this.object = object;\n    }\n\n    ConstMeta.prototype.root = function root() {\n        return new ConstRoot(this.object);\n    };\n\n    return ConstMeta;\n}();\n\nexport var CLASS_META = \"df8be4c8-4e89-44e2-a8f9-550c8dacdca7\";\nvar hasOwnProperty = Object.hasOwnProperty;\n\nvar Meta = function () {\n    function Meta(object, _ref) {\n        var RootReferenceFactory = _ref.RootReferenceFactory,\n            DefaultPathReferenceFactory = _ref.DefaultPathReferenceFactory;\n\n        _classCallCheck(this, Meta);\n\n        this.references = null;\n        this.slots = null;\n        this.referenceTypes = null;\n        this.propertyMetadata = null;\n        this.object = object;\n        this.RootReferenceFactory = RootReferenceFactory || RootReference;\n        this.DefaultPathReferenceFactory = DefaultPathReferenceFactory || PropertyReference;\n    }\n\n    Meta.for = function _for(obj) {\n        if (obj === null || obj === undefined) return new Meta(obj, {});\n        if (hasOwnProperty.call(obj, '_meta') && obj._meta) return obj._meta;\n        if (!Object.isExtensible(obj)) return new ConstMeta(obj);\n        var MetaToUse = Meta;\n        if (obj.constructor && obj.constructor[CLASS_META]) {\n            var classMeta = obj.constructor[CLASS_META];\n            MetaToUse = classMeta.InstanceMetaConstructor;\n        } else if (obj[CLASS_META]) {\n            MetaToUse = obj[CLASS_META].InstanceMetaConstructor;\n        }\n        return obj._meta = new MetaToUse(obj, {});\n    };\n\n    Meta.exists = function exists(obj) {\n        return typeof obj === 'object' && obj._meta;\n    };\n\n    Meta.metadataForProperty = function metadataForProperty(_key) {\n        return null;\n    };\n\n    Meta.prototype.addReference = function addReference(property, reference) {\n        var refs = this.references = this.references || dict();\n        var set = refs[property] = refs[property] || new DictSet();\n        set.add(reference);\n    };\n\n    Meta.prototype.addReferenceTypeFor = function addReferenceTypeFor(property, type) {\n        this.referenceTypes = this.referenceTypes || dict();\n        this.referenceTypes[property] = type;\n    };\n\n    Meta.prototype.referenceTypeFor = function referenceTypeFor(property) {\n        if (!this.referenceTypes) return PropertyReference;\n        return this.referenceTypes[property] || PropertyReference;\n    };\n\n    Meta.prototype.removeReference = function removeReference(property, reference) {\n        if (!this.references) return;\n        var set = this.references[property];\n        set.delete(reference);\n    };\n\n    Meta.prototype.getReferenceTypes = function getReferenceTypes() {\n        this.referenceTypes = this.referenceTypes || dict();\n        return this.referenceTypes;\n    };\n\n    Meta.prototype.referencesFor = function referencesFor(property) {\n        if (!this.references) return null;\n        return this.references[property];\n    };\n\n    Meta.prototype.getSlots = function getSlots() {\n        return this.slots = this.slots || dict();\n    };\n\n    Meta.prototype.root = function root() {\n        return this.rootCache = this.rootCache || new this.RootReferenceFactory(this.object);\n    };\n\n    return Meta;\n}();\n\nexport default Meta;\nexport function metaFor(obj) {\n    return Meta.for(obj);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport Meta from '../meta';\nimport { VOLATILE_TAG } from '@glimmer/reference';\nexport var PropertyReference = function () {\n    function PropertyReference(object, property, _outer) {\n        _classCallCheck(this, PropertyReference);\n\n        this.tag = VOLATILE_TAG;\n        this.object = object;\n        this.property = property;\n    }\n\n    PropertyReference.prototype.value = function value() {\n        return this.object[this.property];\n    };\n\n    PropertyReference.prototype.label = function label() {\n        return '[reference Property]';\n    };\n\n    return PropertyReference;\n}();\nexport function ComputedReferenceBlueprint(_property, dependencies) {\n    return function () {\n        function ComputedReference(object, property, outer) {\n            _classCallCheck(this, ComputedReference);\n\n            this.installed = false;\n            this.tag = VOLATILE_TAG;\n            this.object = object;\n            this.property = property;\n            this.dependencies = dependencies;\n            this.outer = outer;\n        }\n\n        ComputedReference.prototype.value = function value() {\n            if (!this.installed) {\n                var root = Meta.for(this.object).root();\n                this.dependencies.forEach(function (dep) {\n                    var ref = root.referenceFromParts(dep);\n                    ref.value();\n                });\n                this.installed = true;\n            }\n            return this.object[this.property];\n        };\n\n        ComputedReference.prototype.label = function label() {\n            return '[reference Computed]';\n        };\n\n        return ComputedReference;\n    }();\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY3JpcHRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZXNjcmlwdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQUFBSSxVQUFNLEFBQVMsQUFBQztBQUMzQixBQUFPLFNBQWEsQUFBWSxBQUFPLG9CQUFNLEFBQW9CLEFBQUM7QUFPbEUsQUFBTTtBQUtKLCtCQUFZLEFBQVcsUUFBRSxBQUFnQixVQUFFLEFBQThCOzs7QUFGbEUsYUFBRyxNQUFRLEFBQVksQUFBQztBQUc3QixBQUFJLGFBQUMsQUFBTSxTQUFHLEFBQU0sQUFBQztBQUNyQixBQUFJLGFBQUMsQUFBUSxXQUFHLEFBQVEsQUFBQyxBQUMzQjtBQUFDOztnQ0FFRCxBQUFLO0FBQUssQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQVEsQUFBQyxBQUFDLEFBQUM7QUFBQzs7Z0NBRTlDLEFBQUs7QUFDSCxBQUFNLGVBQUMsQUFBc0IsQUFBQyxBQUNoQztBQUFDLEFBQ0Y7Ozs7QUFFRCxBQUFNLDJDQUF3QyxBQUFjLFdBQUUsQUFBaUI7QUFDN0UsQUFBTSxBQUFDO0FBUUwsbUNBQVksQUFBVyxRQUFFLEFBQWdCLFVBQUUsQUFBNkI7OztBQUhoRSxpQkFBUyxZQUFHLEFBQUssQUFBQztBQUNuQixpQkFBRyxNQUFRLEFBQVksQUFBQztBQUc3QixBQUFJLGlCQUFDLEFBQU0sU0FBRyxBQUFNLEFBQUM7QUFDckIsQUFBSSxpQkFBQyxBQUFRLFdBQUcsQUFBUSxBQUFDO0FBQ3pCLEFBQUksaUJBQUMsQUFBWSxlQUFHLEFBQVksQUFBQztBQUNqQyxBQUFJLGlCQUFDLEFBQUssUUFBRyxBQUFLLEFBQUMsQUFDckI7QUFBQzs7b0NBRUQsQUFBSztBQUNILEFBQUUsQUFBQyxnQkFBQyxDQUFDLEFBQUksS0FBQyxBQUFTLEFBQUMsV0FBQyxBQUFDO0FBQ3BCLG9CQUFJLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBRyxJQUFDLEFBQUksS0FBQyxBQUFNLEFBQUMsUUFBQyxBQUFJLEFBQUUsQUFBQztBQUV4QyxBQUFJLHFCQUFDLEFBQVksYUFBQyxBQUFPLFFBQUMsQUFBRztBQUMzQix3QkFBSSxBQUFHLE1BQUcsQUFBSSxLQUFDLEFBQWtCLG1CQUFDLEFBQUcsQUFBQyxBQUFDO0FBQ3ZDLEFBQUcsd0JBQUMsQUFBSyxBQUFFLEFBQUMsQUFDZDtBQUFDLEFBQUMsQUFBQztBQUVILEFBQUkscUJBQUMsQUFBUyxZQUFHLEFBQUksQUFBQyxBQUN4QjtBQUFDO0FBRUQsQUFBTSxtQkFBQyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQUksS0FBQyxBQUFRLEFBQUMsQUFBQyxBQUNwQztBQUFDOztvQ0FFRCxBQUFLO0FBQ0gsQUFBTSxtQkFBQyxBQUFzQixBQUFDLEFBQ2hDO0FBQUMsQUFDRixBQUFDLEFBQ0o7Ozs7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNZXRhIGZyb20gJy4uL21ldGEnO1xuaW1wb3J0IHsgUmVmZXJlbmNlLCBWT0xBVElMRV9UQUcsIFRhZyB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBOb3RpZmlhYmxlUmVmZXJlbmNlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElubmVyUmVmZXJlbmNlRmFjdG9yeTxUPiB7XG4gIG5ldyAob2JqZWN0OiBhbnksIHByb3BlcnR5OiBzdHJpbmcsIG91dGVyOiBOb3RpZmlhYmxlUmVmZXJlbmNlPGFueT4pOiBSZWZlcmVuY2U8VD47XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eVJlZmVyZW5jZTxUPiBpbXBsZW1lbnRzIFJlZmVyZW5jZTxUPiB7XG4gIHByaXZhdGUgb2JqZWN0OiBhbnk7XG4gIHByaXZhdGUgcHJvcGVydHk6IHN0cmluZztcbiAgcHVibGljIHRhZzogVGFnID0gVk9MQVRJTEVfVEFHO1xuXG4gIGNvbnN0cnVjdG9yKG9iamVjdDogYW55LCBwcm9wZXJ0eTogc3RyaW5nLCBfb3V0ZXI6IE5vdGlmaWFibGVSZWZlcmVuY2U8VD4pIHtcbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcbiAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gIH1cblxuICB2YWx1ZSgpIHsgcmV0dXJuIHRoaXMub2JqZWN0W3RoaXMucHJvcGVydHldOyB9XG5cbiAgbGFiZWwoKSB7XG4gICAgcmV0dXJuICdbcmVmZXJlbmNlIFByb3BlcnR5XSc7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENvbXB1dGVkUmVmZXJlbmNlQmx1ZXByaW50PFQ+KF9wcm9wZXJ0eTogYW55LCBkZXBlbmRlbmNpZXM6IGFueSk6IElubmVyUmVmZXJlbmNlRmFjdG9yeTxUPiB7XG4gIHJldHVybiBjbGFzcyBDb21wdXRlZFJlZmVyZW5jZTxUPiBpbXBsZW1lbnRzIFJlZmVyZW5jZTxUPiB7XG4gICAgcHJpdmF0ZSBvYmplY3Q6IGFueTtcbiAgICBwcml2YXRlIHByb3BlcnR5OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBkZXBlbmRlbmNpZXM6IHN0cmluZ1tdW107XG4gICAgcHJpdmF0ZSBvdXRlcjogTm90aWZpYWJsZVJlZmVyZW5jZTxUPjtcbiAgICBwcml2YXRlIGluc3RhbGxlZCA9IGZhbHNlO1xuICAgIHB1YmxpYyB0YWc6IFRhZyA9IFZPTEFUSUxFX1RBRztcblxuICAgIGNvbnN0cnVjdG9yKG9iamVjdDogYW55LCBwcm9wZXJ0eTogc3RyaW5nLCBvdXRlcjogTm90aWZpYWJsZVJlZmVyZW5jZTxUPikge1xuICAgICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XG4gICAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcbiAgICAgIHRoaXMub3V0ZXIgPSBvdXRlcjtcbiAgICB9XG5cbiAgICB2YWx1ZSgpOiBUIHtcbiAgICAgIGlmICghdGhpcy5pbnN0YWxsZWQpIHtcbiAgICAgICAgbGV0IHJvb3QgPSBNZXRhLmZvcih0aGlzLm9iamVjdCkucm9vdCgpO1xuXG4gICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzLmZvckVhY2goZGVwID0+IHtcbiAgICAgICAgICBsZXQgcmVmID0gcm9vdC5yZWZlcmVuY2VGcm9tUGFydHMoZGVwKTtcbiAgICAgICAgICByZWYudmFsdWUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pbnN0YWxsZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5vYmplY3RbdGhpcy5wcm9wZXJ0eV07XG4gICAgfVxuXG4gICAgbGFiZWwoKSB7XG4gICAgICByZXR1cm4gJ1tyZWZlcmVuY2UgQ29tcHV0ZWRdJztcbiAgICB9XG4gIH07XG59XG4iXX0=","// import { metaFor } from './meta';\n// import { intern } from '@glimmer/util';\n// import { metaFor } from './meta';\nexport function setProperty(parent, property, val) {\n    // let rootProp = metaFor(parent).root().chainFor(property));\n    // let referencesToNotify = metaFor(parent).referencesFor(property));\n    parent[property] = val;\n    // if (referencesToNotify) {\n    //   referencesToNotify.forEach(function(ref) { ref.notify(); });\n    // }\n    // if (rootProp) rootProp.notify();\n}\nexport function notifyProperty(_parent, _property) {\n    // let rootProp = metaFor(parent).root().chainFor(property));\n    // let referencesToNotify = metaFor(parent).referencesFor(property));\n    // if (referencesToNotify) {\n    //   referencesToNotify.forEach(function(ref) { ref.notify(); });\n    // }\n    // if (rootProp) rootProp.notify();\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsib2JqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEFBQW9DO0FBQ3BDLEFBQTBDO0FBRDFDLEFBR0EsQUFIb0M7QUFHcEMsQUFBTSw0QkFBc0IsQUFBVyxRQUFFLEFBQWdCLFVBQUUsQUFBUTtBQUNqRSxBQUE2RDtBQUU3RCxBQUFxRTtBQUVyRSxBQUFNLFdBQUMsQUFBUSxBQUFDLFlBQUcsQUFBRyxBQUFDO0FBRXZCLEFBQTRCO0FBQzVCLEFBQWlFO0FBQ2pFLEFBQUk7QUFFSixBQUFtQyxBQUNyQztBQUFDO0FBRUQsQUFBTSwrQkFBeUIsQUFBWSxTQUFFLEFBQWlCO0FBQzVELEFBQTZEO0FBRTdELEFBQXFFO0FBRXJFLEFBQTRCO0FBQzVCLEFBQWlFO0FBQ2pFLEFBQUk7QUFFSixBQUFtQyxBQUNyQztBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHsgbWV0YUZvciB9IGZyb20gJy4vbWV0YSc7XG4vLyBpbXBvcnQgeyBpbnRlcm4gfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFByb3BlcnR5KHBhcmVudDogYW55LCBwcm9wZXJ0eTogc3RyaW5nLCB2YWw6IGFueSkge1xuICAvLyBsZXQgcm9vdFByb3AgPSBtZXRhRm9yKHBhcmVudCkucm9vdCgpLmNoYWluRm9yKHByb3BlcnR5KSk7XG5cbiAgLy8gbGV0IHJlZmVyZW5jZXNUb05vdGlmeSA9IG1ldGFGb3IocGFyZW50KS5yZWZlcmVuY2VzRm9yKHByb3BlcnR5KSk7XG5cbiAgcGFyZW50W3Byb3BlcnR5XSA9IHZhbDtcblxuICAvLyBpZiAocmVmZXJlbmNlc1RvTm90aWZ5KSB7XG4gIC8vICAgcmVmZXJlbmNlc1RvTm90aWZ5LmZvckVhY2goZnVuY3Rpb24ocmVmKSB7IHJlZi5ub3RpZnkoKTsgfSk7XG4gIC8vIH1cblxuICAvLyBpZiAocm9vdFByb3ApIHJvb3RQcm9wLm5vdGlmeSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm90aWZ5UHJvcGVydHkoX3BhcmVudDogYW55LCBfcHJvcGVydHk6IHN0cmluZykge1xuICAvLyBsZXQgcm9vdFByb3AgPSBtZXRhRm9yKHBhcmVudCkucm9vdCgpLmNoYWluRm9yKHByb3BlcnR5KSk7XG5cbiAgLy8gbGV0IHJlZmVyZW5jZXNUb05vdGlmeSA9IG1ldGFGb3IocGFyZW50KS5yZWZlcmVuY2VzRm9yKHByb3BlcnR5KSk7XG5cbiAgLy8gaWYgKHJlZmVyZW5jZXNUb05vdGlmeSkge1xuICAvLyAgIHJlZmVyZW5jZXNUb05vdGlmeS5mb3JFYWNoKGZ1bmN0aW9uKHJlZikgeyByZWYubm90aWZ5KCk7IH0pO1xuICAvLyB9XG5cbiAgLy8gaWYgKHJvb3RQcm9wKSByb290UHJvcC5ub3RpZnkoKTtcbn1cbiJdfQ==","import {\n  Registry,\n  RegistryAccessor,\n  RegistrationOptions,\n  Injection,\n  Resolver\n} from '@glimmer/di';\n\nfunction isTypeSpecifier(specifier: string) {\n  return specifier.indexOf(':') === -1;\n}\n\nexport default class ApplicationRegistry implements RegistryAccessor {\n  private _registry: Registry;\n  private _resolver: Resolver;\n\n  constructor(registry: Registry, resolver: Resolver) {\n    this._registry = registry;\n    this._resolver = resolver;\n  }\n\n  register(specifier: string, factory: any, options?: RegistrationOptions): void {\n    let normalizedSpecifier = this._toAbsoluteSpecifier(specifier);\n    this._registry.register(normalizedSpecifier, factory, options);\n  }\n\n  registration(specifier: string): any {\n    let normalizedSpecifier = this._toAbsoluteSpecifier(specifier);\n    return this._registry.registration(normalizedSpecifier);\n  }\n\n  unregister(specifier: string) {\n    let normalizedSpecifier = this._toAbsoluteSpecifier(specifier);\n    this._registry.unregister(normalizedSpecifier);\n  }\n\n  registerOption(specifier: string, option: string, value: any): void {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    this._registry.registerOption(normalizedSpecifier, option, value);\n  }\n\n  registeredOption(specifier: string, option: string): any {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    return this._registry.registeredOption(normalizedSpecifier, option);\n  }\n\n  registeredOptions(specifier: string): any {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    return this._registry.registeredOptions(normalizedSpecifier);\n  }\n\n  unregisterOption(specifier: string, option: string): void {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    this._registry.unregisterOption(normalizedSpecifier, option);\n  }\n\n  registerInjection(specifier: string, property: string, injection: string): void {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    let normalizedInjection = this._toAbsoluteSpecifier(injection);\n    this._registry.registerInjection(normalizedSpecifier, property, normalizedInjection);\n  }\n\n  registeredInjections(specifier: string): Injection[] {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    return this._registry.registeredInjections(normalizedSpecifier);\n  }\n\n  private _toAbsoluteSpecifier(specifier: string, referrer?: string): string {\n    return this._resolver.identify(specifier, referrer);\n  }\n\n  private _toAbsoluteOrTypeSpecifier(specifier: string): string {\n    if (isTypeSpecifier(specifier)) {\n      return specifier;\n    } else {\n      return this._toAbsoluteSpecifier(specifier);\n    }\n  }\n}","// There is a small whitelist of namespaced attributes specially\n// enumerated in\n// https://www.w3.org/TR/html/syntax.html#attributes-0\n//\n// > When a foreign element has one of the namespaced attributes given by\n// > the local name and namespace of the first and second cells of a row\n// > from the following table, it must be written using the name given by\n// > the third cell from the same row.\n//\n// In all other cases, colons are interpreted as a regular character\n// with no special meaning:\n//\n// > No other namespaced attribute can be expressed in the HTML syntax.\nvar XLINK = 'http://www.w3.org/1999/xlink';\nvar XML = 'http://www.w3.org/XML/1998/namespace';\nvar XMLNS = 'http://www.w3.org/2000/xmlns/';\nvar WHITELIST = {\n    'xlink:actuate': XLINK,\n    'xlink:arcrole': XLINK,\n    'xlink:href': XLINK,\n    'xlink:role': XLINK,\n    'xlink:show': XLINK,\n    'xlink:title': XLINK,\n    'xlink:type': XLINK,\n    'xml:base': XML,\n    'xml:lang': XML,\n    'xml:space': XML,\n    'xmlns': XMLNS,\n    'xmlns:xlink': XMLNS\n};\nexport function getAttrNamespace(attrName) {\n    return WHITELIST[attrName] || null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZXNwYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5hbWVzcGFjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBZ0U7QUFDaEUsQUFBZ0I7QUFDaEIsQUFBc0Q7QUFDdEQsQUFBRTtBQUNGLEFBQXlFO0FBQ3pFLEFBQXdFO0FBQ3hFLEFBQXlFO0FBQ3pFLEFBQXNDO0FBQ3RDLEFBQUU7QUFDRixBQUFvRTtBQUNwRSxBQUEyQjtBQUMzQixBQUFFO0FBQ0YsQUFBdUU7QUFFdkUsSUFBTSxBQUFLLFFBQUcsQUFBOEIsQUFBQztBQUM3QyxJQUFNLEFBQUcsTUFBRyxBQUFzQyxBQUFDO0FBQ25ELElBQU0sQUFBSyxRQUFHLEFBQStCLEFBQUM7QUFFOUMsSUFBTSxBQUFTO0FBQ2IsQUFBZSxxQkFBRSxBQUFLO0FBQ3RCLEFBQWUscUJBQUUsQUFBSztBQUN0QixBQUFZLGtCQUFFLEFBQUs7QUFDbkIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVksa0JBQUUsQUFBSztBQUNuQixBQUFhLG1CQUFFLEFBQUs7QUFDcEIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVcsaUJBQUUsQUFBRztBQUNoQixBQUFPLGFBQUUsQUFBSztBQUNkLEFBQWEsbUJBQUUsQUFBSyxBQUNyQixBQUFDO0FBYmdCO0FBZWxCLEFBQU0saUNBQTJCLEFBQWdCO0FBQy9DLEFBQU0sV0FBQyxBQUFTLFVBQUMsQUFBUSxBQUFDLGFBQUksQUFBSSxBQUFDLEFBQ3JDO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGVyZSBpcyBhIHNtYWxsIHdoaXRlbGlzdCBvZiBuYW1lc3BhY2VkIGF0dHJpYnV0ZXMgc3BlY2lhbGx5XG4vLyBlbnVtZXJhdGVkIGluXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbC9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTBcbi8vXG4vLyA+IFdoZW4gYSBmb3JlaWduIGVsZW1lbnQgaGFzIG9uZSBvZiB0aGUgbmFtZXNwYWNlZCBhdHRyaWJ1dGVzIGdpdmVuIGJ5XG4vLyA+IHRoZSBsb2NhbCBuYW1lIGFuZCBuYW1lc3BhY2Ugb2YgdGhlIGZpcnN0IGFuZCBzZWNvbmQgY2VsbHMgb2YgYSByb3dcbi8vID4gZnJvbSB0aGUgZm9sbG93aW5nIHRhYmxlLCBpdCBtdXN0IGJlIHdyaXR0ZW4gdXNpbmcgdGhlIG5hbWUgZ2l2ZW4gYnlcbi8vID4gdGhlIHRoaXJkIGNlbGwgZnJvbSB0aGUgc2FtZSByb3cuXG4vL1xuLy8gSW4gYWxsIG90aGVyIGNhc2VzLCBjb2xvbnMgYXJlIGludGVycHJldGVkIGFzIGEgcmVndWxhciBjaGFyYWN0ZXJcbi8vIHdpdGggbm8gc3BlY2lhbCBtZWFuaW5nOlxuLy9cbi8vID4gTm8gb3RoZXIgbmFtZXNwYWNlZCBhdHRyaWJ1dGUgY2FuIGJlIGV4cHJlc3NlZCBpbiB0aGUgSFRNTCBzeW50YXguXG5cbmNvbnN0IFhMSU5LID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuY29uc3QgWE1MID0gJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSc7XG5jb25zdCBYTUxOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLyc7XG5cbmNvbnN0IFdISVRFTElTVCA9IHtcbiAgJ3hsaW5rOmFjdHVhdGUnOiBYTElOSyxcbiAgJ3hsaW5rOmFyY3JvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOmhyZWYnOiBYTElOSyxcbiAgJ3hsaW5rOnJvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOnNob3cnOiBYTElOSyxcbiAgJ3hsaW5rOnRpdGxlJzogWExJTkssXG4gICd4bGluazp0eXBlJzogWExJTkssXG4gICd4bWw6YmFzZSc6IFhNTCxcbiAgJ3htbDpsYW5nJzogWE1MLFxuICAneG1sOnNwYWNlJzogWE1MLFxuICAneG1sbnMnOiBYTUxOUyxcbiAgJ3htbG5zOnhsaW5rJzogWE1MTlNcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdHRyTmFtZXNwYWNlKGF0dHJOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIFdISVRFTElTVFthdHRyTmFtZV0gfHwgbnVsbDtcbn0iXX0=","// import Logger from './logger';\n// let alreadyWarned = false;\n// import Logger from './logger';\nexport function debugAssert(test, msg) {\n    // if (!alreadyWarned) {\n    //   alreadyWarned = true;\n    //   Logger.warn(\"Don't leave debug assertions on in public builds\");\n    // }\n    if (!test) {\n        throw new Error(msg || \"assertion failure\");\n    }\n}\nexport function prodAssert() {}\nexport default debugAssert;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEFBQWlDO0FBRWpDLEFBQTZCO0FBRjdCLEFBSUEsQUFKaUM7QUFJakMsQUFBTSw0QkFBc0IsQUFBUyxNQUFFLEFBQVc7QUFDaEQsQUFBd0I7QUFDeEIsQUFBMEI7QUFDMUIsQUFBcUU7QUFDckUsQUFBSTtBQUVKLEFBQUUsQUFBQyxRQUFDLENBQUMsQUFBSSxBQUFDLE1BQUMsQUFBQztBQUNWLGNBQU0sSUFBSSxBQUFLLE1BQUMsQUFBRyxPQUFJLEFBQW1CLEFBQUMsQUFBQyxBQUM5QztBQUFDLEFBQ0g7QUFBQztBQUVELEFBQU0sNkJBQXdCLENBQUM7QUFFL0IsZUFBZSxBQUFXLEFBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuLy8gbGV0IGFscmVhZHlXYXJuZWQgPSBmYWxzZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnQXNzZXJ0KHRlc3Q6IGFueSwgbXNnOiBzdHJpbmcpIHtcbiAgLy8gaWYgKCFhbHJlYWR5V2FybmVkKSB7XG4gIC8vICAgYWxyZWFkeVdhcm5lZCA9IHRydWU7XG4gIC8vICAgTG9nZ2VyLndhcm4oXCJEb24ndCBsZWF2ZSBkZWJ1ZyBhc3NlcnRpb25zIG9uIGluIHB1YmxpYyBidWlsZHNcIik7XG4gIC8vIH1cblxuICBpZiAoIXRlc3QpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8IFwiYXNzZXJ0aW9uIGZhaWx1cmVcIik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2RBc3NlcnQoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBkZWJ1Z0Fzc2VydDtcbiJdfQ==","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n    LogLevel[LogLevel[\"Warn\"] = 2] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 3] = \"Error\";\n})(LogLevel || (LogLevel = {}));\n\nvar NullConsole = function () {\n    function NullConsole() {\n        _classCallCheck(this, NullConsole);\n    }\n\n    NullConsole.prototype.log = function log(_message) {};\n\n    NullConsole.prototype.warn = function warn(_message) {};\n\n    NullConsole.prototype.error = function error(_message) {};\n\n    NullConsole.prototype.trace = function trace() {};\n\n    return NullConsole;\n}();\n\nvar ALWAYS = void 0;\nexport var Logger = function () {\n    function Logger(_ref) {\n        var console = _ref.console,\n            level = _ref.level;\n\n        _classCallCheck(this, Logger);\n\n        this.f = ALWAYS;\n        this.force = ALWAYS;\n        this.console = console;\n        this.level = level;\n    }\n\n    Logger.prototype.skipped = function skipped(level) {\n        return level < this.level;\n    };\n\n    Logger.prototype.trace = function trace(message) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            _ref2$stackTrace = _ref2.stackTrace,\n            stackTrace = _ref2$stackTrace === undefined ? false : _ref2$stackTrace;\n\n        if (this.skipped(LogLevel.Trace)) return;\n        this.console.log(message);\n        if (stackTrace) this.console.trace();\n    };\n\n    Logger.prototype.debug = function debug(message) {\n        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            _ref3$stackTrace = _ref3.stackTrace,\n            stackTrace = _ref3$stackTrace === undefined ? false : _ref3$stackTrace;\n\n        if (this.skipped(LogLevel.Debug)) return;\n        this.console.log(message);\n        if (stackTrace) this.console.trace();\n    };\n\n    Logger.prototype.warn = function warn(message) {\n        var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n            _ref4$stackTrace = _ref4.stackTrace,\n            stackTrace = _ref4$stackTrace === undefined ? false : _ref4$stackTrace;\n\n        if (this.skipped(LogLevel.Warn)) return;\n        this.console.warn(message);\n        if (stackTrace) this.console.trace();\n    };\n\n    Logger.prototype.error = function error(message) {\n        if (this.skipped(LogLevel.Error)) return;\n        this.console.error(message);\n    };\n\n    return Logger;\n}();\nvar _console = typeof console === 'undefined' ? new NullConsole() : console;\nALWAYS = new Logger({ console: _console, level: LogLevel.Trace });\nvar LOG_LEVEL = LogLevel.Debug;\nexport default new Logger({ console: _console, level: LOG_LEVEL });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsQUFBTSxPQUFOLElBQVksQUFLWDtBQUxELFdBQVksQUFBUTtBQUNsQixzQ0FBSztBQUNMLHNDQUFLO0FBQ0wscUNBQUk7QUFDSixzQ0FBSyxBQUNQO0FBQUMsR0FMVyxBQUFRLGFBQVIsQUFBUSxXQUtuQixBQVNEOzs7Ozs7OzBCQUNFLEFBQUcsbUJBQUMsQUFBZ0IsVUFBRyxDQUFDOzswQkFDeEIsQUFBSSxxQkFBQyxBQUFnQixVQUFHLENBQUM7OzBCQUN6QixBQUFLLHVCQUFDLEFBQWdCLFVBQUcsQ0FBQzs7MEJBQzFCLEFBQUsseUJBQUksQ0FBQyxBQUNYOzs7OztBQUVELElBQUksQUFBYyxBQUFDO0FBRW5CLEFBQU07QUFNSixBQUFZO1lBQUUsQUFBTztZQUFFLEFBQUssQUFBeUM7Ozs7QUFIOUQsYUFBQyxJQUFHLEFBQU0sQUFBQztBQUNYLGFBQUssUUFBRyxBQUFNLEFBQUM7QUFHcEIsQUFBSSxhQUFDLEFBQU8sVUFBRyxBQUFPLEFBQUM7QUFDdkIsQUFBSSxhQUFDLEFBQUssUUFBRyxBQUFLLEFBQUMsQUFDckI7QUFBQzs7cUJBRU8sQUFBTywyQkFBQyxBQUFlO0FBQzdCLEFBQU0sZUFBQyxBQUFLLFFBQUcsQUFBSSxLQUFDLEFBQUssQUFBQyxBQUM1QjtBQUFDOztxQkFFRCxBQUFLLHVCQUFDLEFBQWEsQUFBRTt3RkFBeUIsQUFBRTs7WUFBekIsQUFBVSw4Q0FBRyxBQUFLLEFBQUU7O0FBQ3pDLEFBQUUsQUFBQyxZQUFDLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBUSxTQUFDLEFBQUssQUFBQyxBQUFDLFFBQUMsQUFBTSxBQUFDO0FBQ3pDLEFBQUksYUFBQyxBQUFPLFFBQUMsQUFBRyxJQUFDLEFBQU8sQUFBQyxBQUFDO0FBQzFCLEFBQUUsQUFBQyxZQUFDLEFBQVUsQUFBQyxZQUFDLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBSyxBQUFFLEFBQUMsQUFDdkM7QUFBQzs7cUJBRUQsQUFBSyx1QkFBQyxBQUFZLEFBQUU7d0ZBQXlCLEFBQUU7O1lBQXpCLEFBQVUsOENBQUcsQUFBSyxBQUFFOztBQUN4QyxBQUFFLEFBQUMsWUFBQyxBQUFJLEtBQUMsQUFBTyxRQUFDLEFBQVEsU0FBQyxBQUFLLEFBQUMsQUFBQyxRQUFDLEFBQU0sQUFBQztBQUN6QyxBQUFJLGFBQUMsQUFBTyxRQUFDLEFBQUcsSUFBQyxBQUFPLEFBQUMsQUFBQztBQUMxQixBQUFFLEFBQUMsWUFBQyxBQUFVLEFBQUMsWUFBQyxBQUFJLEtBQUMsQUFBTyxRQUFDLEFBQUssQUFBRSxBQUFDLEFBQ3ZDO0FBQUM7O3FCQUVELEFBQUkscUJBQUMsQUFBWSxBQUFFO3dGQUF5QixBQUFFOztZQUF6QixBQUFVLDhDQUFHLEFBQUssQUFBRTs7QUFDdkMsQUFBRSxBQUFDLFlBQUMsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFRLFNBQUMsQUFBSSxBQUFDLEFBQUMsT0FBQyxBQUFNLEFBQUM7QUFDeEMsQUFBSSxhQUFDLEFBQU8sUUFBQyxBQUFJLEtBQUMsQUFBTyxBQUFDLEFBQUM7QUFDM0IsQUFBRSxBQUFDLFlBQUMsQUFBVSxBQUFDLFlBQUMsQUFBSSxLQUFDLEFBQU8sUUFBQyxBQUFLLEFBQUUsQUFBQyxBQUN2QztBQUFDOztxQkFFRCxBQUFLLHVCQUFDLEFBQW9CO0FBQ3hCLEFBQUUsQUFBQyxZQUFDLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBUSxTQUFDLEFBQUssQUFBQyxBQUFDLFFBQUMsQUFBTSxBQUFDO0FBQ3pDLEFBQUksYUFBQyxBQUFPLFFBQUMsQUFBSyxNQUFDLEFBQU8sQUFBQyxBQUFDLEFBQzlCO0FBQUMsQUFDRjs7OztBQUVELElBQUksQUFBUSxXQUFJLE9BQU8sQUFBTyxZQUFLLEFBQVcsQUFBQyxXQUFoQyxHQUFtQyxJQUFJLEFBQVcsQUFBRSxnQkFBRyxBQUFPLEFBQUM7QUFFOUUsQUFBTSxTQUFHLElBQUksQUFBTSxPQUFDLEVBQUUsQUFBTyxTQUFFLEFBQVEsVUFBRSxBQUFLLE9BQUUsQUFBUSxTQUFDLEFBQUssQUFBRSxBQUFDLEFBQUM7QUFDbEUsSUFBTSxBQUFTLFlBQUcsQUFBUSxTQUFDLEFBQUssQUFBQztBQUVqQyxlQUFlLElBQUksQUFBTSxPQUFDLEVBQUUsQUFBTyxTQUFFLEFBQVEsVUFBRSxBQUFLLE9BQUUsQUFBUyxBQUFFLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgVHJhY2UsXG4gIERlYnVnLFxuICBXYXJuLFxuICBFcnJvclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnNvbGUge1xuICBsb2cobWVzc2FnZTogc3RyaW5nKTogdm9pZDtcbiAgd2FybihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkO1xuICBlcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkO1xuICB0cmFjZSgpOiB2b2lkO1xufVxuXG5jbGFzcyBOdWxsQ29uc29sZSB7XG4gIGxvZyhfbWVzc2FnZTogc3RyaW5nKSB7fVxuICB3YXJuKF9tZXNzYWdlOiBzdHJpbmcpIHt9XG4gIGVycm9yKF9tZXNzYWdlOiBzdHJpbmcpIHt9XG4gIHRyYWNlKCkge31cbn1cblxubGV0IEFMV0FZUzogTG9nZ2VyO1xuXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcbiAgcHJpdmF0ZSBjb25zb2xlOiBDb25zb2xlO1xuICBwdWJsaWMgbGV2ZWw6IExvZ0xldmVsO1xuICBwdWJsaWMgZiA9IEFMV0FZUztcbiAgcHVibGljIGZvcmNlID0gQUxXQVlTO1xuXG4gIGNvbnN0cnVjdG9yKHsgY29uc29sZSwgbGV2ZWwgfTogeyBjb25zb2xlOiBDb25zb2xlLCBsZXZlbDogTG9nTGV2ZWwgfSkge1xuICAgIHRoaXMuY29uc29sZSA9IGNvbnNvbGU7XG4gICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICB9XG5cbiAgcHJpdmF0ZSBza2lwcGVkKGxldmVsOiBMb2dMZXZlbCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBsZXZlbCA8IHRoaXMubGV2ZWw7XG4gIH1cblxuICB0cmFjZShtZXNzYWdlPzogYW55LCB7IHN0YWNrVHJhY2UgPSBmYWxzZSB9ID0ge30pIHtcbiAgICBpZiAodGhpcy5za2lwcGVkKExvZ0xldmVsLlRyYWNlKSkgcmV0dXJuO1xuICAgIHRoaXMuY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgaWYgKHN0YWNrVHJhY2UpIHRoaXMuY29uc29sZS50cmFjZSgpO1xuICB9XG5cbiAgZGVidWcobWVzc2FnZTogYW55LCB7IHN0YWNrVHJhY2UgPSBmYWxzZSB9ID0ge30pIHtcbiAgICBpZiAodGhpcy5za2lwcGVkKExvZ0xldmVsLkRlYnVnKSkgcmV0dXJuO1xuICAgIHRoaXMuY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgaWYgKHN0YWNrVHJhY2UpIHRoaXMuY29uc29sZS50cmFjZSgpO1xuICB9XG5cbiAgd2FybihtZXNzYWdlOiBhbnksIHsgc3RhY2tUcmFjZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgIGlmICh0aGlzLnNraXBwZWQoTG9nTGV2ZWwuV2FybikpIHJldHVybjtcbiAgICB0aGlzLmNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICBpZiAoc3RhY2tUcmFjZSkgdGhpcy5jb25zb2xlLnRyYWNlKCk7XG4gIH1cblxuICBlcnJvcihtZXNzYWdlOiBhbnkgfCBhbnlbXSkge1xuICAgIGlmICh0aGlzLnNraXBwZWQoTG9nTGV2ZWwuRXJyb3IpKSByZXR1cm47XG4gICAgdGhpcy5jb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5cbmxldCBfY29uc29sZSA9ICh0eXBlb2YgY29uc29sZSA9PT0gJ3VuZGVmaW5lZCcpID8gbmV3IE51bGxDb25zb2xlKCkgOiBjb25zb2xlO1xuXG5BTFdBWVMgPSBuZXcgTG9nZ2VyKHsgY29uc29sZTogX2NvbnNvbGUsIGxldmVsOiBMb2dMZXZlbC5UcmFjZSB9KTtcbmNvbnN0IExPR19MRVZFTCA9IExvZ0xldmVsLkRlYnVnO1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgTG9nZ2VyKHsgY29uc29sZTogX2NvbnNvbGUsIGxldmVsOiBMT0dfTEVWRUwgfSk7XG4iXX0=","var objKeys = Object.keys;\n\nexport function assign(obj) {\n    for (var i = 1; i < arguments.length; i++) {\n        var assignment = arguments[i];\n        if (assignment === null || typeof assignment !== 'object') continue;\n        var keys = objKeys(assignment);\n        for (var j = 0; j < keys.length; j++) {\n            var key = keys[j];\n            obj[key] = assignment[key];\n        }\n    }\n    return obj;\n}\nexport function fillNulls(count) {\n    var arr = new Array(count);\n    for (var i = 0; i < count; i++) {\n        arr[i] = null;\n    }\n    return arr;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsib2JqZWN0LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJJQUFjLEFBQU8sQUFBRSxVQUFHLEFBQU0sQUFBQyxPQUF6QixBQUFJOztBQVNaLEFBQU0sdUJBQWlCLEFBQVE7QUFDN0IsQUFBRyxBQUFDLFNBQUMsSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFTLFVBQUMsQUFBTSxRQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUM7QUFDMUMsWUFBSSxBQUFVLGFBQUcsQUFBUyxVQUFDLEFBQUMsQUFBQyxBQUFDO0FBQzlCLEFBQUUsQUFBQyxZQUFDLEFBQVUsZUFBSyxBQUFJLFFBQUksT0FBTyxBQUFVLGVBQUssQUFBUSxBQUFDLFVBQUMsQUFBUSxBQUFDO0FBQ3BFLFlBQUksQUFBSSxPQUFHLEFBQU8sUUFBQyxBQUFVLEFBQUMsQUFBQztBQUMvQixBQUFHLEFBQUMsYUFBQyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQUksS0FBQyxBQUFNLFFBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQztBQUNyQyxnQkFBSSxBQUFHLE1BQUcsQUFBSSxLQUFDLEFBQUMsQUFBQyxBQUFDO0FBQ2xCLEFBQUcsZ0JBQUMsQUFBRyxBQUFDLE9BQUcsQUFBVSxXQUFDLEFBQUcsQUFBQyxBQUFDLEFBQzdCO0FBQUMsQUFDSDtBQUFDO0FBQ0QsQUFBTSxXQUFDLEFBQUcsQUFBQyxBQUNiO0FBQUM7QUFFRCxBQUFNLDBCQUF1QixBQUFhO0FBQ3hDLFFBQUksQUFBRyxNQUFHLElBQUksQUFBSyxNQUFDLEFBQUssQUFBQyxBQUFDO0FBRTNCLEFBQUcsQUFBQyxTQUFDLElBQUksQUFBQyxJQUFDLEFBQUMsR0FBRSxBQUFDLElBQUMsQUFBSyxPQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUM7QUFDM0IsQUFBRyxZQUFDLEFBQUMsQUFBQyxLQUFHLEFBQUksQUFBQyxBQUNoQjtBQUFDO0FBRUQsQUFBTSxXQUFDLEFBQUcsQUFBQyxBQUNiO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGtleXM6IG9iaktleXMgfSA9IE9iamVjdDtcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbjxULCBVPihvYmo6IFQsIGFzc2lnbm1lbnRzOiBVKTogVCAmIFU7XG5leHBvcnQgZnVuY3Rpb24gYXNzaWduPFQsIFUsIFY+KG9iajogVCwgYTogVSwgYjogVik6IFQgJiBVICYgVjtcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ248VCwgVSwgViwgVz4ob2JqOiBULCBhOiBVLCBiOiBWLCBjOiBXKTogVCAmIFUgJiBWICYgVztcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ248VCwgVSwgViwgVywgWD4ob2JqOiBULCBhOiBVLCBiOiBWLCBjOiBXLCBkOiBYKTogVCAmIFUgJiBWICYgVyAmIFg7XG5leHBvcnQgZnVuY3Rpb24gYXNzaWduPFQsIFUsIFYsIFcsIFgsIFk+KG9iajogVCwgYTogVSwgYjogViwgYzogVywgZDogWCwgZTogWSk6IFQgJiBVICYgViAmIFcgJiBYICYgWTtcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ248VCwgVSwgViwgVywgWCwgWSwgWj4ob2JqOiBULCBhOiBVLCBiOiBWLCBjOiBXLCBkOiBYLCBlOiBZLCBmOiBaKTogVCAmIFUgJiBWICYgVyAmIFggJiBZICYgWjtcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0OiBhbnksIC4uLmFyZ3M6IGFueVtdKTogYW55O1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbihvYmo6IGFueSkge1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBhc3NpZ25tZW50ID0gYXJndW1lbnRzW2ldO1xuICAgIGlmIChhc3NpZ25tZW50ID09PSBudWxsIHx8IHR5cGVvZiBhc3NpZ25tZW50ICE9PSAnb2JqZWN0JykgY29udGludWU7XG4gICAgbGV0IGtleXMgPSBvYmpLZXlzKGFzc2lnbm1lbnQpO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwga2V5cy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IGtleSA9IGtleXNbal07XG4gICAgICBvYmpba2V5XSA9IGFzc2lnbm1lbnRba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxOdWxsczxUPihjb3VudDogbnVtYmVyKTogVFtdIHtcbiAgbGV0IGFyciA9IG5ldyBBcnJheShjb3VudCk7XG5cbiAgZm9yIChsZXQgaT0wOyBpPGNvdW50OyBpKyspIHtcbiAgICBhcnJbaV0gPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn0iXX0=","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { ensureGuid } from './guid';\nvar proto = Object.create(null, {\n    // without this, we will always still end up with (new\n    // EmptyObject()).constructor === Object\n    constructor: {\n        value: undefined,\n        enumerable: false,\n        writable: true\n    }\n});\nfunction EmptyObject() {}\nEmptyObject.prototype = proto;\nexport function dict() {\n    // let d = Object.create(null);\n    // d.x = 1;\n    // delete d.x;\n    // return d;\n    return new EmptyObject();\n}\nexport var DictSet = function () {\n    function DictSet() {\n        _classCallCheck(this, DictSet);\n\n        this.dict = dict();\n    }\n\n    DictSet.prototype.add = function add(obj) {\n        if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;\n        return this;\n    };\n\n    DictSet.prototype.delete = function _delete(obj) {\n        if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];\n    };\n\n    DictSet.prototype.forEach = function forEach(callback) {\n        var dict = this.dict;\n\n        Object.keys(dict).forEach(function (key) {\n            return callback(dict[key]);\n        });\n    };\n\n    DictSet.prototype.toArray = function toArray() {\n        return Object.keys(this.dict);\n    };\n\n    return DictSet;\n}();\nexport var Stack = function () {\n    function Stack() {\n        _classCallCheck(this, Stack);\n\n        this.stack = [];\n        this.current = null;\n    }\n\n    Stack.prototype.toArray = function toArray() {\n        return this.stack;\n    };\n\n    Stack.prototype.push = function push(item) {\n        this.current = item;\n        this.stack.push(item);\n    };\n\n    Stack.prototype.pop = function pop() {\n        var item = this.stack.pop();\n        var len = this.stack.length;\n        this.current = len === 0 ? null : this.stack[len - 1];\n        return item === undefined ? null : item;\n    };\n\n    Stack.prototype.isEmpty = function isEmpty() {\n        return this.stack.length === 0;\n    };\n\n    return Stack;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLEFBQU8sU0FBVyxBQUFVLEFBQUUsa0JBQU0sQUFBUSxBQUFDO0FBYTdDLElBQUksQUFBSyxlQUFVLEFBQU0sT0FBQyxBQUFJO0FBQzVCLEFBQXNEO0FBQ3RELEFBQXdDO0FBQ3hDLEFBQVc7QUFDVCxBQUFLLGVBQUUsQUFBUztBQUNoQixBQUFVLG9CQUFFLEFBQUs7QUFDakIsQUFBUSxrQkFBRSxBQUFJLEFBQ2YsQUFDRixBQUFDLEFBQUM7QUFMWTtBQUhpQixDQUFwQixBQUFNO0FBVWxCLHVCQUF3QixDQUFDO0FBQ3pCLEFBQVcsWUFBQyxBQUFTLFlBQUcsQUFBSyxBQUFDO0FBRTlCLEFBQU07QUFDSixBQUErQjtBQUMvQixBQUFXO0FBQ1gsQUFBYztBQUNkLEFBQVk7QUFDWixBQUFNLFdBQUMsSUFBSyxBQUFtQixBQUFFLEFBQUMsQUFDcEM7QUFBQztBQUlELEFBQU07QUFHSjs7O0FBQ0UsQUFBSSxhQUFDLEFBQUksT0FBRyxBQUFJLEFBQUssQUFBQyxBQUN4QjtBQUFDOztzQkFFRCxBQUFHLG1CQUFDLEFBQU07QUFDUixBQUFFLEFBQUMsWUFBQyxPQUFPLEFBQUcsUUFBSyxBQUFRLEFBQUMsVUFBQyxBQUFJLEtBQUMsQUFBSSxLQUFNLEFBQUcsQUFBQyxPQUFHLEFBQUcsQUFBQyxBQUN2RCxBQUFJLFNBQUMsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFVLFdBQU0sQUFBRyxBQUFDLEFBQUMsUUFBRyxBQUFHLEFBQUM7QUFDM0MsQUFBTSxlQUFDLEFBQUksQUFBQyxBQUNkO0FBQUM7O3NCQUVELEFBQU0sMEJBQUMsQUFBTTtBQUNYLEFBQUUsQUFBQyxZQUFDLE9BQU8sQUFBRyxRQUFLLEFBQVEsQUFBQyxVQUFDLE9BQU8sQUFBSSxLQUFDLEFBQUksS0FBTSxBQUFHLEFBQUMsQUFBQyxBQUN4RCxBQUFJLFVBQUMsQUFBRSxBQUFDLElBQUUsQUFBVyxJQUFDLEFBQUssQUFBQyxPQUFDLE9BQU8sQUFBSSxLQUFDLEFBQUksS0FBRSxBQUFXLElBQUMsQUFBSyxBQUFDLEFBQUMsQUFDcEU7QUFBQzs7c0JBRUQsQUFBTywyQkFBQyxBQUEyQjtBQUNqQyxBQUFJLFlBQUUsQUFBSSxBQUFFLE9BQUcsQUFBSSxBQUFDOztBQUNwQixBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxNQUFDLEFBQU87QUFBQyxBQUFHLG1CQUFJLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBRyxBQUFDLEFBQUMsQUFBQyxBQUFDLEFBQ3hEOztBQUFDOztzQkFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ2hDO0FBQUMsQUFDRjs7OztBQUVELEFBQU07QUFBTjs7O0FBQ1UsYUFBSyxRQUFRLEFBQUUsQUFBQztBQUNqQixhQUFPLFVBQWMsQUFBSSxBQUFDLEFBc0JuQztBQUFDOztvQkFwQkMsQUFBTztBQUNMLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQ3BCO0FBQUM7O29CQUVELEFBQUkscUJBQUMsQUFBTztBQUNWLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBSSxBQUFDO0FBQ3BCLEFBQUksYUFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ3hCO0FBQUM7O29CQUVELEFBQUc7QUFDRCxZQUFJLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQUcsQUFBRSxBQUFDO0FBQzVCLFlBQUksQUFBRyxNQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxBQUFDO0FBQzVCLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBRyxRQUFLLEFBQUMsSUFBRyxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLE1BQUcsQUFBQyxBQUFDLEFBQUM7QUFFdEQsQUFBTSxlQUFDLEFBQUksU0FBSyxBQUFTLFlBQUcsQUFBSSxPQUFHLEFBQUksQUFBQyxBQUMxQztBQUFDOztvQkFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxXQUFLLEFBQUMsQUFBQyxBQUNqQztBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNHdWlkLCBlbnN1cmVHdWlkIH0gZnJvbSAnLi9ndWlkJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpY3Q8VD4ge1xuICBbaW5kZXg6IHN0cmluZ106IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0PFQ+IHtcbiAgYWRkKHZhbHVlOiBUKTogU2V0PFQ+O1xuICBkZWxldGUodmFsdWU6IFQpOiB2b2lkO1xuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmxldCBwcm90byA9IE9iamVjdC5jcmVhdGUobnVsbCwge1xuICAvLyB3aXRob3V0IHRoaXMsIHdlIHdpbGwgYWx3YXlzIHN0aWxsIGVuZCB1cCB3aXRoIChuZXdcbiAgLy8gRW1wdHlPYmplY3QoKSkuY29uc3RydWN0b3IgPT09IE9iamVjdFxuICBjb25zdHJ1Y3Rvcjoge1xuICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIEVtcHR5T2JqZWN0KCkge31cbkVtcHR5T2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuXG5leHBvcnQgZnVuY3Rpb24gZGljdDxUPigpOiBEaWN0PFQ+IHtcbiAgLy8gbGV0IGQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBkLnggPSAxO1xuICAvLyBkZWxldGUgZC54O1xuICAvLyByZXR1cm4gZDtcbiAgcmV0dXJuIG5ldyAoRW1wdHlPYmplY3QgYXMgYW55KSgpO1xufVxuXG5leHBvcnQgdHlwZSBTZXRNZW1iZXIgPSBIYXNHdWlkIHwgc3RyaW5nO1xuXG5leHBvcnQgY2xhc3MgRGljdFNldDxUIGV4dGVuZHMgU2V0TWVtYmVyPiBpbXBsZW1lbnRzIFNldDxUPiB7XG4gIHByaXZhdGUgZGljdDogRGljdDxUPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRpY3QgPSBkaWN0PFQ+KCk7XG4gIH1cblxuICBhZGQob2JqOiBUKTogU2V0PFQ+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHRoaXMuZGljdFs8YW55Pm9ial0gPSBvYmo7XG4gICAgZWxzZSB0aGlzLmRpY3RbZW5zdXJlR3VpZCg8YW55Pm9iaildID0gb2JqO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKG9iajogVCkge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgZGVsZXRlIHRoaXMuZGljdFs8YW55Pm9ial07XG4gICAgZWxzZSBpZiAoKG9iaiBhcyBhbnkpLl9ndWlkKSBkZWxldGUgdGhpcy5kaWN0WyhvYmogYXMgYW55KS5fZ3VpZF07XG4gIH1cblxuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCkge1xuICAgIGxldCB7IGRpY3QgfSA9IHRoaXM7XG4gICAgT2JqZWN0LmtleXMoZGljdCkuZm9yRWFjaChrZXkgPT4gY2FsbGJhY2soZGljdFtrZXldKSk7XG4gIH1cblxuICB0b0FycmF5KCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5kaWN0KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhY2s8VD4ge1xuICBwcml2YXRlIHN0YWNrOiBUW10gPSBbXTtcbiAgcHVibGljIGN1cnJlbnQ6IE9wdGlvbjxUPiA9IG51bGw7XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIHJldHVybiB0aGlzLnN0YWNrO1xuICB9XG5cbiAgcHVzaChpdGVtOiBUKSB7XG4gICAgdGhpcy5jdXJyZW50ID0gaXRlbTtcbiAgICB0aGlzLnN0YWNrLnB1c2goaXRlbSk7XG4gIH1cblxuICBwb3AoKTogT3B0aW9uPFQ+IHtcbiAgICBsZXQgaXRlbSA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgbGV0IGxlbiA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIHRoaXMuY3VycmVudCA9IGxlbiA9PT0gMCA/IG51bGwgOiB0aGlzLnN0YWNrW2xlbiAtIDFdO1xuXG4gICAgcmV0dXJuIGl0ZW0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBpdGVtO1xuICB9XG5cbiAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGggPT09IDA7XG4gIH1cbn1cbiJdfQ==","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nexport var ListNode = function ListNode(value) {\n    _classCallCheck(this, ListNode);\n\n    this.next = null;\n    this.prev = null;\n    this.value = value;\n};\nexport var LinkedList = function () {\n    function LinkedList() {\n        _classCallCheck(this, LinkedList);\n\n        this.clear();\n    }\n\n    LinkedList.fromSlice = function fromSlice(slice) {\n        var list = new LinkedList();\n        slice.forEachNode(function (n) {\n            return list.append(n.clone());\n        });\n        return list;\n    };\n\n    LinkedList.prototype.head = function head() {\n        return this._head;\n    };\n\n    LinkedList.prototype.tail = function tail() {\n        return this._tail;\n    };\n\n    LinkedList.prototype.clear = function clear() {\n        this._head = this._tail = null;\n    };\n\n    LinkedList.prototype.isEmpty = function isEmpty() {\n        return this._head === null;\n    };\n\n    LinkedList.prototype.toArray = function toArray() {\n        var out = [];\n        this.forEachNode(function (n) {\n            return out.push(n);\n        });\n        return out;\n    };\n\n    LinkedList.prototype.splice = function splice(start, end, reference) {\n        var before = void 0;\n        if (reference === null) {\n            before = this._tail;\n            this._tail = end;\n        } else {\n            before = reference.prev;\n            end.next = reference;\n            reference.prev = end;\n        }\n        if (before) {\n            before.next = start;\n            start.prev = before;\n        }\n    };\n\n    LinkedList.prototype.nextNode = function nextNode(node) {\n        return node.next;\n    };\n\n    LinkedList.prototype.prevNode = function prevNode(node) {\n        return node.prev;\n    };\n\n    LinkedList.prototype.forEachNode = function forEachNode(callback) {\n        var node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = node.next;\n        }\n    };\n\n    LinkedList.prototype.contains = function contains(needle) {\n        var node = this._head;\n        while (node !== null) {\n            if (node === needle) return true;\n            node = node.next;\n        }\n        return false;\n    };\n\n    LinkedList.prototype.insertBefore = function insertBefore(node) {\n        var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        if (reference === null) return this.append(node);\n        if (reference.prev) reference.prev.next = node;else this._head = node;\n        node.prev = reference.prev;\n        node.next = reference;\n        reference.prev = node;\n        return node;\n    };\n\n    LinkedList.prototype.append = function append(node) {\n        var tail = this._tail;\n        if (tail) {\n            tail.next = node;\n            node.prev = tail;\n            node.next = null;\n        } else {\n            this._head = node;\n        }\n        return this._tail = node;\n    };\n\n    LinkedList.prototype.pop = function pop() {\n        if (this._tail) return this.remove(this._tail);\n        return null;\n    };\n\n    LinkedList.prototype.prepend = function prepend(node) {\n        if (this._head) return this.insertBefore(node, this._head);\n        return this._head = this._tail = node;\n    };\n\n    LinkedList.prototype.remove = function remove(node) {\n        if (node.prev) node.prev.next = node.next;else this._head = node.next;\n        if (node.next) node.next.prev = node.prev;else this._tail = node.prev;\n        return node;\n    };\n\n    return LinkedList;\n}();\nexport var ListSlice = function () {\n    function ListSlice(head, tail) {\n        _classCallCheck(this, ListSlice);\n\n        this._head = head;\n        this._tail = tail;\n    }\n\n    ListSlice.toList = function toList(slice) {\n        var list = new LinkedList();\n        slice.forEachNode(function (n) {\n            return list.append(n.clone());\n        });\n        return list;\n    };\n\n    ListSlice.prototype.forEachNode = function forEachNode(callback) {\n        var node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = this.nextNode(node);\n        }\n    };\n\n    ListSlice.prototype.contains = function contains(needle) {\n        var node = this._head;\n        while (node !== null) {\n            if (node === needle) return true;\n            node = node.next;\n        }\n        return false;\n    };\n\n    ListSlice.prototype.head = function head() {\n        return this._head;\n    };\n\n    ListSlice.prototype.tail = function tail() {\n        return this._tail;\n    };\n\n    ListSlice.prototype.toArray = function toArray() {\n        var out = [];\n        this.forEachNode(function (n) {\n            return out.push(n);\n        });\n        return out;\n    };\n\n    ListSlice.prototype.nextNode = function nextNode(node) {\n        if (node === this._tail) return null;\n        return node.next;\n    };\n\n    ListSlice.prototype.prevNode = function prevNode(node) {\n        if (node === this._head) return null;\n        return node.prev;\n    };\n\n    ListSlice.prototype.isEmpty = function isEmpty() {\n        return false;\n    };\n\n    return ListSlice;\n}();\nexport var EMPTY_SLICE = new ListSlice(null, null);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export var HAS_NATIVE_WEAKMAP = function () {\n    // detect if `WeakMap` is even present\n    var hasWeakMap = typeof WeakMap === 'function';\n    if (!hasWeakMap) {\n        return false;\n    }\n    var instance = new WeakMap();\n    // use `Object`'s `.toString` directly to prevent us from detecting\n    // polyfills as native weakmaps\n    return Object.prototype.toString.call(instance) === '[object WeakMap]';\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha21hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYWttYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBTSxXQUFPLEFBQWtCLHFCQUFJO0FBQ2pDLEFBQXNDO0FBQ3RDLFFBQUksQUFBVSxhQUFHLE9BQU8sQUFBTyxZQUFLLEFBQVUsQUFBQztBQUMvQyxBQUFFLEFBQUMsUUFBQyxDQUFDLEFBQVUsQUFBQyxZQUFDLEFBQUM7QUFBQyxBQUFNLGVBQUMsQUFBSyxBQUFDLEFBQUM7QUFBQztBQUVsQyxRQUFJLEFBQVEsV0FBRyxJQUFJLEFBQU8sQUFBRSxBQUFDO0FBQzdCLEFBQW1FO0FBQ25FLEFBQStCO0FBQy9CLEFBQU0sV0FBQyxBQUFNLE9BQUMsQUFBUyxVQUFDLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBUSxBQUFDLGNBQUssQUFBa0IsQUFBQyxBQUN6RTtBQUFDLEFBQUMsQUFBRSxBQUFDLENBVDZCLEVBQTNCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEhBU19OQVRJVkVfV0VBS01BUCA9IChmdW5jdGlvbigpIHtcbiAgLy8gZGV0ZWN0IGlmIGBXZWFrTWFwYCBpcyBldmVuIHByZXNlbnRcbiAgbGV0IGhhc1dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJztcbiAgaWYgKCFoYXNXZWFrTWFwKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGxldCBpbnN0YW5jZSA9IG5ldyBXZWFrTWFwKCk7XG4gIC8vIHVzZSBgT2JqZWN0YCdzIGAudG9TdHJpbmdgIGRpcmVjdGx5IHRvIHByZXZlbnQgdXMgZnJvbSBkZXRlY3RpbmdcbiAgLy8gcG9seWZpbGxzIGFzIG5hdGl2ZSB3ZWFrbWFwc1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGluc3RhbmNlKSA9PT0gJ1tvYmplY3QgV2Vha01hcF0nO1xufSkoKTtcbiJdfQ==","import { HAS_NATIVE_WEAKMAP } from './weakmap';\nvar HAS_TYPED_ARRAYS = typeof Uint32Array !== 'undefined';\nvar A = void 0;\nif (HAS_TYPED_ARRAYS) {\n    A = Uint32Array;\n} else {\n    A = Array;\n}\nexport default A;\nexport var EMPTY_ARRAY = HAS_NATIVE_WEAKMAP ? Object.freeze([]) : [];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcnJheS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUFPLFNBQUUsQUFBa0IsQUFBRSwwQkFBTSxBQUFXLEFBQUM7QUFFL0MsSUFBTSxBQUFnQixtQkFBRyxPQUFPLEFBQVcsZ0JBQUssQUFBVyxBQUFDO0FBRTVELElBQUksQUFBQyxBQUFDO0FBRU4sQUFBRSxBQUFDLElBQUMsQUFBZ0IsQUFBQyxrQkFBQyxBQUFDO0FBQ3JCLEFBQUMsUUFBRyxBQUFXLEFBQUMsQUFDbEI7QUFBQyxBQUFDLEFBQUksT0FBQyxBQUFDO0FBQ04sQUFBQyxRQUFHLEFBQUssQUFBQyxBQUNaO0FBQUM7QUFFRCxlQUFlLEFBQUMsQUFBQztBQUVqQixBQUFNLE9BQUMsSUFBTSxBQUFXLEFBQVUsY0FBQyxBQUFrQixxQkFBRyxBQUFNLE9BQUMsQUFBTSxPQUFDLEFBQUUsQUFBQyxNQUFHLEFBQUUsQUFBUSxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSEFTX05BVElWRV9XRUFLTUFQIH0gZnJvbSAnLi93ZWFrbWFwJztcblxuY29uc3QgSEFTX1RZUEVEX0FSUkFZUyA9IHR5cGVvZiBVaW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCc7XG5cbmxldCBBO1xuXG5pZiAoSEFTX1RZUEVEX0FSUkFZUykge1xuICBBID0gVWludDMyQXJyYXk7XG59IGVsc2Uge1xuICBBID0gQXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEE7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWTogYW55W10gPSAoSEFTX05BVElWRV9XRUFLTUFQID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXSkgYXMgYW55OyJdfQ==","import {\n  assign,\n  Opaque\n} from '@glimmer/util';\nimport {\n  DynamicScope as GlimmerDynamicScope\n} from '@glimmer/runtime';\nimport {\n  PathReference\n} from '@glimmer/reference';\n\nexport default class DynamicScope implements GlimmerDynamicScope {\n  private bucket;\n\n  constructor(bucket=null) {\n    if (bucket) {\n      this.bucket = assign({}, bucket);\n    } else {\n      this.bucket = {};\n    }\n  }\n\n  get(key: string): PathReference<Opaque> {\n    return this.bucket[key];\n  }\n\n  set(key: string, reference: PathReference<Opaque>) {\n    return this.bucket[key] = reference;\n  }\n\n  child(): DynamicScope {\n    return new DynamicScope(this.bucket);\n  }\n}\n","import {\n  Opaque\n} from '@glimmer/util';\n\nimport {\n  Reference,\n  OpaqueIterator,\n  AbstractIterable,\n  IterationItem,\n  Tag\n} from \"@glimmer/reference\";\n\nimport {\n  UpdatableReference\n} from \"@glimmer/object-reference\";\n\nexport type KeyFor<T> = (item: Opaque, index: T) => string;\n\nclass ArrayIterator implements OpaqueIterator {\n  private array: Opaque[];\n  private keyFor: KeyFor<number>;\n  private position = 0;\n\n  constructor(array: Opaque[], keyFor: KeyFor<number>) {\n    this.array = array;\n    this.keyFor = keyFor;\n  }\n\n  isEmpty(): boolean {\n    return this.array.length === 0;\n  }\n\n  next(): IterationItem<Opaque, number> {\n    let { position, array, keyFor } = this;\n\n    if (position >= array.length) return null;\n\n    let value = array[position];\n    let key = keyFor(value, position);\n    let memo = position;\n\n    this.position++;\n\n    return { key, value, memo };\n  }\n}\n\nclass ObjectKeysIterator implements OpaqueIterator {\n  private keys: string[];\n  private values: Opaque[];\n  private keyFor: KeyFor<string>;\n  private position = 0;\n\n  constructor(keys: string[], values: Opaque[], keyFor: KeyFor<string>) {\n    this.keys = keys;\n    this.values = values;\n    this.keyFor = keyFor;\n  }\n\n  isEmpty(): boolean {\n    return this.keys.length === 0;\n  }\n\n  next(): IterationItem<Opaque, string> {\n    let { position, keys, values, keyFor } = this;\n\n    if (position >= keys.length) return null;\n\n    let value = values[position];\n    let memo = keys[position];\n    let key = keyFor(value, memo);\n\n    this.position++;\n\n    return { key, value, memo };\n  }\n}\n\nclass EmptyIterator implements OpaqueIterator {\n  isEmpty(): boolean {\n    return true;\n  }\n\n  next(): IterationItem<Opaque, Opaque> {\n    throw new Error(`Cannot call next() on an empty iterator`);\n  }\n}\n\nconst EMPTY_ITERATOR = new EmptyIterator();\n\nexport default class Iterable implements AbstractIterable<Opaque, Opaque, IterationItem<Opaque, Opaque>, UpdatableReference<Opaque>, UpdatableReference<Opaque>> {\n  public tag: Tag;\n  private ref: Reference<Opaque>;\n  private keyFor: KeyFor<Opaque>;\n\n  constructor(ref: Reference<Opaque>, keyFor: KeyFor<Opaque>) {\n    this.tag = ref.tag;\n    this.ref = ref;\n    this.keyFor = keyFor;\n  }\n\n  iterate(): OpaqueIterator {\n    let { ref, keyFor } = this;\n\n    let iterable = ref.value() as any;\n\n    if (Array.isArray(iterable)) {\n      return iterable.length > 0 ? new ArrayIterator(iterable, keyFor) : EMPTY_ITERATOR;\n    } else if (iterable === undefined || iterable === null) {\n      return EMPTY_ITERATOR;\n    } else if (iterable.forEach !== undefined) {\n      let array = [];\n      iterable.forEach(function(item) {\n        array.push(item);\n      });\n      return array.length > 0 ? new ArrayIterator(array, keyFor) : EMPTY_ITERATOR;\n    } else if (typeof iterable === 'object') {\n       let keys = Object.keys(iterable);\n       return keys.length > 0 ? new ObjectKeysIterator(keys, keys.map(key => iterable[key]), keyFor) : EMPTY_ITERATOR;\n     } else {\n      throw new Error(`Don't know how to {{#each ${iterable}}}`);\n    }\n  }\n\n  valueReferenceFor(item: IterationItem<Opaque, Opaque>): UpdatableReference<Opaque> {\n    return new UpdatableReference(item.value);\n  }\n\n  updateValueReference(reference: UpdatableReference<Opaque>, item: IterationItem<Opaque, Opaque>) {\n    reference.update(item.value);\n  }\n\n  memoReferenceFor(item: IterationItem<Opaque, Opaque>): UpdatableReference<Opaque> {\n    return new UpdatableReference(item.memo);\n  }\n\n  updateMemoReference(reference: UpdatableReference<Opaque>, item: IterationItem<Opaque, Opaque>) {\n    reference.update(item.memo);\n  }\n}\n","import { ConstReference, Reference } from \"@glimmer/reference\";\nimport { VM, Arguments } from \"@glimmer/runtime\";\n\nexport default function buildAction(vm: VM, _args: Arguments) {\n  let componentRef = vm.getSelf();\n  let args = _args.capture();\n\n  let actionFunc = args.positional.at(0).value() as Function;\n  if (typeof actionFunc !== 'function') {\n    throwNoActionError(actionFunc, args.positional.at(0));\n  }\n\n  return new ConstReference(function action(...invokedArgs) {\n    let curriedArgs = args.positional.value();\n    // Consume the action function that was already captured above.\n    curriedArgs.shift();\n\n    curriedArgs.push(...invokedArgs);\n\n    // Invoke the function with the component as the context, the curried\n    // arguments passed to `{{action}}`, and the arguments the bound function\n    // was invoked with.\n    actionFunc.apply(componentRef && componentRef.value(), curriedArgs);\n  });\n}\n\nfunction throwNoActionError(actionFunc: any, actionFuncReference: Reference<any>) {\n  let referenceInfo = debugInfoForReference(actionFuncReference);\n  throw new Error(`You tried to create an action with the {{action}} helper, but the first argument ${referenceInfo}was ${typeof actionFunc} instead of a function.`);\n}\n\nexport function debugInfoForReference(reference: any): string {\n  let message = '';\n  let parent;\n  let property;\n\n  if (reference == null) { return message; }\n\n  if ('parent' in reference && 'property' in reference) {\n    parent = reference['parent'].value();\n    property = reference['property'];\n  } else if ('_parentValue' in reference && '_propertyKey' in reference) {\n    parent = reference['_parentValue'];\n    property = reference['_propertyKey'];\n  }\n\n  if (property !== undefined) {\n    message += `('${property}' on ${debugName(parent)}) `;\n  }\n\n  return message;\n}\n\nfunction debugName(obj: any) {\n  let objType = typeof obj;\n  if (obj == null) {\n    return objType;\n  } else if (objType === 'number' || objType === 'boolean') {\n    return obj.toString();\n  } else {\n    if (obj['debugName']) {\n      return obj['debugName'];\n    }\n    try {\n      return JSON.stringify(obj);\n    } catch (e) { }\n    return obj.toString();\n  }\n}\n","import {\n  Dict,\n  Opaque\n} from '@glimmer/util';\n\nimport {\n  VOLATILE_TAG,\n  PathReference,\n  Reference\n} from \"@glimmer/reference\";\n\nimport {\n  Arguments,\n  CapturedArguments,\n  Helper as GlimmerHelper,\n  VM\n} from \"@glimmer/runtime\";\n\nexport type UserHelper = (args: ReadonlyArray<Opaque>, named: Dict<Opaque>) => any;\n\nexport default function buildUserHelper(helperFunc): GlimmerHelper {\n  return (_vm: VM, args: Arguments) => new HelperReference(helperFunc, args);\n}\n\nexport class SimplePathReference<T> implements PathReference<T> {\n  private parent: Reference<T>;\n  private property: string;\n  public tag = VOLATILE_TAG;\n\n  constructor(parent: Reference<T>, property: string) {\n    this.parent = parent;\n    this.property = property;\n  }\n\n  value(): T {\n    return this.parent.value()[this.property];\n  }\n\n  get(prop: string): PathReference<Opaque> {\n    return new SimplePathReference(this, prop);\n  }\n}\n\nexport class HelperReference implements PathReference<Opaque> {\n  private helper: UserHelper;\n  private args: CapturedArguments;\n  public tag = VOLATILE_TAG;\n\n  constructor(helper: UserHelper, args: Arguments) {\n    this.helper = helper;\n    this.args = args.capture();\n  }\n\n  value() {\n    let { helper, args } = this;\n\n    return helper(args.positional.value(), args.named.value());\n  }\n\n  get(prop: string): SimplePathReference<Opaque> {\n    return new SimplePathReference(this, prop);\n  }\n}\n","import {\n  DOMChanges,\n  DOMTreeConstruction,\n  Environment as GlimmerEnvironment,\n  InlineMacros,\n  ModifierManager,\n  templateFactory,\n  ComponentDefinition,\n  Component,\n  ComponentManager,\n  BlockMacros,\n  Helper as GlimmerHelper\n} from '@glimmer/runtime';\nimport {\n  Reference,\n  OpaqueIterable\n} from \"@glimmer/reference\";\nimport {\n  dict,\n  Opaque\n} from '@glimmer/util';\nimport {\n  getOwner,\n  setOwner,\n  Owner,\n  Factory\n} from '@glimmer/di';\nimport Iterable from './iterable';\nimport TemplateMeta from './template-meta';\nimport ComponentDefinitionCreator from './component-definition-creator'\nimport Application from \"./application\";\nimport {\n  blockComponentMacro,\n  inlineComponentMacro\n } from './dynamic-component';\n import action from './helpers/action';\n import buildUserHelper from './helpers/user-helper';\n\ntype KeyFor<T> = (item: Opaque, index: T) => string;\n\nexport interface EnvironmentOptions {\n  document?: HTMLDocument;\n  appendOperations?: DOMTreeConstruction;\n}\n\nclass DefaultComponentDefinition extends ComponentDefinition<any> {\n  toJSON() {\n    return `<default-component-definition name=${this.name}>`;\n  }\n}\n\nconst DEFAULT_MANAGER = 'main';\nconst DEFAULT_HELPERS = {\n  action\n};\n\nexport default class Environment extends GlimmerEnvironment {\n  private helpers = dict<GlimmerHelper>();\n  private modifiers = dict<ModifierManager<Opaque>>();\n  private components = dict<ComponentDefinition<Component>>();\n  private managers = dict<ComponentManager<Component>>();\n  private uselessAnchor: HTMLAnchorElement;\n\n  static create(options: EnvironmentOptions = {}) {\n    options.document = options.document || self.document;\n    options.appendOperations = options.appendOperations || new DOMTreeConstruction(options.document);\n\n    return new Environment(options);\n  }\n\n  constructor(options: EnvironmentOptions) {\n    super({ appendOperations: options.appendOperations, updateOperations: new DOMChanges(options.document as HTMLDocument || document) });\n\n    setOwner(this, getOwner(options));\n\n    // TODO - required for `protocolForURL` - seek alternative approach\n    // e.g. see `installPlatformSpecificProtocolForURL` in Ember\n    this.uselessAnchor = options.document.createElement('a') as HTMLAnchorElement;\n  }\n\n  protocolForURL(url: string): string {\n    // TODO - investigate alternative approaches\n    // e.g. see `installPlatformSpecificProtocolForURL` in Ember\n    this.uselessAnchor.href = url;\n    return this.uselessAnchor.protocol;\n  }\n\n  hasPartial() {\n    return false;\n  }\n\n  lookupPartial(): any {\n  }\n\n  managerFor(managerId: string = DEFAULT_MANAGER): ComponentManager<Component> {\n    let manager: ComponentManager<Component>;\n\n    manager = this.managers[managerId];\n    if (!manager) {\n      let app: Application = getOwner(this) as any as Application;\n      manager = this.managers[managerId] = getOwner(this).lookup(`component-manager:/${app.rootName}/component-managers/${managerId}`);\n      if (!manager) {\n        throw new Error(`No component manager found for ID ${managerId}.`);\n      }\n    }\n    return manager;\n  }\n\n  hasComponentDefinition(name: string, meta: TemplateMeta): boolean {\n    return !!this.getComponentDefinition(name, meta);\n  }\n\n  getComponentDefinition(name: string, meta: TemplateMeta): ComponentDefinition<Component> {\n    let owner: Owner = getOwner(this);\n    let relSpecifier: string = `template:${name}`;\n    let referrer: string = meta.specifier;\n\n    let specifier = owner.identify(relSpecifier, referrer);\n    if (specifier === undefined) {\n      if (owner.identify(`component:${name}`, referrer)) {\n        throw new Error(`The component '${name}' is missing a template. All components must have a template. Make sure there is a template.hbs in the component directory.`);\n      } else {\n        throw new Error(\"Could not find template for \" + name);\n      }\n    }\n\n    if (!this.components[specifier]) {\n      return this.registerComponent(name, specifier, meta, owner);\n    }\n\n    return this.components[specifier];\n  }\n\n  registerComponent(name: string, templateSpecifier: string, meta: TemplateMeta, owner: Owner): ComponentDefinition<Component> {\n    let serializedTemplate = owner.lookup('template', templateSpecifier);\n    let componentSpecifier = owner.identify('component', templateSpecifier);\n    let componentFactory: Factory<Component> = null;\n\n    if (componentSpecifier) {\n      componentFactory = owner.factoryFor(componentSpecifier);\n    }\n\n    let template = templateFactory<TemplateMeta>(serializedTemplate).create(this);\n    let manager: ComponentManager<Component> = this.managerFor(meta.managerId);\n    let definition: ComponentDefinition<Component>;\n\n    if (canCreateComponentDefinition(manager)) {\n      definition = manager.createComponentDefinition(name, template, componentFactory);\n    } else {\n      definition = new DefaultComponentDefinition(name, manager, componentFactory);\n    }\n\n    this.components[templateSpecifier] = definition;\n\n    return definition;\n  }\n\n  hasHelper(name: string, meta: TemplateMeta) {\n    return !!this.lookupHelper(name, meta);\n  }\n\n  lookupHelper(name: string, meta: TemplateMeta): GlimmerHelper {\n    if (DEFAULT_HELPERS[name]) {\n      return DEFAULT_HELPERS[name];\n    }\n\n    let owner: Owner = getOwner(this);\n    let relSpecifier: string = `helper:${name}`;\n    let referrer: string = meta.specifier;\n\n    let specifier = owner.identify(relSpecifier, referrer);\n    if (specifier === undefined) {\n      return;\n    }\n\n    if (!this.helpers[specifier]) {\n      return this.registerHelper(specifier, owner);\n    }\n\n    return this.helpers[specifier];\n  }\n\n  registerHelper(specifier: string, owner: Owner): GlimmerHelper {\n    let helperFunc = owner.lookup(specifier);\n\n    let userHelper = buildUserHelper(helperFunc);\n    this.helpers[specifier] = userHelper;\n\n    return userHelper;\n  }\n\n  hasModifier(modifierName: string, blockMeta: TemplateMeta): boolean {\n    return modifierName.length === 1 && (modifierName in this.modifiers);\n  }\n\n  lookupModifier(modifierName: string, blockMeta: TemplateMeta): ModifierManager<Opaque> {\n    let modifier = this.modifiers[modifierName];\n\n    if(!modifier) throw new Error(`Modifier for ${modifierName} not found.`);\n    return modifier;\n  }\n\n  iterableFor(ref: Reference<Opaque>, keyPath: string): OpaqueIterable {\n    let keyFor: KeyFor<Opaque>;\n\n    if (!keyPath) {\n      throw new Error('Must specify a key for #each');\n    }\n\n    switch (keyPath) {\n      case '@index':\n        keyFor = (_, index: number) => String(index);\n      break;\n      case '@primitive':\n        keyFor = (item: Opaque) => String(item);\n      break;\n      default:\n        keyFor = (item: Opaque) => item[keyPath];\n      break;\n    }\n\n    return new Iterable(ref, keyFor);\n  }\n\n  macros(): { blocks: BlockMacros, inlines: InlineMacros } {\n    let macros = super.macros();\n\n    populateMacros(macros.blocks, macros.inlines);\n\n    return macros;\n  }\n}\n\nfunction populateMacros(blocks: BlockMacros, inlines: InlineMacros): void {\n  blocks.add('component', blockComponentMacro);\n  inlines.add('component', inlineComponentMacro);\n}\n\nfunction canCreateComponentDefinition(manager: ComponentDefinitionCreator | ComponentManager<Component>): manager is ComponentDefinitionCreator {\n  return (manager as ComponentDefinitionCreator).createComponentDefinition !== undefined;\n}\n","export default {\"id\":\"sn4E/A3E\",\"block\":\"{\\\"symbols\\\":[\\\"root\\\"],\\\"prelude\\\":null,\\\"head\\\":null,\\\"statements\\\":[[4,\\\"each\\\",[[19,0,[\\\"roots\\\"]]],[[\\\"key\\\"],[\\\"id\\\"]],{\\\"statements\\\":[[4,\\\"-in-element\\\",[[19,1,[\\\"parent\\\"]]],[[\\\"nextSibling\\\"],[[19,1,[\\\"nextSibling\\\"]]]],{\\\"statements\\\":[[1,[25,\\\"component\\\",[[19,1,[\\\"component\\\"]]],null],false]],\\\"parameters\\\":[]},null]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\"meta\":{\"specifier\":\"template:/-application/templates/main.hbs\"}};","import {\n  Container,\n  Factory,\n  Owner,\n  Registry,\n  RegistryWriter,\n  Resolver,\n  setOwner,\n} from '@glimmer/di';\nimport {\n  Simple,\n  templateFactory,\n  RenderResult,\n  ComponentDefinition,\n  Component\n} from '@glimmer/runtime';\nimport {\n  UpdatableReference\n} from '@glimmer/object-reference';\nimport {\n  Option\n} from '@glimmer/util';\nimport ApplicationRegistry from './application-registry';\nimport DynamicScope from './dynamic-scope';\nimport Environment from './environment';\nimport mainTemplate from './templates/main';\n\nexport interface ApplicationOptions {\n  rootName: string;\n  resolver: Resolver;\n}\n\nexport interface Initializer {\n  name?: string;\n  initialize(registry: RegistryWriter): void;\n}\n\nexport interface AppRoot {\n  id: number,\n  component: string | ComponentDefinition<Component>,\n  parent: Simple.Node,\n  nextSibling: Option<Simple.Node>\n}\n\nexport default class Application implements Owner {\n  public rootName: string;\n  public resolver: Resolver;\n  public env: Environment;\n  private _roots: AppRoot[] = [];\n  private _rootsIndex: number = 0;\n  private _registry: Registry;\n  private _container: Container;\n  private _renderResult: RenderResult;\n  /** Whether the initial render has completed. */\n  private _rendered: boolean;\n  /** Whether a re-render has been scheduled. */\n  private _scheduled: boolean;\n  private _initializers: Initializer[] = [];\n  private _initialized = false;\n\n  constructor(options: ApplicationOptions) {\n    this.rootName = options.rootName;\n    this.resolver = options.resolver;\n  }\n\n  registerInitializer(initializer: Initializer): void {\n    this._initializers.push(initializer);\n  }\n\n  initRegistry(): void {\n    let registry = this._registry = new Registry();\n\n    // Create ApplicationRegistry as a proxy to the underlying registry\n    // that will only be available during `initialize`.\n    let appRegistry = new ApplicationRegistry(this._registry, this.resolver);\n\n    registry.register(`environment:/${this.rootName}/main/main`, Environment);\n    registry.registerOption('helper', 'instantiate', false);\n    registry.registerOption('template', 'instantiate', false);\n    registry.register(`document:/${this.rootName}/main/main`, window.document as any);\n    registry.registerOption('document', 'instantiate', false);\n    registry.registerInjection('environment', 'document', `document:/${this.rootName}/main/main`);\n    registry.registerInjection('component-manager', 'env', `environment:/${this.rootName}/main/main`);\n\n    let initializers = this._initializers;\n    for (let i = 0; i < initializers.length; i++) {\n      initializers[i].initialize(appRegistry);\n    }\n\n    this._initialized = true;\n  }\n\n  initContainer(): void {\n    this._container = new Container(this._registry, this.resolver);\n\n    // Inject `this` (the app) as the \"owner\" of every object instantiated\n    // by its container.\n    this._container.defaultInjections = (specifier: string) => {\n      let hash = {};\n      setOwner(hash, this);\n      return hash;\n    }\n  }\n\n  initialize(): void {\n    this.initRegistry();\n    this.initContainer();\n  }\n\n  boot(): void {\n    this.initialize();\n\n    this.env = this.lookup(`environment:/${this.rootName}/main/main`);\n\n    this.render();\n  }\n\n  render(): void {\n    this.env.begin();\n\n    let mainLayout = templateFactory(mainTemplate).create(this.env);\n    let self = new UpdatableReference({ roots: this._roots });\n    let appendTo = document.body;\n    let dynamicScope = new DynamicScope();\n    let templateIterator = mainLayout.render(self, appendTo, dynamicScope);\n    let result;\n    do {\n      result = templateIterator.next();\n    } while (!result.done);\n\n    this.env.commit();\n\n    this._rendered = true;\n    this._renderResult = result.value;\n  }\n\n  renderComponent(component: string | ComponentDefinition<Component>, parent: Simple.Node, nextSibling: Option<Simple.Node>): void {\n    this._roots.push({ id: this._rootsIndex++, component, parent, nextSibling });\n    this.scheduleRerender();\n  }\n\n  rerender(): void {\n    this.env.begin();\n    this._renderResult.rerender();\n    this.env.commit();\n  }\n\n  scheduleRerender(): void {\n    if (this._scheduled || !this._rendered) { return; }\n\n    this._scheduled = true;\n    requestAnimationFrame(() => {\n      this._scheduled = false;\n      this.rerender();\n    });\n  }\n\n  /**\n   * Owner interface implementation\n   */\n  identify(specifier: string, referrer?: string): string {\n    return this.resolver.identify(specifier, referrer);\n  }\n\n  factoryFor(specifier: string, referrer?: string): Factory<any> {\n    return this._container.factoryFor(this.identify(specifier, referrer));\n  }\n\n  lookup(specifier: string, referrer?: string): any {\n    return this._container.lookup(this.identify(specifier, referrer));\n  }\n}\n","import { Factory, FactoryDefinition } from './factory';\nimport { RegistryReader, Injection } from './registry';\nimport { Resolver } from './resolver';\nimport { Dict } from './dict';\n\ninterface Lookup {\n  factory: Factory<any>;\n  instance: any;\n}\n\nexport default class Container {\n  private _registry: RegistryReader;\n  private _resolver: Resolver;\n  private _lookups: Dict<Lookup>;\n  private _factoryDefinitionLookups: Dict<FactoryDefinition<any>>;\n\n  constructor(registry: RegistryReader, resolver: Resolver = null) {\n    this._registry = registry;\n    this._resolver = resolver;\n    this._lookups = {};\n    this._factoryDefinitionLookups = {};\n  }\n\n  factoryFor(specifier: string): Factory<any> {\n    let factoryDefinition: FactoryDefinition<any> = this._factoryDefinitionLookups[specifier];\n\n    if (!factoryDefinition) {\n      if (this._resolver) {\n        factoryDefinition = this._resolver.retrieve(specifier);\n      }\n\n      if (!factoryDefinition) {\n        factoryDefinition = this._registry.registration(specifier);\n      }\n\n      if (factoryDefinition) {\n        this._factoryDefinitionLookups[specifier] = factoryDefinition;\n      }\n    }\n\n    if (!factoryDefinition) {\n      return;\n    }\n\n    return this.buildFactory(specifier, factoryDefinition);\n  }\n\n  lookup(specifier: string): any {\n    let singleton = (this._registry.registeredOption(specifier, 'singleton') !== false);\n\n    if (singleton) {\n      let lookup = this._lookups[specifier];\n      if (lookup) {\n        return lookup.instance;\n      }\n    }\n\n    let factory = this.factoryFor(specifier);\n    if (!factory) { return; }\n\n    if (this._registry.registeredOption(specifier, 'instantiate') === false) {\n      return factory.class;\n    }\n\n    let instance = factory.create();\n\n    if (singleton && instance) {\n      this._lookups[specifier] = { factory, instance };\n    }\n\n    return instance;\n  }\n\n  defaultInjections(specifier: string): object {\n    return {};\n  }\n\n  teardown(): void {\n    let specifiers = Object.keys(this._lookups);\n\n    for (let i=0;i<specifiers.length;i++) {\n      let specifier = specifiers[i];\n      let { factory, instance } = this._lookups[specifier];\n      factory.teardown(instance);\n    }\n  }\n\n  defaultTeardown(instance): void {\n  }\n\n  private buildInjections(specifier: string): object {\n    let hash = this.defaultInjections(specifier);\n    let injections: Injection[] = this._registry.registeredInjections(specifier);\n    let injection: Injection;\n\n    for (let i = 0; i < injections.length; i++) {\n      injection = injections[i];\n      hash[injection.property] = this.lookup(injection.source);\n    }\n\n    return hash;\n  }\n\n  private buildFactory(specifier: string, factoryDefinition: FactoryDefinition<any>): Factory<any> {\n    let injections = this.buildInjections(specifier);\n\n    return {\n      class: factoryDefinition,\n      teardown: (instance) => {\n        if (factoryDefinition.teardown) {\n          factoryDefinition.teardown(instance);\n        } else {\n          this.defaultTeardown(instance);\n        }\n      },\n      create(options) {\n        let mergedOptions = Object.assign({}, injections, options);\n\n        return factoryDefinition.create(mergedOptions);\n      }\n    }\n  }\n}\n","import { Dict } from './dict';\nimport { Factory, FactoryDefinition } from './factory';\n\nexport interface RegistrationOptions {\n  singleton?: boolean;\n  instantiate?: boolean;\n}\n\nexport interface Injection {\n  property: string,\n  source: string\n}\n\nexport interface RegistryWriter {\n  register(specifier: string, factory: any, options?: RegistrationOptions): void;\n  unregister(specifier: string): void;\n  registerOption(specifier: string, option: string, value: any): void;\n  unregisterOption(specifier: string, option: string): void;\n  registerInjection(specifier: string, property: string, source: string): void;\n}\n\nexport interface RegistryReader {\n  registration(specifier: string): any;\n  registeredOption(specifier: string, option: string): any;\n  registeredOptions(specifier: string): any;\n  registeredInjections(specifier: string): Injection[];\n}\n\nexport interface RegistryOptions {\n  fallback?: RegistryReader;\n}\n\nexport interface RegistryAccessor extends RegistryReader, RegistryWriter {}\n\nexport default class Registry implements RegistryAccessor {\n  private _registrations: Dict<FactoryDefinition<any>>;\n  private _registeredOptions: Dict<any>;\n  private _registeredInjections: Dict<Injection[]>;\n  private _fallback: RegistryReader;\n\n  constructor(options?: RegistryOptions) {\n    this._registrations = {};\n    this._registeredOptions = {};\n    this._registeredInjections = {};\n    if (options && options.fallback) {\n      this._fallback = options.fallback;\n    }\n  }\n\n  register(specifier: string, factoryDefinition: FactoryDefinition<any>, options?: RegistrationOptions): void {\n    this._registrations[specifier] = factoryDefinition;\n    if (options) {\n      this._registeredOptions[specifier] = options;\n    }\n  }\n\n  registration(specifier: string): FactoryDefinition<any> {\n    let registration = this._registrations[specifier];\n    if (registration === undefined && this._fallback) {\n      registration = this._fallback.registration(specifier);\n    }\n    return registration;\n  }\n\n  unregister(specifier: string): void {\n    delete this._registrations[specifier];\n    delete this._registeredOptions[specifier];\n    delete this._registeredInjections[specifier];\n  }\n\n  registerOption(specifier: string, option: string, value: any): void {\n    let options = this._registeredOptions[specifier];\n\n    if (!options) {\n      options = {};\n      this._registeredOptions[specifier] = options;\n    }\n\n    options[option] = value;\n  }\n\n  registeredOption(specifier: string, option: string): any {\n    let result: Boolean;\n    let options = this.registeredOptions(specifier);\n\n    if (options) {\n      result = options[option];\n    }\n\n    if (result === undefined && this._fallback !== undefined) {\n      result = this._fallback.registeredOption(specifier, option);\n    }\n\n    return result;\n  }\n\n  registeredOptions(specifier: string): any {\n    let options = this._registeredOptions[specifier];\n    if (options === undefined) {\n      let [type] = specifier.split(':');\n      options = this._registeredOptions[type];\n    }\n    return options;\n  }\n\n  unregisterOption(specifier: string, option: string): void {\n    let options = this._registeredOptions[specifier];\n\n    if (options) {\n      delete options[option];\n    }\n  }\n\n  registerInjection(specifier: string, property: string, source: string): void {\n    let injections = this._registeredInjections[specifier];\n    if (injections === undefined) {\n      this._registeredInjections[specifier] = injections = [];\n    }\n    injections.push({\n      property,\n      source\n    });\n  }\n\n  registeredInjections(specifier: string): Injection[] {\n    let [type] = specifier.split(':');\n    let injections: Injection[] = this._fallback ? this._fallback.registeredInjections(specifier) : [];\n    Array.prototype.push.apply(injections, this._registeredInjections[type]);\n    Array.prototype.push.apply(injections, this._registeredInjections[specifier]);\n    return injections;\n  }\n}\n","import { RegistrationOptions } from './registry';\nimport { Factory } from './factory';\n\n// TODO - use symbol\nexport const OWNER = '__owner__';\n\nexport function getOwner(object: object): Owner {\n  return object[OWNER];\n}\n\nexport function setOwner(object: object, owner: Owner): void {\n  object[OWNER] = owner;\n}\n\nexport interface Owner {\n  identify(specifier: string, referrer?: string): string;\n\n  factoryFor(specifier: string, referrer?: string): Factory<any>;\n  \n  lookup(specifier: string, referrer?: string): any;\n}\n","export interface Specifier {\n  rootName?: string;\n  collection?: string;\n  namespace?: string;\n  name?: string;\n  type?: string;\n}\n\nexport function isSpecifierStringAbsolute(specifier: string): boolean {\n  let [type, path] = specifier.split(':');\n  return !!(type && path && path.indexOf('/') === 0 && path.split('/').length > 3);\n}\n\nexport function isSpecifierObjectAbsolute(specifier: Specifier): boolean {\n  return specifier.rootName !== undefined &&\n         specifier.collection !== undefined &&\n         specifier.name !== undefined &&\n         specifier.type !== undefined;\n}\n\nexport function serializeSpecifier(specifier: Specifier): string {\n  let type = specifier.type;\n  let path = serializeSpecifierPath(specifier);\n\n  if (path) {\n    return type + ':' + path;\n  } else {\n    return type;\n  }\n}\n\nexport function serializeSpecifierPath(specifier: Specifier): string {\n  let path = [];\n  if (specifier.rootName) {\n    path.push(specifier.rootName);\n  }\n  if (specifier.collection) {\n    path.push(specifier.collection);\n  }\n  if (specifier.namespace) {\n    path.push(specifier.namespace);\n  }\n  if (specifier.name) {\n    path.push(specifier.name);\n  }\n\n  if (path.length > 0) {\n    let fullPath = path.join('/');\n    if (isSpecifierObjectAbsolute(specifier)) {\n      fullPath = '/' + fullPath;\n    }\n    return fullPath;\n  }\n}\n\nexport function deserializeSpecifier(specifier: string): Specifier {\n  let obj: Specifier = {};\n\n  if (specifier.indexOf(':') > -1) {\n    let [type, path] = specifier.split(':');\n    obj.type = type;\n\n    let pathSegments;\n\n    if (path.indexOf('/') === 0) {\n      pathSegments = path.substr(1).split('/');\n      obj.rootName = pathSegments.shift();\n      obj.collection = pathSegments.shift();\n    } else {\n      pathSegments = path.split('/');\n    }\n\n    if (pathSegments.length > 0) {\n      obj.name = pathSegments.pop();\n\n      if (pathSegments.length > 0) {\n        obj.namespace = pathSegments.join('/');\n      }\n    }\n\n  } else {\n    obj.type = specifier;\n  }\n\n  return obj;\n}\n","export function assert(description: string, test: any) {\n  if (!test) {\n    throw new Error('Assertion Failed: ' + description);\n  }\n}\n","import {\n  Resolver as IResolver,\n  Specifier,\n  isSpecifierStringAbsolute,\n  isSpecifierObjectAbsolute,\n  deserializeSpecifier,\n  serializeSpecifier\n} from '@glimmer/di';\nimport { assert } from './utils/debug';\nimport { ModuleRegistry } from './module-registry';\nimport { ResolverConfiguration } from './resolver-configuration';\n\nexport default class Resolver implements IResolver {\n  public config: ResolverConfiguration;\n  public registry: ModuleRegistry;\n\n  constructor(config: ResolverConfiguration, registry: ModuleRegistry) {\n    this.config = config;\n    this.registry = registry;\n  }\n\n  identify(specifier: string, referrer?: string): string {\n    if (isSpecifierStringAbsolute(specifier)) {\n      return specifier;\n    }\n\n    let s = deserializeSpecifier(specifier);\n    let result: string;\n\n    if (referrer) {\n      let r = deserializeSpecifier(referrer);\n\n      if (isSpecifierObjectAbsolute(r)) {\n        assert('Specifier must not include a rootName, collection, or namespace when combined with an absolute referrer', s.rootName === undefined && s.collection === undefined && s.namespace === undefined);\n\n        // Look locally in the referrer's namespace\n        s.rootName = r.rootName;\n        s.collection = r.collection;\n        if (s.name) {\n          s.namespace = r.namespace ? r.namespace + '/' + r.name : r.name;\n        } else {\n          s.namespace = r.namespace;\n          s.name = r.name;\n        }\n        if (result = this._serializeAndVerify(s)) { return result; }\n\n        // Look for a private collection in the referrer's namespace\n        let privateCollection = this._definitiveCollection(s.type);\n        if (privateCollection) {\n          s.namespace += '/-' + privateCollection;\n          if (result = this._serializeAndVerify(s)) { return result; }\n        }\n\n        // Because local and private resolution has failed, clear all but `name` and `type`\n        // to proceed with top-level resolution\n        s.rootName = s.collection = s.namespace = undefined;\n      } else {\n        assert('Referrer must either be \"absolute\" or include a `type` to determine the associated type', r.type);\n\n        // Look in the definitive collection for the associated type\n        s.collection = this._definitiveCollection(r.type);\n        assert(`'${r.type}' does not have a definitive collection`, s.collection);\n      }\n    }\n\n    // If the collection is unspecified, use the definitive collection for the `type`\n    if (!s.collection) {\n      s.collection = this._definitiveCollection(s.type);\n      assert(`'${s.type}' does not have a definitive collection`, s.collection);\n    }\n\n    if (!s.rootName) {\n      // If the root name is unspecified, try the app's `rootName` first\n      s.rootName = this.config.app.rootName || 'app';\n      if (result = this._serializeAndVerify(s)) { return result; }\n\n      // Then look for an addon with a matching `rootName`\n      let addonDef;\n      if (s.namespace) {\n        addonDef = this.config.addons && this.config.addons[s.namespace];\n        s.rootName = s.namespace;\n        s.namespace = undefined;\n\n      } else {\n        addonDef = this.config.addons && this.config.addons[s.name];\n        s.rootName = s.name;\n        s.name = 'main';\n      }\n    }\n\n    if (result = this._serializeAndVerify(s)) { return result; }\n  }\n\n  retrieve(specifier: string): any {\n    return this.registry.get(specifier);\n  }\n\n  resolve(specifier: string, referrer?: string): any {\n    let id = this.identify(specifier, referrer);\n    if (id) {\n      return this.retrieve(id);\n    }\n  }\n\n  private _definitiveCollection(type: string): string {\n    let typeDef = this.config.types[type];\n    assert(`'${type}' is not a recognized type`, typeDef);\n    return typeDef.definitiveCollection;\n  }\n\n  private _serializeAndVerify(specifier: Specifier): string {\n    let serialized = serializeSpecifier(specifier);\n    if (this.registry.has(serialized)) {\n      return serialized;\n    }\n  }\n}\n","// There is a small whitelist of namespaced attributes specially\n// enumerated in\n// https://www.w3.org/TR/html/syntax.html#attributes-0\n//\n// > When a foreign element has one of the namespaced attributes given by\n// > the local name and namespace of the first and second cells of a row\n// > from the following table, it must be written using the name given by\n// > the third cell from the same row.\n//\n// In all other cases, colons are interpreted as a regular character\n// with no special meaning:\n//\n// > No other namespaced attribute can be expressed in the HTML syntax.\nvar XLINK = 'http://www.w3.org/1999/xlink';\nvar XML = 'http://www.w3.org/XML/1998/namespace';\nvar XMLNS = 'http://www.w3.org/2000/xmlns/';\nvar WHITELIST = {\n    'xlink:actuate': XLINK,\n    'xlink:arcrole': XLINK,\n    'xlink:href': XLINK,\n    'xlink:role': XLINK,\n    'xlink:show': XLINK,\n    'xlink:title': XLINK,\n    'xlink:type': XLINK,\n    'xml:base': XML,\n    'xml:lang': XML,\n    'xml:space': XML,\n    'xmlns': XMLNS,\n    'xmlns:xlink': XMLNS\n};\nexport function getAttrNamespace(attrName) {\n    return WHITELIST[attrName] || null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZXNwYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5hbWVzcGFjZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBZ0U7QUFDaEUsQUFBZ0I7QUFDaEIsQUFBc0Q7QUFDdEQsQUFBRTtBQUNGLEFBQXlFO0FBQ3pFLEFBQXdFO0FBQ3hFLEFBQXlFO0FBQ3pFLEFBQXNDO0FBQ3RDLEFBQUU7QUFDRixBQUFvRTtBQUNwRSxBQUEyQjtBQUMzQixBQUFFO0FBQ0YsQUFBdUU7QUFFdkUsSUFBTSxBQUFLLFFBQUcsQUFBOEIsQUFBQztBQUM3QyxJQUFNLEFBQUcsTUFBRyxBQUFzQyxBQUFDO0FBQ25ELElBQU0sQUFBSyxRQUFHLEFBQStCLEFBQUM7QUFFOUMsSUFBTSxBQUFTO0FBQ2IsQUFBZSxxQkFBRSxBQUFLO0FBQ3RCLEFBQWUscUJBQUUsQUFBSztBQUN0QixBQUFZLGtCQUFFLEFBQUs7QUFDbkIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVksa0JBQUUsQUFBSztBQUNuQixBQUFhLG1CQUFFLEFBQUs7QUFDcEIsQUFBWSxrQkFBRSxBQUFLO0FBQ25CLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVUsZ0JBQUUsQUFBRztBQUNmLEFBQVcsaUJBQUUsQUFBRztBQUNoQixBQUFPLGFBQUUsQUFBSztBQUNkLEFBQWEsbUJBQUUsQUFBSyxBQUNyQixBQUFDO0FBYmdCO0FBZWxCLEFBQU0saUNBQTJCLEFBQWdCO0FBQy9DLEFBQU0sV0FBQyxBQUFTLFVBQUMsQUFBUSxBQUFDLGFBQUksQUFBSSxBQUFDLEFBQ3JDO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGVyZSBpcyBhIHNtYWxsIHdoaXRlbGlzdCBvZiBuYW1lc3BhY2VkIGF0dHJpYnV0ZXMgc3BlY2lhbGx5XG4vLyBlbnVtZXJhdGVkIGluXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbC9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTBcbi8vXG4vLyA+IFdoZW4gYSBmb3JlaWduIGVsZW1lbnQgaGFzIG9uZSBvZiB0aGUgbmFtZXNwYWNlZCBhdHRyaWJ1dGVzIGdpdmVuIGJ5XG4vLyA+IHRoZSBsb2NhbCBuYW1lIGFuZCBuYW1lc3BhY2Ugb2YgdGhlIGZpcnN0IGFuZCBzZWNvbmQgY2VsbHMgb2YgYSByb3dcbi8vID4gZnJvbSB0aGUgZm9sbG93aW5nIHRhYmxlLCBpdCBtdXN0IGJlIHdyaXR0ZW4gdXNpbmcgdGhlIG5hbWUgZ2l2ZW4gYnlcbi8vID4gdGhlIHRoaXJkIGNlbGwgZnJvbSB0aGUgc2FtZSByb3cuXG4vL1xuLy8gSW4gYWxsIG90aGVyIGNhc2VzLCBjb2xvbnMgYXJlIGludGVycHJldGVkIGFzIGEgcmVndWxhciBjaGFyYWN0ZXJcbi8vIHdpdGggbm8gc3BlY2lhbCBtZWFuaW5nOlxuLy9cbi8vID4gTm8gb3RoZXIgbmFtZXNwYWNlZCBhdHRyaWJ1dGUgY2FuIGJlIGV4cHJlc3NlZCBpbiB0aGUgSFRNTCBzeW50YXguXG5cbmNvbnN0IFhMSU5LID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuY29uc3QgWE1MID0gJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSc7XG5jb25zdCBYTUxOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLyc7XG5cbmNvbnN0IFdISVRFTElTVCA9IHtcbiAgJ3hsaW5rOmFjdHVhdGUnOiBYTElOSyxcbiAgJ3hsaW5rOmFyY3JvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOmhyZWYnOiBYTElOSyxcbiAgJ3hsaW5rOnJvbGUnOiBYTElOSyxcbiAgJ3hsaW5rOnNob3cnOiBYTElOSyxcbiAgJ3hsaW5rOnRpdGxlJzogWExJTkssXG4gICd4bGluazp0eXBlJzogWExJTkssXG4gICd4bWw6YmFzZSc6IFhNTCxcbiAgJ3htbDpsYW5nJzogWE1MLFxuICAneG1sOnNwYWNlJzogWE1MLFxuICAneG1sbnMnOiBYTUxOUyxcbiAgJ3htbG5zOnhsaW5rJzogWE1MTlNcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdHRyTmFtZXNwYWNlKGF0dHJOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIFdISVRFTElTVFthdHRyTmFtZV0gfHwgbnVsbDtcbn0iXX0=","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { ensureGuid } from './guid';\nvar proto = Object.create(null, {\n    // without this, we will always still end up with (new\n    // EmptyObject()).constructor === Object\n    constructor: {\n        value: undefined,\n        enumerable: false,\n        writable: true\n    }\n});\nfunction EmptyObject() {}\nEmptyObject.prototype = proto;\nexport function dict() {\n    // let d = Object.create(null);\n    // d.x = 1;\n    // delete d.x;\n    // return d;\n    return new EmptyObject();\n}\nexport var DictSet = function () {\n    function DictSet() {\n        _classCallCheck(this, DictSet);\n\n        this.dict = dict();\n    }\n\n    DictSet.prototype.add = function add(obj) {\n        if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;\n        return this;\n    };\n\n    DictSet.prototype.delete = function _delete(obj) {\n        if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];\n    };\n\n    DictSet.prototype.forEach = function forEach(callback) {\n        var dict = this.dict;\n\n        Object.keys(dict).forEach(function (key) {\n            return callback(dict[key]);\n        });\n    };\n\n    DictSet.prototype.toArray = function toArray() {\n        return Object.keys(this.dict);\n    };\n\n    return DictSet;\n}();\nexport var Stack = function () {\n    function Stack() {\n        _classCallCheck(this, Stack);\n\n        this.stack = [];\n        this.current = null;\n    }\n\n    Stack.prototype.toArray = function toArray() {\n        return this.stack;\n    };\n\n    Stack.prototype.push = function push(item) {\n        this.current = item;\n        this.stack.push(item);\n    };\n\n    Stack.prototype.pop = function pop() {\n        var item = this.stack.pop();\n        var len = this.stack.length;\n        this.current = len === 0 ? null : this.stack[len - 1];\n        return item === undefined ? null : item;\n    };\n\n    Stack.prototype.isEmpty = function isEmpty() {\n        return this.stack.length === 0;\n    };\n\n    return Stack;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLEFBQU8sU0FBVyxBQUFVLEFBQUUsa0JBQU0sQUFBUSxBQUFDO0FBYTdDLElBQUksQUFBSyxlQUFVLEFBQU0sT0FBQyxBQUFJO0FBQzVCLEFBQXNEO0FBQ3RELEFBQXdDO0FBQ3hDLEFBQVc7QUFDVCxBQUFLLGVBQUUsQUFBUztBQUNoQixBQUFVLG9CQUFFLEFBQUs7QUFDakIsQUFBUSxrQkFBRSxBQUFJLEFBQ2YsQUFDRixBQUFDLEFBQUM7QUFMWTtBQUhpQixDQUFwQixBQUFNO0FBVWxCLHVCQUF3QixDQUFDO0FBQ3pCLEFBQVcsWUFBQyxBQUFTLFlBQUcsQUFBSyxBQUFDO0FBRTlCLEFBQU07QUFDSixBQUErQjtBQUMvQixBQUFXO0FBQ1gsQUFBYztBQUNkLEFBQVk7QUFDWixBQUFNLFdBQUMsSUFBSyxBQUFtQixBQUFFLEFBQUMsQUFDcEM7QUFBQztBQUlELEFBQU07QUFHSjs7O0FBQ0UsQUFBSSxhQUFDLEFBQUksT0FBRyxBQUFJLEFBQUssQUFBQyxBQUN4QjtBQUFDOztzQkFFRCxBQUFHLG1CQUFDLEFBQU07QUFDUixBQUFFLEFBQUMsWUFBQyxPQUFPLEFBQUcsUUFBSyxBQUFRLEFBQUMsVUFBQyxBQUFJLEtBQUMsQUFBSSxLQUFNLEFBQUcsQUFBQyxPQUFHLEFBQUcsQUFBQyxBQUN2RCxBQUFJLFNBQUMsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFVLFdBQU0sQUFBRyxBQUFDLEFBQUMsUUFBRyxBQUFHLEFBQUM7QUFDM0MsQUFBTSxlQUFDLEFBQUksQUFBQyxBQUNkO0FBQUM7O3NCQUVELEFBQU0sMEJBQUMsQUFBTTtBQUNYLEFBQUUsQUFBQyxZQUFDLE9BQU8sQUFBRyxRQUFLLEFBQVEsQUFBQyxVQUFDLE9BQU8sQUFBSSxLQUFDLEFBQUksS0FBTSxBQUFHLEFBQUMsQUFBQyxBQUN4RCxBQUFJLFVBQUMsQUFBRSxBQUFDLElBQUUsQUFBVyxJQUFDLEFBQUssQUFBQyxPQUFDLE9BQU8sQUFBSSxLQUFDLEFBQUksS0FBRSxBQUFXLElBQUMsQUFBSyxBQUFDLEFBQUMsQUFDcEU7QUFBQzs7c0JBRUQsQUFBTywyQkFBQyxBQUEyQjtBQUNqQyxBQUFJLFlBQUUsQUFBSSxBQUFFLE9BQUcsQUFBSSxBQUFDOztBQUNwQixBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxNQUFDLEFBQU87QUFBQyxBQUFHLG1CQUFJLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBRyxBQUFDLEFBQUMsQUFBQyxBQUFDLEFBQ3hEOztBQUFDOztzQkFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ2hDO0FBQUMsQUFDRjs7OztBQUVELEFBQU07QUFBTjs7O0FBQ1UsYUFBSyxRQUFRLEFBQUUsQUFBQztBQUNqQixhQUFPLFVBQWMsQUFBSSxBQUFDLEFBc0JuQztBQUFDOztvQkFwQkMsQUFBTztBQUNMLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQ3BCO0FBQUM7O29CQUVELEFBQUkscUJBQUMsQUFBTztBQUNWLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBSSxBQUFDO0FBQ3BCLEFBQUksYUFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ3hCO0FBQUM7O29CQUVELEFBQUc7QUFDRCxZQUFJLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQUcsQUFBRSxBQUFDO0FBQzVCLFlBQUksQUFBRyxNQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxBQUFDO0FBQzVCLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBRyxRQUFLLEFBQUMsSUFBRyxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLE1BQUcsQUFBQyxBQUFDLEFBQUM7QUFFdEQsQUFBTSxlQUFDLEFBQUksU0FBSyxBQUFTLFlBQUcsQUFBSSxPQUFHLEFBQUksQUFBQyxBQUMxQztBQUFDOztvQkFFRCxBQUFPO0FBQ0wsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxXQUFLLEFBQUMsQUFBQyxBQUNqQztBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNHdWlkLCBlbnN1cmVHdWlkIH0gZnJvbSAnLi9ndWlkJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpY3Q8VD4ge1xuICBbaW5kZXg6IHN0cmluZ106IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0PFQ+IHtcbiAgYWRkKHZhbHVlOiBUKTogU2V0PFQ+O1xuICBkZWxldGUodmFsdWU6IFQpOiB2b2lkO1xuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmxldCBwcm90byA9IE9iamVjdC5jcmVhdGUobnVsbCwge1xuICAvLyB3aXRob3V0IHRoaXMsIHdlIHdpbGwgYWx3YXlzIHN0aWxsIGVuZCB1cCB3aXRoIChuZXdcbiAgLy8gRW1wdHlPYmplY3QoKSkuY29uc3RydWN0b3IgPT09IE9iamVjdFxuICBjb25zdHJ1Y3Rvcjoge1xuICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIEVtcHR5T2JqZWN0KCkge31cbkVtcHR5T2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuXG5leHBvcnQgZnVuY3Rpb24gZGljdDxUPigpOiBEaWN0PFQ+IHtcbiAgLy8gbGV0IGQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBkLnggPSAxO1xuICAvLyBkZWxldGUgZC54O1xuICAvLyByZXR1cm4gZDtcbiAgcmV0dXJuIG5ldyAoRW1wdHlPYmplY3QgYXMgYW55KSgpO1xufVxuXG5leHBvcnQgdHlwZSBTZXRNZW1iZXIgPSBIYXNHdWlkIHwgc3RyaW5nO1xuXG5leHBvcnQgY2xhc3MgRGljdFNldDxUIGV4dGVuZHMgU2V0TWVtYmVyPiBpbXBsZW1lbnRzIFNldDxUPiB7XG4gIHByaXZhdGUgZGljdDogRGljdDxUPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRpY3QgPSBkaWN0PFQ+KCk7XG4gIH1cblxuICBhZGQob2JqOiBUKTogU2V0PFQ+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHRoaXMuZGljdFs8YW55Pm9ial0gPSBvYmo7XG4gICAgZWxzZSB0aGlzLmRpY3RbZW5zdXJlR3VpZCg8YW55Pm9iaildID0gb2JqO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKG9iajogVCkge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgZGVsZXRlIHRoaXMuZGljdFs8YW55Pm9ial07XG4gICAgZWxzZSBpZiAoKG9iaiBhcyBhbnkpLl9ndWlkKSBkZWxldGUgdGhpcy5kaWN0WyhvYmogYXMgYW55KS5fZ3VpZF07XG4gIH1cblxuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCkge1xuICAgIGxldCB7IGRpY3QgfSA9IHRoaXM7XG4gICAgT2JqZWN0LmtleXMoZGljdCkuZm9yRWFjaChrZXkgPT4gY2FsbGJhY2soZGljdFtrZXldKSk7XG4gIH1cblxuICB0b0FycmF5KCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5kaWN0KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhY2s8VD4ge1xuICBwcml2YXRlIHN0YWNrOiBUW10gPSBbXTtcbiAgcHVibGljIGN1cnJlbnQ6IE9wdGlvbjxUPiA9IG51bGw7XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIHJldHVybiB0aGlzLnN0YWNrO1xuICB9XG5cbiAgcHVzaChpdGVtOiBUKSB7XG4gICAgdGhpcy5jdXJyZW50ID0gaXRlbTtcbiAgICB0aGlzLnN0YWNrLnB1c2goaXRlbSk7XG4gIH1cblxuICBwb3AoKTogT3B0aW9uPFQ+IHtcbiAgICBsZXQgaXRlbSA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgbGV0IGxlbiA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIHRoaXMuY3VycmVudCA9IGxlbiA9PT0gMCA/IG51bGwgOiB0aGlzLnN0YWNrW2xlbiAtIDFdO1xuXG4gICAgcmV0dXJuIGl0ZW0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBpdGVtO1xuICB9XG5cbiAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGggPT09IDA7XG4gIH1cbn1cbiJdfQ==","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nexport var ListNode = function ListNode(value) {\n    _classCallCheck(this, ListNode);\n\n    this.next = null;\n    this.prev = null;\n    this.value = value;\n};\nexport var LinkedList = function () {\n    function LinkedList() {\n        _classCallCheck(this, LinkedList);\n\n        this.clear();\n    }\n\n    LinkedList.fromSlice = function fromSlice(slice) {\n        var list = new LinkedList();\n        slice.forEachNode(function (n) {\n            return list.append(n.clone());\n        });\n        return list;\n    };\n\n    LinkedList.prototype.head = function head() {\n        return this._head;\n    };\n\n    LinkedList.prototype.tail = function tail() {\n        return this._tail;\n    };\n\n    LinkedList.prototype.clear = function clear() {\n        this._head = this._tail = null;\n    };\n\n    LinkedList.prototype.isEmpty = function isEmpty() {\n        return this._head === null;\n    };\n\n    LinkedList.prototype.toArray = function toArray() {\n        var out = [];\n        this.forEachNode(function (n) {\n            return out.push(n);\n        });\n        return out;\n    };\n\n    LinkedList.prototype.splice = function splice(start, end, reference) {\n        var before = void 0;\n        if (reference === null) {\n            before = this._tail;\n            this._tail = end;\n        } else {\n            before = reference.prev;\n            end.next = reference;\n            reference.prev = end;\n        }\n        if (before) {\n            before.next = start;\n            start.prev = before;\n        }\n    };\n\n    LinkedList.prototype.nextNode = function nextNode(node) {\n        return node.next;\n    };\n\n    LinkedList.prototype.prevNode = function prevNode(node) {\n        return node.prev;\n    };\n\n    LinkedList.prototype.forEachNode = function forEachNode(callback) {\n        var node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = node.next;\n        }\n    };\n\n    LinkedList.prototype.contains = function contains(needle) {\n        var node = this._head;\n        while (node !== null) {\n            if (node === needle) return true;\n            node = node.next;\n        }\n        return false;\n    };\n\n    LinkedList.prototype.insertBefore = function insertBefore(node) {\n        var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        if (reference === null) return this.append(node);\n        if (reference.prev) reference.prev.next = node;else this._head = node;\n        node.prev = reference.prev;\n        node.next = reference;\n        reference.prev = node;\n        return node;\n    };\n\n    LinkedList.prototype.append = function append(node) {\n        var tail = this._tail;\n        if (tail) {\n            tail.next = node;\n            node.prev = tail;\n            node.next = null;\n        } else {\n            this._head = node;\n        }\n        return this._tail = node;\n    };\n\n    LinkedList.prototype.pop = function pop() {\n        if (this._tail) return this.remove(this._tail);\n        return null;\n    };\n\n    LinkedList.prototype.prepend = function prepend(node) {\n        if (this._head) return this.insertBefore(node, this._head);\n        return this._head = this._tail = node;\n    };\n\n    LinkedList.prototype.remove = function remove(node) {\n        if (node.prev) node.prev.next = node.next;else this._head = node.next;\n        if (node.next) node.next.prev = node.prev;else this._tail = node.prev;\n        return node;\n    };\n\n    return LinkedList;\n}();\nexport var ListSlice = function () {\n    function ListSlice(head, tail) {\n        _classCallCheck(this, ListSlice);\n\n        this._head = head;\n        this._tail = tail;\n    }\n\n    ListSlice.toList = function toList(slice) {\n        var list = new LinkedList();\n        slice.forEachNode(function (n) {\n            return list.append(n.clone());\n        });\n        return list;\n    };\n\n    ListSlice.prototype.forEachNode = function forEachNode(callback) {\n        var node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = this.nextNode(node);\n        }\n    };\n\n    ListSlice.prototype.contains = function contains(needle) {\n        var node = this._head;\n        while (node !== null) {\n            if (node === needle) return true;\n            node = node.next;\n        }\n        return false;\n    };\n\n    ListSlice.prototype.head = function head() {\n        return this._head;\n    };\n\n    ListSlice.prototype.tail = function tail() {\n        return this._tail;\n    };\n\n    ListSlice.prototype.toArray = function toArray() {\n        var out = [];\n        this.forEachNode(function (n) {\n            return out.push(n);\n        });\n        return out;\n    };\n\n    ListSlice.prototype.nextNode = function nextNode(node) {\n        if (node === this._tail) return null;\n        return node.next;\n    };\n\n    ListSlice.prototype.prevNode = function prevNode(node) {\n        if (node === this._head) return null;\n        return node.prev;\n    };\n\n    ListSlice.prototype.isEmpty = function isEmpty() {\n        return false;\n    };\n\n    return ListSlice;\n}();\nexport var EMPTY_SLICE = new ListSlice(null, null);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export var HAS_NATIVE_WEAKMAP = function () {\n    // detect if `WeakMap` is even present\n    var hasWeakMap = typeof WeakMap === 'function';\n    if (!hasWeakMap) {\n        return false;\n    }\n    var instance = new WeakMap();\n    // use `Object`'s `.toString` directly to prevent us from detecting\n    // polyfills as native weakmaps\n    return Object.prototype.toString.call(instance) === '[object WeakMap]';\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha21hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYWttYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBTSxXQUFPLEFBQWtCLHFCQUFJO0FBQ2pDLEFBQXNDO0FBQ3RDLFFBQUksQUFBVSxhQUFHLE9BQU8sQUFBTyxZQUFLLEFBQVUsQUFBQztBQUMvQyxBQUFFLEFBQUMsUUFBQyxDQUFDLEFBQVUsQUFBQyxZQUFDLEFBQUM7QUFBQyxBQUFNLGVBQUMsQUFBSyxBQUFDLEFBQUM7QUFBQztBQUVsQyxRQUFJLEFBQVEsV0FBRyxJQUFJLEFBQU8sQUFBRSxBQUFDO0FBQzdCLEFBQW1FO0FBQ25FLEFBQStCO0FBQy9CLEFBQU0sV0FBQyxBQUFNLE9BQUMsQUFBUyxVQUFDLEFBQVEsU0FBQyxBQUFJLEtBQUMsQUFBUSxBQUFDLGNBQUssQUFBa0IsQUFBQyxBQUN6RTtBQUFDLEFBQUMsQUFBRSxBQUFDLENBVDZCLEVBQTNCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEhBU19OQVRJVkVfV0VBS01BUCA9IChmdW5jdGlvbigpIHtcbiAgLy8gZGV0ZWN0IGlmIGBXZWFrTWFwYCBpcyBldmVuIHByZXNlbnRcbiAgbGV0IGhhc1dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJztcbiAgaWYgKCFoYXNXZWFrTWFwKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIGxldCBpbnN0YW5jZSA9IG5ldyBXZWFrTWFwKCk7XG4gIC8vIHVzZSBgT2JqZWN0YCdzIGAudG9TdHJpbmdgIGRpcmVjdGx5IHRvIHByZXZlbnQgdXMgZnJvbSBkZXRlY3RpbmdcbiAgLy8gcG9seWZpbGxzIGFzIG5hdGl2ZSB3ZWFrbWFwc1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGluc3RhbmNlKSA9PT0gJ1tvYmplY3QgV2Vha01hcF0nO1xufSkoKTtcbiJdfQ==","import { HAS_NATIVE_WEAKMAP } from './weakmap';\nvar HAS_TYPED_ARRAYS = typeof Uint32Array !== 'undefined';\nvar A = void 0;\nif (HAS_TYPED_ARRAYS) {\n    A = Uint32Array;\n} else {\n    A = Array;\n}\nexport default A;\nexport var EMPTY_ARRAY = HAS_NATIVE_WEAKMAP ? Object.freeze([]) : [];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcnJheS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUFPLFNBQUUsQUFBa0IsQUFBRSwwQkFBTSxBQUFXLEFBQUM7QUFFL0MsSUFBTSxBQUFnQixtQkFBRyxPQUFPLEFBQVcsZ0JBQUssQUFBVyxBQUFDO0FBRTVELElBQUksQUFBQyxBQUFDO0FBRU4sQUFBRSxBQUFDLElBQUMsQUFBZ0IsQUFBQyxrQkFBQyxBQUFDO0FBQ3JCLEFBQUMsUUFBRyxBQUFXLEFBQUMsQUFDbEI7QUFBQyxBQUFDLEFBQUksT0FBQyxBQUFDO0FBQ04sQUFBQyxRQUFHLEFBQUssQUFBQyxBQUNaO0FBQUM7QUFFRCxlQUFlLEFBQUMsQUFBQztBQUVqQixBQUFNLE9BQUMsSUFBTSxBQUFXLEFBQVUsY0FBQyxBQUFrQixxQkFBRyxBQUFNLE9BQUMsQUFBTSxPQUFDLEFBQUUsQUFBQyxNQUFHLEFBQUUsQUFBUSxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSEFTX05BVElWRV9XRUFLTUFQIH0gZnJvbSAnLi93ZWFrbWFwJztcblxuY29uc3QgSEFTX1RZUEVEX0FSUkFZUyA9IHR5cGVvZiBVaW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCc7XG5cbmxldCBBO1xuXG5pZiAoSEFTX1RZUEVEX0FSUkFZUykge1xuICBBID0gVWludDMyQXJyYXk7XG59IGVsc2Uge1xuICBBID0gQXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEE7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWTogYW55W10gPSAoSEFTX05BVElWRV9XRUFLTUFQID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXSkgYXMgYW55OyJdfQ==","import { Tag, DirtyableTag, TagWrapper, combine, CONSTANT_TAG } from '@glimmer/reference';\nimport { dict, Dict } from '@glimmer/util';\n\n/**\n * @decorator\n *\n * Marks a property as tracked.\n *\n * By default, a component's properties are expected to be static,\n * meaning you are not able to update them and have the template update accordingly.\n * Marking a property as tracked means that when that property changes,\n * a rerender of the component is scheduled so the template is kept up to date.\n *\n * @param dependencies Optional dependents to be tracked.\n */\nexport function tracked(...dependencies: string[]): MethodDecorator;\nexport function tracked(target: any, key: any): any;\nexport function tracked(target: any, key: any, descriptor: PropertyDescriptor): PropertyDescriptor;\nexport function tracked(...dependencies: any[]): any {\n  let [target, key, descriptor] = dependencies;\n\n  if (typeof target === \"string\") {\n    return function(target: any, key: string | Symbol, descriptor: PropertyDescriptor) {\n      return descriptorForTrackedComputedProperty(target, key, descriptor, dependencies);\n    }\n  } else {\n    if (descriptor) {\n      return descriptorForTrackedComputedProperty(target, key, descriptor, []);\n    } else {\n      installTrackedProperty(target, key);\n    }\n  }\n}\n\nfunction descriptorForTrackedComputedProperty(target: any, key: any, descriptor: PropertyDescriptor, dependencies: string[]): PropertyDescriptor {\n  let meta = metaFor(target);\n  meta.trackedProperties[key] = true;\n  meta.trackedPropertyDependencies[key] = dependencies || [];\n\n  return {\n    enumerable: true,\n    configurable: false,\n    get: descriptor.get,\n    set: function() {\n      metaFor(this).dirtyableTagFor(key).inner.dirty();\n      descriptor.set.apply(this, arguments);\n      propertyDidChange();\n    }\n  }\n}\n\nexport type Key = string;\n\n/**\n  Installs a getter/setter for change tracking. The accessor\n  acts just like a normal property, but it triggers the `propertyDidChange`\n  hook when written to.\n\n  Values are saved on the object using a \"shadow key,\" or a symbol based on the\n  tracked property name. Sets write the value to the shadow key, and gets read\n  from it.\n */\nfunction installTrackedProperty(target: any, key: Key) {\n  let value: any;\n  let shadowKey = Symbol(key);\n\n  let meta = metaFor(target);\n  meta.trackedProperties[key] = true;\n\n  if (target[key] !== undefined) {\n    value = target[key];\n  }\n\n  Object.defineProperty(target, key, {\n    configurable: true,\n\n    get() {\n      return this[shadowKey];\n    },\n\n    set(newValue) {\n      metaFor(this).dirtyableTagFor(key).inner.dirty();\n      this[shadowKey] = newValue;\n      propertyDidChange();\n    }\n  });\n}\n\n/**\n * Stores bookkeeping information about tracked properties on the target object\n * and includes helper methods for manipulating and retrieving that data.\n *\n * Computed properties (i.e., tracked getters/setters) deserve some explanation.\n * A computed property is invalidated when either it is set, or one of its\n * dependencies is invalidated. Therefore, we store two tags for each computed\n * property:\n *\n * 1. The dirtyable tag that we invalidate when the setter is invoked.\n * 2. A union tag (tag combinator) of the dirtyable tag and all of the computed\n *    property's dependencies' tags, used by Glimmer to determine \"does this\n *    computed property need to be recomputed?\"\n */\nexport default class Meta {\n  tags: Dict<Tag>;\n  computedPropertyTags: Dict<TagWrapper<DirtyableTag>>;\n  trackedProperties: Dict<boolean>;\n  trackedPropertyDependencies: Dict<string[]>;\n\n  constructor(parent: Meta) {\n    this.tags = dict<Tag>();\n    this.computedPropertyTags = dict<TagWrapper<DirtyableTag>>();\n    this.trackedProperties = parent ? Object.create(parent.trackedProperties) : dict<boolean>();\n    this.trackedPropertyDependencies = parent ? Object.create(parent.trackedPropertyDependencies) : dict<string[]>();\n  }\n\n  /**\n   * The tag representing whether the given property should be recomputed. Used\n   * by e.g. Glimmer VM to detect when a property should be re-rendered. Think\n   * of this as the \"public-facing\" tag.\n   *\n   * For static tracked properties, this is a single DirtyableTag. For computed\n   * properties, it is a combinator of the property's DirtyableTag as well as\n   * all of its dependencies' tags.\n   */\n  tagFor(key: Key): Tag {\n    let tag = this.tags[key];\n    if (tag) { return tag; }\n\n    let dependencies;\n    if (dependencies = this.trackedPropertyDependencies[key]) {\n      return this.tags[key] = combinatorForComputedProperties(this, key, dependencies);\n    }\n\n    return this.tags[key] = DirtyableTag.create();\n  }\n\n  /**\n   * The tag used internally to invalidate when a tracked property is set. For\n   * static properties, this is the same DirtyableTag returned from `tagFor`.\n   * For computed properties, it is the DirtyableTag used as one of the tags in\n   * the tag combinator of the CP and its dependencies.\n  */\n  dirtyableTagFor(key: Key): TagWrapper<DirtyableTag> {\n    let dependencies = this.trackedPropertyDependencies[key];\n    let tag;\n\n    if (dependencies) {\n      // The key is for a computed property.\n      tag = this.computedPropertyTags[key];\n      if (tag) { return tag; }\n      return this.computedPropertyTags[key] = DirtyableTag.create();\n    } else {\n      // The key is for a static property.\n      tag = this.tags[key];\n      if (tag) { return tag as TagWrapper<DirtyableTag>; }\n      return this.tags[key] = DirtyableTag.create();\n    }\n  }\n}\n\nfunction combinatorForComputedProperties(meta: Meta, key: Key, dependencies: Key[] | void): Tag {\n  // Start off with the tag for the CP's own dirty state.\n  let tags: Tag[] = [meta.dirtyableTagFor(key)];\n\n  // Next, add in all of the tags for its dependencies.\n  if (dependencies && dependencies.length) {\n    for (let i = 0; i < dependencies.length; i++) {\n      tags.push(meta.tagFor(dependencies[i]));\n    }\n  }\n\n  // Return a combinator across the CP's tags and its dependencies' tags.\n  return combine(tags);\n}\n\nexport interface Interceptors {\n  [key: string]: boolean;\n}\n\nlet META = Symbol(\"ember-object\");\n\nexport function metaFor(obj: any): Meta {\n  let meta = obj[META];\n  if (meta && hasOwnProperty(obj, META)) {\n    return meta;\n  }\n\n  return obj[META] = new Meta(meta);\n}\n\nlet hOP = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(obj: any, key: symbol) {\n  return hOP.call(obj, key);\n}\n\nlet propertyDidChange = function() {};\n\nexport function setPropertyDidChange(cb: () => void) {\n  propertyDidChange = cb;\n}\n\nexport function hasTag(obj: any, key: string): boolean {\n  let meta = obj[META] as Meta;\n\n  if (!obj[META]) { return false; }\n  if (!meta.trackedProperties[key]) { return false; }\n\n  return true;\n}\n\nexport class UntrackedPropertyError extends Error {\n  static for(obj: any, key: string): UntrackedPropertyError {\n    return new UntrackedPropertyError(obj, key, `The property '${key}' on ${obj} was changed after being rendered. If you want to change a property used in a template after the component has rendered, mark the property as a tracked property with the @tracked decorator.`);\n  }\n\n  constructor(public target: any, public key: string, message: string) {\n    super(message);\n  }\n}\n\n/**\n * Function that can be used in development mode to generate more meaningful\n * error messages.\n */\nexport interface UntrackedPropertyErrorThrower {\n  (obj: any, key: string): void;\n}\n\nfunction defaultErrorThrower(obj: any, key: string): UntrackedPropertyError {\n  throw UntrackedPropertyError.for(obj, key);\n}\n\nexport function tagForProperty(obj: any, key: string, throwError: UntrackedPropertyErrorThrower = defaultErrorThrower): Tag {\n  if (typeof obj === 'object' && obj) {\n    if (!hasTag(obj, key)) {\n      installDevModeErrorInterceptor(obj, key, throwError);\n    }\n\n    let meta = metaFor(obj);\n    return meta.tagFor(key);\n  } else {\n    return CONSTANT_TAG;\n  }\n}\n\n/**\n * In development mode only, we install an ad hoc setter on properties where a\n * tag is requested (i.e., it was used in a template) without being tracked. In\n * cases where the property is set, we raise an error.\n */\nfunction installDevModeErrorInterceptor(obj: object, key: string, throwError: UntrackedPropertyErrorThrower) {\n  let target = obj;\n  let descriptor: PropertyDescriptor;\n\n  // Find the descriptor for the current property. We may need to walk the\n  // prototype chain to do so. If the property is undefined, we may never get a\n  // descriptor here.\n  let hasOwnDescriptor = true;\n  while (target) {\n    descriptor = Object.getOwnPropertyDescriptor(target, key);\n    if (descriptor) { break; }\n    hasOwnDescriptor = false;\n    target = Object.getPrototypeOf(target);\n  }\n\n  // If possible, define a property descriptor that passes through the current\n  // value on reads but throws an exception on writes.\n  if (descriptor) {\n    if (descriptor.configurable || !hasOwnDescriptor) {\n      Object.defineProperty(obj, key, {\n        configurable: descriptor.configurable,\n        enumerable: descriptor.enumerable,\n\n        get() {\n          if (descriptor.get) {\n            return descriptor.get.call(this);\n          } else {\n            return descriptor.value;\n          }\n        },\n\n        set() {\n          throwError(this, key);\n        }\n      });\n    }\n  } else {\n    Object.defineProperty(obj, key, {\n      set() {\n        throwError(this, key);\n      }\n    });\n  }\n}\n","import {\n  dict\n} from '@glimmer/util';\nimport {\n  PathReference,\n  CONSTANT_TAG,\n  ConstReference,\n  DirtyableTag,\n  UpdatableTag,\n  combine,\n  isConst,\n  Tag,\n  TagWrapper\n} from '@glimmer/reference';\nimport {\n  ConditionalReference as GlimmerConditionalReference,\n  PrimitiveReference\n} from '@glimmer/runtime';\nimport { tagForProperty, UntrackedPropertyError } from \"./tracked\";\n\n/**\n * The base PathReference.\n */\nexport abstract class ComponentPathReference<T> implements PathReference<T> {\n  abstract value(): T;\n  abstract get tag(): Tag;\n\n  get(key: string): PathReference<any> {\n    return PropertyReference.create(this, key);\n  }\n}\n\nexport abstract class CachedReference<T> extends ComponentPathReference<T> {\n  private _lastRevision: number | null = null;\n  private _lastValue: any = null;\n\n  abstract compute(): T;\n\n  value() {\n    let { tag, _lastRevision, _lastValue } = this;\n\n    if (!_lastRevision || !tag.validate(_lastRevision)) {\n      _lastValue = this._lastValue = this.compute();\n      this._lastRevision = tag.value();\n    }\n\n    return _lastValue;\n  }\n}\n\nexport class RootReference extends ConstReference<object> {\n  private children = dict<RootPropertyReference>();\n\n  get(propertyKey: string) {\n    let ref = this.children[propertyKey];\n\n    if (!ref) {\n      ref = this.children[propertyKey] = new RootPropertyReference(this.inner, propertyKey);\n    }\n\n    return ref;\n  }\n}\n\nexport abstract class PropertyReference extends CachedReference<any> {\n  static create(parentReference: PathReference<any>, propertyKey: string) {\n    if (isConst(parentReference)) {\n      return new RootPropertyReference(parentReference.value(), propertyKey);\n    } else {\n      return new NestedPropertyReference(parentReference, propertyKey);\n    }\n  }\n\n  get(key: string): PathReference<any>  {\n    return new NestedPropertyReference(this, key);\n  }\n}\n\nfunction buildError(obj: any, key: string) {\n  let message = `The '${key}' property on the ${obj} was changed after it had been rendered. Properties that change after being rendered must be tracked. Use the @tracked decorator to mark this as a tracked property.`;\n  throw new UntrackedPropertyError(obj, key, message);\n}\n\nexport class RootPropertyReference extends PropertyReference {\n  tag: Tag;\n  private _parentValue: object;\n  private _propertyKey: string;\n\n  constructor(parentValue: object, propertyKey: string) {\n    super();\n\n    this._parentValue = parentValue;\n    this._propertyKey = propertyKey;\n    this.tag = tagForProperty(parentValue, propertyKey, buildError);\n  }\n\n  compute(): any {\n    return (this._parentValue as any)[this._propertyKey];\n  }\n}\n\nexport class NestedPropertyReference extends PropertyReference {\n  public tag: Tag;\n  private _parentReference: PathReference<any>;\n  private _parentObjectTag: TagWrapper<UpdatableTag>;\n  private _propertyKey: string;\n\n  constructor(parentReference: PathReference<any>, propertyKey: string) {\n    super();\n\n    let parentReferenceTag = parentReference.tag;\n    let parentObjectTag = UpdatableTag.create(CONSTANT_TAG);\n\n    this._parentReference = parentReference;\n    this._parentObjectTag = parentObjectTag;\n    this._propertyKey = propertyKey;\n\n    this.tag = combine([parentReferenceTag, parentObjectTag]);\n  }\n\n  compute() {\n    let { _parentReference, _parentObjectTag, _propertyKey } = this;\n\n    let parentValue = _parentReference.value();\n\n    _parentObjectTag.inner.update(tagForProperty(parentValue, _propertyKey));\n\n    if (typeof parentValue === 'string' && _propertyKey === 'length') {\n      return parentValue.length;\n    }\n\n    if (typeof parentValue === 'object' && parentValue) {\n      return parentValue[_propertyKey];\n    } else {\n      return undefined;\n    }\n  }\n}\n\nexport class UpdatableReference<T> extends ComponentPathReference<T> {\n  public tag: TagWrapper<DirtyableTag>;\n  private _value: T;\n\n  constructor(value: T) {\n    super();\n\n    this.tag = DirtyableTag.create();\n    this._value = value;\n  }\n\n  value() {\n    return this._value;\n  }\n\n  update(value: T) {\n    let { _value } = this;\n\n    if (value !== _value) {\n      this.tag.inner.dirty();\n      this._value = value;\n    }\n  }\n}\n\nexport class ConditionalReference extends GlimmerConditionalReference {\n  static create(reference: PathReference<any>) {\n    if (isConst(reference)) {\n      let value = reference.value();\n      return PrimitiveReference.create(value);\n    }\n\n    return new ConditionalReference(reference);\n  }\n}\n","import {\n  getOwner,\n  setOwner,\n  Factory,\n  Owner\n} from '@glimmer/di';\nimport {\n  Bounds,\n  ComponentManager as GlimmerComponentManager,\n  DynamicScope,\n  Environment,\n  Simple,\n  CompiledDynamicProgram,\n  Arguments,\n  Template,\n  CapturedArguments\n} from '@glimmer/runtime';\nimport Component from './component';\nimport ComponentDefinition from './component-definition';\nimport { RootReference } from './references';\nimport { Dict } from \"@glimmer/util\";\n\nexport interface ConstructorOptions {\n  env: Environment;\n}\n\nexport class ComponentStateBucket {\n  public name: string;\n  public component: Component;\n  private args: CapturedArguments;\n\n  constructor(definition: ComponentDefinition, args: CapturedArguments, owner: Owner) {\n    let componentFactory = definition.componentFactory;\n    let name = definition.name;\n\n    this.args = args;\n\n    let injections = {\n      debugName: name,\n      args: this.namedArgsSnapshot()\n    };\n\n    setOwner(injections, owner);\n    this.component = componentFactory.create(injections);\n  }\n\n  namedArgsSnapshot(): Readonly<Dict<object | void>> {\n    return Object.freeze(this.args.named.value());\n  }\n}\n\nexport default class ComponentManager implements GlimmerComponentManager<ComponentStateBucket> {\n  private env: Environment;\n\n  static create(options: ConstructorOptions): ComponentManager {\n    return new ComponentManager(options);\n  }\n\n  constructor(options: ConstructorOptions) {\n    this.env = options.env;\n  }\n\n  prepareArgs(definition: ComponentDefinition, args: Arguments): null {\n    return null;\n  }\n\n  create(environment: Environment, definition: ComponentDefinition, volatileArgs: Arguments): ComponentStateBucket | null {\n    let componentFactory = definition.componentFactory;\n    if (!componentFactory) { return null; }\n\n    let owner = getOwner(this.env);\n    return new ComponentStateBucket(definition, volatileArgs.capture(), owner);\n  }\n\n  createComponentDefinition(name: string, template: Template<any>, componentFactory?: Factory<Component>): ComponentDefinition {\n    return new ComponentDefinition(name, this, template, componentFactory);\n  }\n\n  layoutFor(definition: ComponentDefinition, bucket: ComponentStateBucket, env: Environment): CompiledDynamicProgram {\n    let template = definition.template;\n    let compiledLayout = template.asLayout().compileDynamic(this.env);\n\n    return compiledLayout;\n  }\n\n  getSelf(bucket: ComponentStateBucket) {\n    if (!bucket) { return null; }\n    return new RootReference(bucket.component);\n  }\n\n  didCreateElement(bucket: ComponentStateBucket, element: Simple.Element) {\n    if (!bucket) { return; }\n    bucket.component.element = element;\n  }\n\n  didRenderLayout(bucket: ComponentStateBucket, bounds: Bounds) {\n  }\n\n  didCreate(bucket: ComponentStateBucket) {\n    bucket && bucket.component.didInsertElement();\n  }\n\n  getTag(): null {\n    return null;\n  }\n\n  update(bucket: ComponentStateBucket, scope: DynamicScope) {\n    if (!bucket) { return; }\n\n    // TODO: This should be moved to `didUpdate`, but there's currently a\n    // Glimmer bug that causes it not to be called if the layout doesn't update.\n    let { component } = bucket;\n\n    component.args = bucket.namedArgsSnapshot();\n    component.didUpdate();\n  }\n\n  didUpdateLayout() {}\n\n  didUpdate(bucket: ComponentStateBucket) { }\n\n  getDestructor(): null {\n    return null;\n  }\n}\n","import Component, { tracked } from '@glimmer/component';\n\nclass testname extends Component {\n  @tracked\n  message: any;\n\n  constructor(options) {\n    super(options);\n    this.loadMessage();\n    setInterval(() => { this.loadMessage(); }, 3500);\n  }\n\n  async loadMessage() {\n    let request = await fetch('https://ron-swanson-quotes.herokuapp.com/v2/quotes');\n    let quote = await request.json();\n\n    this.message=quote[0];\n  }\n}\n\nexport default testname;\n","export default {\"id\":\"iF2vMYPJ\",\"block\":\"{\\\"symbols\\\":[],\\\"prelude\\\":[[6,\\\"div\\\"]],\\\"head\\\":[[9,\\\"class\\\",\\\"container\\\"],[7]],\\\"statements\\\":[[0,\\\"\\\\n  \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"mustache\\\"],[7],[0,\\\"\\\\n    \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"silly-message\\\"],[7],[0,\\\"\\\\n      \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"quote\\\"],[7],[0,\\\"\\\\n        \\\"],[1,[18,\\\"message\\\"],false],[0,\\\"\\\\n      \\\"],[8],[0,\\\"\\\\n    \\\"],[8],[0,\\\"\\\\n  \\\"],[8],[0,\\\"\\\\n\\\"],[8],[0,\\\"\\\\n\\\"]],\\\"hasEval\\\":false}\",\"meta\":{\"specifier\":\"template:/silly-message/components/silly-message\",\"<template-meta>\":true}};","import { default as __ui_components_silly_message_component__ } from '../src/ui/components/silly-message/component';\nimport { default as __ui_components_silly_message_template__ } from '../src/ui/components/silly-message/template';\nexport default {'component:/silly-message/components/silly-message': __ui_components_silly_message_component__,'template:/silly-message/components/silly-message': __ui_components_silly_message_template__};\n","export default {\"app\":{\"name\":\"silly-message\",\"rootName\":\"silly-message\"},\"types\":{\"application\":{\"definitiveCollection\":\"main\"},\"component\":{\"definitiveCollection\":\"components\"},\"helper\":{\"definitiveCollection\":\"components\"},\"renderer\":{\"definitiveCollection\":\"main\"},\"template\":{\"definitiveCollection\":\"components\"}},\"collections\":{\"main\":{\"types\":[\"application\",\"renderer\"]},\"components\":{\"group\":\"ui\",\"types\":[\"component\",\"template\",\"helper\"],\"defaultType\":\"component\",\"privateCollections\":[\"utils\"]},\"styles\":{\"group\":\"ui\",\"unresolvable\":true},\"utils\":{\"unresolvable\":true}}};\n","import Application from '@glimmer/application';\nimport Resolver, { ResolverConfiguration, BasicModuleRegistry } from '@glimmer/resolver';\nimport moduleMap from '../config/module-map';\nimport resolverConfiguration from '../config/resolver-configuration';\n\nexport default class App extends Application {\n  constructor() {\n    let moduleRegistry = new BasicModuleRegistry(moduleMap);\n    let resolver = new Resolver(resolverConfiguration, moduleRegistry);\n\n    super({\n      rootName: resolverConfiguration.app.rootName,\n      resolver\n    });\n  }\n}\n","import Application from '@glimmer/application';\n\nexport default function initializeCustomElements(app: Application, customElementDefinitions: string[]): void {\n  customElementDefinitions.forEach((name) => {\n    initializeCustomElement(app, name);\n  });\n}\n\nfunction initializeCustomElement(app: Application, name: string): void {\n  function GlimmerElement() {\n    return Reflect.construct(HTMLElement, [], GlimmerElement);\n  }\n  GlimmerElement.prototype = Object.create(HTMLElement.prototype, {\n    constructor: { value: GlimmerElement },\n    connectedCallback: {\n      value: function connectedCallback() {\n        let placeholder = document.createTextNode('');\n        let parent = this.parentNode;\n\n        parent.insertBefore(placeholder, this);\n        parent.removeChild(this);\n\n        app.renderComponent(name, parent, placeholder);\n      }\n    }\n  });\n\n  window.customElements.define(name, GlimmerElement);\n}\n","import App from './main';\nimport { ComponentManager, setPropertyDidChange } from '@glimmer/component';\nimport initializeCustomElements from '@glimmer/web-component';\n\nconst app = new App();\nconst containerElement = document.getElementById('app');\n\nsetPropertyDidChange(() => {\n  app.scheduleRerender();\n});\n\napp.registerInitializer({\n  initialize(registry) {\n    registry.register(`component-manager:/${app.rootName}/component-managers/main`, ComponentManager)\n  }\n});\n\napp.renderComponent('silly-message', containerElement, null);\n\napp.boot();\ninitializeCustomElements(app, ['silly-message']);\n"],"names":["proto","EmptyObject","LinkedList","EMPTY_SLICE","ListSlice","HAS_NATIVE_WEAKMAP","HAS_TYPED_ARRAYS","A","EMPTY_ARRAY","ListNode","dict","map","isConstReference","isConst","bounds","content.OptimizedCautiousAppendOpcode","content.OptimizedTrustingAppendOpcode","vm.ConstTest","vm.SimpleTest","vm.EnvironmentTest","expr","content.GuardedCautiousAppendOpcode","content.GuardedTrustingAppendOpcode","layout","Ops","OpcodeBuilderDSL","builder","WireFormat.Ops","is","SVG_NAMESPACE","shouldApplyFix","treeConstructionNodeMergingFix","treeConstructionTableElementFix","treeConstructionSvgElementFix","domChangesNodeMergingFix","domChangesTableElementFix","domChangesSvgElementFix","_populateBuiltins","GUID","initializeGuid","ensureGuid","set","DictSet","objKeys","Environment","isSpecifierObjectAbsolute","__ui_components_silly_message_component__","__ui_components_silly_message_template__"],"mappings":"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"}